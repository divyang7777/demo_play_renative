import { ConfigurationOptions, DecryptionFunction, EncryptionFunction, EncryptionType, IVGenerationFunction, KeyDerivationFunction, SaltGenerationFunction } from "./constructs";
/**
 * System configuration
 */
export declare class Configuration {
    constructor(options: ConfigurationOptions);
    _baseOptions: ConfigurationOptions;
    _options: ConfigurationOptions;
    /**
     * Configuration options
     * @memberof Configuration
     * @readonly
     */
    get options(): ConfigurationOptions;
    /**
     * Override the decryption method
     * @param method Which encryption type to override (cbc/gcm)
     * @param func A decryption function that should resemble that in the example
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.overrideDecryption("cbc", (encryptedComponents, keyDerivationInfo) => {
     *    // handle decryption
     *    // return Promise
     *  });
     */
    overrideDecryption(method: EncryptionType, func?: DecryptionFunction): this;
    /**
     * Override the encryption method
     * @param method Which encryption type to override (cbc/gcm)
     * @param func A encryption function that should resemble that in the example
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.overrideEncryption("cbc", (text, keyDerivationInfo, ivBuffer) => {
     *    // handle encryption
     *    // return Promise
     *  });
     */
    overrideEncryption(method: EncryptionType, func?: EncryptionFunction): this;
    /**
     * Override the IV generator
     * @param func The override function
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.overrideIVGeneration(() => {
     *    return Promise.resolve(ivBuffer);
     *  });
     */
    overrideIVGeneration(func?: IVGenerationFunction): this;
    /**
     * Override key derivation
     * Derive the key according to the `pbkdf2` function in derivation.js
     * @param func The new key derivation function
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.overrideKeyDerivation((password, salt, rounds, bits) => {
     *    return Promise.resolve(derivedKeyBuffer);
     *  });
     */
    overrideKeyDerivation(func?: KeyDerivationFunction): this;
    /**
     * Override salt generation
     * @param func The function to use for salt generation
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.overrideSaltGeneration(length => {
     *    return Promise.resolve(saltText);
     *  });
     */
    overrideSaltGeneration(func?: SaltGenerationFunction): this;
    /**
     * Reset the configuration options
     * @memberof Configuration
     * @returns Returns self
     */
    reset(): this;
    /**
     * Set the derivation rounds to use
     * @param rounds The new rounds to use (empty for reset)
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.setDerivationRounds(250000);
     */
    setDerivationRounds(rounds?: number): this;
    /**
     * Set the encryption method to use
     * @param method The method to use (cbc/gcm)
     * @returns Returns self
     * @memberof Configuration
     * @example
     *  config.use("gcm");
     */
    use(method: EncryptionType): this;
}
