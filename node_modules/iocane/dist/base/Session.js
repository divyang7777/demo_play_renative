"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Configuration_1 = require("./Configuration");
var constructs_1 = require("./constructs");
/**
 * Encryption session
 */
var Session = /** @class */ (function (_super) {
    __extends(Session, _super);
    function Session() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Decrypt some text or data
     * @param content The content to decrypt
     * @param password The password to use for decryption
     * @returns Decrypted content
     * @memberof Session
     */
    Session.prototype.decrypt = function (content, password) {
        return __awaiter(this, void 0, void 0, function () {
            var encryptedComponents, salt, rounds, method, decryptMethod, keyDerivationInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encryptedComponents = typeof content === "string"
                            ? this.options.unpack_text(content)
                            : this.options.unpack_data(content);
                        salt = encryptedComponents.salt, rounds = encryptedComponents.rounds, method = encryptedComponents.method;
                        decryptMethod = this.options["decryption_" + method];
                        return [4 /*yield*/, this._deriveKey(password, salt, rounds, method)];
                    case 1:
                        keyDerivationInfo = _a.sent();
                        return [2 /*return*/, decryptMethod(encryptedComponents, keyDerivationInfo)];
                }
            });
        });
    };
    /**
     * Encrypt some text or data
     * @param content The content to encrypt
     * @param password The password to use for encryption
     * @returns A promise that resolves with encrypted text or data
     * @memberof Session
     */
    Session.prototype.encrypt = function (content, password) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, generateIV, method, encryptMethod, _b, keyDerivationInfo, iv, encryptedComponents;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.options, generateIV = _a.generateIV, method = _a.method;
                        encryptMethod = this.options["encryption_" + method];
                        return [4 /*yield*/, Promise.all([
                                this._deriveNewKey(password),
                                generateIV()
                            ])];
                    case 1:
                        _b = _c.sent(), keyDerivationInfo = _b[0], iv = _b[1];
                        return [4 /*yield*/, encryptMethod(content, keyDerivationInfo, iv)];
                    case 2:
                        encryptedComponents = _c.sent();
                        return [2 /*return*/, typeof content === "string"
                                ? this.options.pack_text(encryptedComponents)
                                : this.options.pack_data(encryptedComponents)];
                }
            });
        });
    };
    /**
     * Derive a key using the current configuration
     * @param password The password
     * @param salt The salt
     * @param rounds Key derivation rounds
     * @param encryptionMethod Encryption method
     * @returns Derived key information
     * @protected
     * @memberof Session
     */
    Session.prototype._deriveKey = function (password, salt, rounds, encryptionMethod) {
        var _a = this.options, derivationRounds = _a.derivationRounds, optionsMethod = _a.method, pbkdf2 = _a.pbkdf2;
        var method = encryptionMethod || optionsMethod;
        var deriveFromPassword = this.options.deriveKey;
        var deriveKeyCall = method === constructs_1.EncryptionType.GCM
            ? function () {
                return deriveFromPassword(pbkdf2, password, salt, rounds || derivationRounds, 
                /* HMAC: */ false);
            }
            : function () { return deriveFromPassword(pbkdf2, password, salt, rounds || derivationRounds); };
        return deriveKeyCall();
    };
    /**
     * Derive a new key using the current configuration
     * @param password The password
     * @returns Derived key information
     * @protected
     * @memberof Session
     */
    Session.prototype._deriveNewKey = function (password) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, generateSalt, saltLength, salt;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.options, generateSalt = _a.generateSalt, saltLength = _a.saltLength;
                        return [4 /*yield*/, generateSalt(saltLength)];
                    case 1:
                        salt = _b.sent();
                        return [2 /*return*/, this._deriveKey(password, salt)];
                }
            });
        });
    };
    return Session;
}(Configuration_1.Configuration));
exports.Session = Session;
