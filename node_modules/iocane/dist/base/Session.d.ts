/// <reference types="node" />
import { Configuration } from "./Configuration";
import { DerivedKeyInfo, EncryptionType, PackedEncryptedText } from "./constructs";
/**
 * Encryption session
 */
export declare class Session extends Configuration {
    /**
     * Decrypt some text or data
     * @param content The content to decrypt
     * @param password The password to use for decryption
     * @returns Decrypted content
     * @memberof Session
     */
    decrypt(content: string | Buffer | ArrayBuffer, password: string): Promise<string | Buffer | ArrayBuffer>;
    /**
     * Encrypt some text or data
     * @param content The content to encrypt
     * @param password The password to use for encryption
     * @returns A promise that resolves with encrypted text or data
     * @memberof Session
     */
    encrypt(content: string | Buffer | ArrayBuffer, password: string): Promise<PackedEncryptedText | Buffer | ArrayBuffer>;
    /**
     * Derive a key using the current configuration
     * @param password The password
     * @param salt The salt
     * @param rounds Key derivation rounds
     * @param encryptionMethod Encryption method
     * @returns Derived key information
     * @protected
     * @memberof Session
     */
    _deriveKey(password: string, salt: string, rounds?: number, encryptionMethod?: EncryptionType): Promise<DerivedKeyInfo>;
    /**
     * Derive a new key using the current configuration
     * @param password The password
     * @returns Derived key information
     * @protected
     * @memberof Session
     */
    _deriveNewKey(password: string): Promise<DerivedKeyInfo>;
}
