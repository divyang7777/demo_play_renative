"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var timing_1 = require("../base/timing");
var constructs_1 = require("../base/constructs");
var ENC_ALGORITHM_CBC = "aes-256-cbc";
var ENC_ALGORITHM_GCM = "aes-256-gcm";
var HMAC_ALGORITHM = "sha256";
/**
 * Decrypt text using AES-CBC
 * @param encryptedComponents Encrypted components
 * @param keyDerivationInfo Key derivation information
 * @returns A promise that resolves with the decrypted string
 */
function decryptCBC(encryptedComponents, keyDerivationInfo) {
    return __awaiter(this, void 0, void 0, function () {
        var encryptedContent, iv, salt, hmacData, hmacTool, newHmaxHex, decryptTool, decryptedText;
        return __generator(this, function (_a) {
            encryptedContent = encryptedComponents.content;
            iv = Buffer.from(encryptedComponents.iv, "hex");
            salt = encryptedComponents.salt;
            hmacData = encryptedComponents.auth;
            hmacTool = crypto.createHmac(HMAC_ALGORITHM, keyDerivationInfo.hmac);
            // Generate the HMAC
            hmacTool.update(typeof encryptedContent === "string"
                ? encryptedContent
                : encryptedContent);
            hmacTool.update(encryptedComponents.iv);
            hmacTool.update(salt);
            newHmaxHex = hmacTool.digest("hex");
            // Check hmac for tampering
            if (timing_1.constantTimeCompare(hmacData, newHmaxHex) !== true) {
                throw new Error("Authentication failed while decrypting content");
            }
            decryptTool = crypto.createDecipheriv(ENC_ALGORITHM_CBC, keyDerivationInfo.key, iv);
            if (typeof encryptedContent === "string") {
                decryptedText = decryptTool.update(encryptedContent, "base64", "utf8");
                return [2 /*return*/, "" + decryptedText + decryptTool.final("utf8")];
            }
            return [2 /*return*/, Buffer.concat([decryptTool.update(encryptedContent), decryptTool.final()])];
        });
    });
}
exports.decryptCBC = decryptCBC;
/**
 * Decrypt text using AES-GCM
 * @param encryptedComponents Encrypted components
 * @param keyDerivationInfo Key derivation information
 * @returns A promise that resolves with the decrypted string
 */
function decryptGCM(encryptedComponents, keyDerivationInfo) {
    return __awaiter(this, void 0, void 0, function () {
        var encryptedContent, iv, tagHex, decryptTool, decryptedText;
        return __generator(this, function (_a) {
            encryptedContent = encryptedComponents.content;
            iv = Buffer.from(encryptedComponents.iv, "hex");
            tagHex = encryptedComponents.auth;
            decryptTool = crypto.createDecipheriv(ENC_ALGORITHM_GCM, keyDerivationInfo.key, iv);
            // Add additional auth data
            decryptTool.setAAD(Buffer.from("" + encryptedComponents.iv + keyDerivationInfo.salt, "utf8"));
            // Set auth tag
            decryptTool.setAuthTag(Buffer.from(tagHex, "hex"));
            // Perform decryption
            if (typeof encryptedContent === "string") {
                decryptedText = decryptTool.update(encryptedContent, "base64", "utf8");
                return [2 /*return*/, "" + decryptedText + decryptTool.final("utf8")];
            }
            return [2 /*return*/, Buffer.concat([decryptTool.update(encryptedContent), decryptTool.final()])];
        });
    });
}
exports.decryptGCM = decryptGCM;
/**
 * Encrypt text using AES-CBC
 * @param text The text to encrypt
 * @param keyDerivationInfo Key derivation information
 * @param iv A buffer containing the IV
 * @returns A promise that resolves with encrypted components
 */
function encryptCBC(content, keyDerivationInfo, iv) {
    return __awaiter(this, void 0, void 0, function () {
        var ivHex, encryptTool, hmacTool, rounds, encryptedContent, hmacHex, output;
        return __generator(this, function (_a) {
            ivHex = iv.toString("hex");
            encryptTool = crypto.createCipheriv(ENC_ALGORITHM_CBC, keyDerivationInfo.key, iv);
            hmacTool = crypto.createHmac(HMAC_ALGORITHM, keyDerivationInfo.hmac);
            rounds = keyDerivationInfo.rounds;
            encryptedContent = typeof content === "string"
                ? encryptTool.update(content, "utf8", "base64")
                : encryptTool.update(content);
            if (typeof content === "string") {
                encryptedContent += encryptTool.final("base64");
            }
            else {
                encryptedContent = Buffer.concat([encryptedContent, encryptTool.final()]);
            }
            // Generate hmac
            hmacTool.update(encryptedContent);
            hmacTool.update(ivHex);
            hmacTool.update(keyDerivationInfo.salt);
            hmacHex = hmacTool.digest("hex");
            output = {
                method: constructs_1.EncryptionType.CBC,
                auth: hmacHex,
                iv: ivHex,
                salt: keyDerivationInfo.salt,
                rounds: rounds,
                content: encryptedContent
            };
            return [2 /*return*/, typeof content === "string"
                    ? output
                    : output];
        });
    });
}
exports.encryptCBC = encryptCBC;
/**
 * Encrypt text using AES-GCM
 * @param text The text to encrypt
 * @param keyDerivationInfo Key derivation information
 * @param iv A buffer containing the IV
 * @returns A promise that resolves with encrypted components
 */
function encryptGCM(content, keyDerivationInfo, iv) {
    return __awaiter(this, void 0, void 0, function () {
        var ivHex, rounds, encryptTool, encryptedContent, tag, output;
        return __generator(this, function (_a) {
            ivHex = iv.toString("hex");
            rounds = keyDerivationInfo.rounds;
            encryptTool = crypto.createCipheriv(ENC_ALGORITHM_GCM, keyDerivationInfo.key, iv);
            // Add additional auth data
            encryptTool.setAAD(Buffer.from("" + ivHex + keyDerivationInfo.salt, "utf8"));
            encryptedContent = typeof content === "string"
                ? encryptTool.update(content, "utf8", "base64")
                : encryptTool.update(content);
            if (typeof content === "string") {
                encryptedContent += encryptTool.final("base64");
            }
            else {
                encryptedContent = Buffer.concat([encryptedContent, encryptTool.final()]);
            }
            tag = encryptTool.getAuthTag();
            output = {
                method: constructs_1.EncryptionType.GCM,
                iv: ivHex,
                salt: keyDerivationInfo.salt,
                rounds: rounds,
                content: encryptedContent,
                auth: tag.toString("hex")
            };
            return [2 /*return*/, typeof content === "string"
                    ? output
                    : output];
        });
    });
}
exports.encryptGCM = encryptGCM;
/**
 * IV generator
 * @returns A newly generated IV
 */
function generateIV() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, Buffer.from(crypto.randomBytes(16))];
        });
    });
}
exports.generateIV = generateIV;
/**
 * Generate a random salt
 * @param length The length of the string to generate
 * @returns A promise that resolves with a salt (hex)
 * @throws {Error} Rejects if length is invalid
 */
function generateSalt(length) {
    return __awaiter(this, void 0, void 0, function () {
        var output;
        return __generator(this, function (_a) {
            if (length <= 0) {
                throw new Error("Failed generating salt: Invalid length supplied: " + length);
            }
            output = "";
            while (output.length < length) {
                output += crypto.randomBytes(3).toString("base64");
                if (output.length > length) {
                    output = output.substr(0, length);
                }
            }
            return [2 /*return*/, output];
        });
    });
}
exports.generateSalt = generateSalt;
