/// <reference types="node" />
import { DerivedKeyInfo, PBKDF2Function } from "../base/constructs";
/**
 * Derive a key from a password
 * @param pbkdf2Gen The generator method
 * @param password The password to derive from
 * @param salt The salt
 * @param rounds The number of iterations
 * @param generateHMAC Enable HMAC key generation
 * @throws {Error} Rejects if no password is provided
 * @throws {Error} Rejects if no salt is provided
 * @throws {Error} Rejects if no rounds are provided
 * @returns A promise that resolves with derived key information
 */
export declare function deriveFromPassword(pbkdf2Gen: PBKDF2Function, password: string, salt: string, rounds: number, generateHMAC?: boolean): Promise<DerivedKeyInfo>;
/**
 * The default PBKDF2 function
 * @param password The password to use
 * @param salt The salt to use
 * @param rounds The number of iterations
 * @param bits The size of the key to generate, in bits
 * @returns A Promise that resolves with the hash
 */
export declare function pbkdf2(password: string, salt: string, rounds: number, bits: number): Promise<Buffer>;
