"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pbkdf2_1 = require("pbkdf2");
var DERIVED_KEY_ALGORITHM = "sha256";
var HMAC_KEY_SIZE = 32;
var PASSWORD_KEY_SIZE = 32;
/**
 * Derive a key from a password
 * @param pbkdf2Gen The generator method
 * @param password The password to derive from
 * @param salt The salt
 * @param rounds The number of iterations
 * @param generateHMAC Enable HMAC key generation
 * @throws {Error} Rejects if no password is provided
 * @throws {Error} Rejects if no salt is provided
 * @throws {Error} Rejects if no rounds are provided
 * @returns A promise that resolves with derived key information
 */
function deriveFromPassword(pbkdf2Gen, password, salt, rounds, generateHMAC) {
    if (generateHMAC === void 0) { generateHMAC = true; }
    return __awaiter(this, void 0, void 0, function () {
        var bits, derivedKeyData, derivedKeyHex, dkhLength, keyBuffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!password) {
                        throw new Error("Failed deriving key: Password must be provided");
                    }
                    if (!salt) {
                        throw new Error("Failed deriving key: Salt must be provided");
                    }
                    if (!rounds || rounds <= 0) {
                        throw new Error("Failed deriving key: Rounds must be greater than 0");
                    }
                    bits = generateHMAC ? (PASSWORD_KEY_SIZE + HMAC_KEY_SIZE) * 8 : PASSWORD_KEY_SIZE * 8;
                    return [4 /*yield*/, pbkdf2Gen(password, salt, rounds, bits)];
                case 1:
                    derivedKeyData = _a.sent();
                    derivedKeyHex = derivedKeyData.toString("hex");
                    dkhLength = derivedKeyHex.length;
                    keyBuffer = generateHMAC
                        ? Buffer.from(derivedKeyHex.substr(0, dkhLength / 2), "hex")
                        : Buffer.from(derivedKeyHex, "hex");
                    return [2 /*return*/, {
                            salt: salt,
                            key: keyBuffer,
                            rounds: rounds,
                            hmac: generateHMAC
                                ? Buffer.from(derivedKeyHex.substr(dkhLength / 2, dkhLength / 2), "hex")
                                : null
                        }];
            }
        });
    });
}
exports.deriveFromPassword = deriveFromPassword;
/**
 * The default PBKDF2 function
 * @param password The password to use
 * @param salt The salt to use
 * @param rounds The number of iterations
 * @param bits The size of the key to generate, in bits
 * @returns A Promise that resolves with the hash
 */
function pbkdf2(password, salt, rounds, bits) {
    return new Promise(function (resolve, reject) {
        pbkdf2_1.pbkdf2(password, salt, rounds, bits / 8, DERIVED_KEY_ALGORITHM, function (err, key) {
            if (err) {
                return reject(err);
            }
            return resolve(key);
        });
    });
}
exports.pbkdf2 = pbkdf2;
