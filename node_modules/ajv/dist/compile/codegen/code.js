"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProperty = exports.stringify = exports.strConcat = exports.str = exports._ = exports.nil = exports.Name = exports.IDENTIFIER = exports._Code = void 0;
class _Code {
    constructor(s) {
        this._str = s;
    }
    toString() {
        return this._str;
    }
    emptyStr() {
        return this._str === "" || this._str === '""';
    }
}
exports._Code = _Code;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
class Name extends _Code {
    constructor(s) {
        super(s);
        if (!exports.IDENTIFIER.test(s))
            throw new Error("CodeGen: name must be a valid identifier");
    }
    emptyStr() {
        return false;
    }
}
exports.Name = Name;
exports.nil = new _Code("");
function _(strs, ...args) {
    return new _Code(strs.reduce((res, s, i) => `${res}${interpolate(args[i - 1])}${s}`));
}
exports._ = _;
function str(strs, ...args) {
    return new _Code(strs
        .map(safeStringify)
        .reduce((res, s, i) => concat(concat(res, interpolateStr(args[i - 1])), s)));
}
exports.str = str;
function concat(s, a) {
    return a === '""'
        ? s
        : s === '""'
            ? `${a}`
            : typeof a != "string"
                ? `${s.slice(0, -1)}${a}"`
                : s.endsWith('"') && a[0] === '"'
                    ? s.slice(0, -1) + a.slice(1)
                    : `${s} + ${a}`;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
}
exports.strConcat = strConcat;
function interpolate(x) {
    return x instanceof _Code || typeof x == "number" || typeof x == "boolean" || x === null
        ? x
        : safeStringify(x);
}
function interpolateStr(x) {
    if (Array.isArray(x))
        x = x.join(",");
    x = interpolate(x);
    return x instanceof _Code ? x.toString() : x;
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x)
        .replace(/\u2028/g, "\\u2028")
        .replace(/\u2029/g, "\\u2029");
}
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
}
exports.getProperty = getProperty;
//# sourceMappingURL=code.js.map