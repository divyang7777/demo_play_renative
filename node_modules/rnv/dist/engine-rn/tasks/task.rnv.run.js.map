{"version":3,"sources":["../../../src/engine-rn/tasks/task.rnv.run.js"],"names":["taskRnvRun","c","parentTask","originTask","platform","port","runtime","target","hosted","program","TASK_CONFIGURE","TASK_RUN","bundleAssets","IOS","TVOS","ANDROID","ANDROID_TV","ANDROID_WEAR","only","taskRnvRunHelp","Task","description","fn","fnHelp","task","dependencies","before","params","PARAMS","withBase","withConfigure","withRun","platforms"],"mappings":"4RAAA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;;AAEO,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AACdC,QADc,CACDH,CADC,CACdG,QADc;AAEdC,IAFc,CAELJ,CAAC,CAACK,OAFG,CAEdD,IAFc;AAGdE,MAHc,CAGHN,CAAC,CAACK,OAHC,CAGdC,MAHc;AAIdC,MAJc,CAIHP,CAAC,CAACQ,OAJC,CAIdD,MAJc;AAKtB,oBAAQ,YAAR,WAAgCN,UAAhC,UAAmDG,IAAnD,YAAkEE,MAAlE,YAAmFC,MAAnF,EALsB;;AAOhB,qCAAkBP,CAAlB,CAAqBS,yBAArB,CAAqCC,mBAArC,CAA+CR,UAA/C,CAPgB;;AAShBS,YATgB,CASD,0BAAcX,CAAd,CAAiBA,CAAC,CAACG,QAAnB,CAA6B,cAA7B,CAA6C,KAA7C,CATC;;AAWdA,QAXc;AAYbS,cAZa;AAabC,eAba;;;;;;;;;;AAuBbC,kBAvBa;AAwBbC,qBAxBa;AAyBbC,uBAzBa,wBAcThB,CAAC,CAACQ,OAAF,CAAUS,IAdD,6EAeJ,yCAAuBjB,CAAvB,CAA0BU,mBAA1B,CAAoCR,UAApC,CAfI,6DAgBJ,8BAAgBF,CAAhB,CAhBI,UAiBV,GAAI,CAACW,YAAL,CAAmB,CACf,uBAAW,iBAAX,EACH,CAnBS,gCAoBH,2CAAyBX,CAAzB,CApBG,0CAsBP,8BAAgBA,CAAhB,CAtBO;AA0BTA,CAAC,CAACQ,OAAF,CAAUS,IA1BD;AA2BJ,yCAAuBjB,CAAvB,CAA0BU,mBAA1B,CAAoCR,UAApC,CA3BI;AA4BNS,YAAY,EAAIR,QAAQ,GAAKa,uBA5BvB;AA6BA,+BAAehB,CAAf,CA7BA;;AA+BJ,2BAAWA,CAAX,CAAcM,MAAd,CA/BI;AAgCV,GAAI,CAACK,YAAL,CAAmB;AACf,uBAAW,iBAAX;AACH,CAlCS;AAmCH,2CAAyBX,CAAzB,CAnCG;;AAqCP,2BAAWA,CAAX,CAAcM,MAAd,CArCO;;AAuCP,sCAAiBN,CAAjB,CAvCO,wEAAnB,C;;;;AA2CA,GAAMkB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB;AAC1B,0EAD0B,sEAAvB,C;;;;;AAMP,GAAMC,CAAAA,IAAI,CAAG;AACTC,WAAW,CAAE,2CADJ;AAETC,EAAE,CAAEtB,UAFK;AAGTuB,MAAM,CAAEJ,cAHC;AAITK,IAAI,CAAE,KAJG;AAKTC,YAAY,CAAE;AACVC,MAAM,CAAEhB,yBADE,CALL;;AAQTiB,MAAM,CAAEC,kBAAOC,QAAP,CAAgBD,kBAAOE,aAAP,CAAqBF,kBAAOG,OAAP,EAArB,CAAhB,CARC;AASTC,SAAS,CAAE;AACPnB,cADO;AAEPC,eAFO;AAGPC,kBAHO;AAIPC,qBAJO;AAKPC,uBALO,CATF,CAAb,C;;;;AAkBeG,I","sourcesContent":["import { getConfigProp } from '../../core/common';\nimport { logErrorPlatform } from '../../core/platformManager';\nimport { logTask, logSummary, logRaw } from '../../core/systemManager/logger';\nimport { IOS,\n    TVOS,\n    ANDROID,\n    ANDROID_TV,\n    ANDROID_WEAR,\n    TASK_RUN,\n    TASK_CONFIGURE,\n    PARAMS } from '../../core/constants';\nimport { runXcodeProject } from '../../sdk-xcode';\nimport { packageAndroid, runAndroid } from '../../sdk-android';\nimport { executeOrSkipTask } from '../../core/engineManager';\nimport { startBundlerIfRequired, waitForBundlerIfRequired } from '../commonEngine';\n\nexport const taskRnvRun = async (c, parentTask, originTask) => {\n    const { platform } = c;\n    const { port } = c.runtime;\n    const { target } = c.runtime;\n    const { hosted } = c.program;\n    logTask('taskRnvRun', `parent:${parentTask} port:${port} target:${target} hosted:${hosted}`);\n\n    await executeOrSkipTask(c, TASK_CONFIGURE, TASK_RUN, originTask);\n\n    const bundleAssets = getConfigProp(c, c.platform, 'bundleAssets', false);\n\n    switch (platform) {\n        case IOS:\n        case TVOS:\n            if (!c.program.only) {\n                await startBundlerIfRequired(c, TASK_RUN, originTask);\n                await runXcodeProject(c);\n                if (!bundleAssets) {\n                    logSummary('BUNDLER STARTED');\n                }\n                return waitForBundlerIfRequired(c);\n            }\n            return runXcodeProject(c);\n        case ANDROID:\n        case ANDROID_TV:\n        case ANDROID_WEAR:\n            if (!c.program.only) {\n                await startBundlerIfRequired(c, TASK_RUN, originTask);\n                if (bundleAssets || platform === ANDROID_WEAR) {\n                    await packageAndroid(c);\n                }\n                await runAndroid(c, target);\n                if (!bundleAssets) {\n                    logSummary('BUNDLER STARTED');\n                }\n                return waitForBundlerIfRequired(c);\n            }\n            return runAndroid(c, target);\n        default:\n            return logErrorPlatform(c);\n    }\n};\n\nexport const taskRnvRunHelp = async () => {\n    logRaw(`\nMore info at: https://renative.org/docs/api-cli\n`);\n};\n\nconst Task = {\n    description: 'Run your app on target device or emulator',\n    fn: taskRnvRun,\n    fnHelp: taskRnvRunHelp,\n    task: 'run',\n    dependencies: {\n        before: TASK_CONFIGURE\n    },\n    params: PARAMS.withBase(PARAMS.withConfigure(PARAMS.withRun())),\n    platforms: [\n        IOS,\n        TVOS,\n        ANDROID,\n        ANDROID_TV,\n        ANDROID_WEAR,\n    ],\n};\n\nexport default Task;\n"],"file":"task.rnv.run.js"}