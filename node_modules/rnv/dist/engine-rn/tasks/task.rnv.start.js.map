{"version":3,"sources":["../../../src/engine-rn/tasks/task.rnv.start.js"],"names":["BUNDLER_PLATFORMS","IOS","TVOS","ANDROID","ANDROID_TV","ANDROID_WEAR","taskRnvStart","c","parentTask","originTask","platform","hosted","program","runtime","port","disableReset","TASK_CONFIGURE_SOFT","TASK_START","startCmd","resetHard","reset","white","url","cyan","localhost","isRunning","resetCompleted","stdio","silent","env","description","fn","task","params","PARAMS","withBase","withConfigure","platforms"],"mappings":"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","sourcesContent":["import { getEntryFile, confirmActiveBundler } from '../../core/common';\nimport { doResolve } from '../../core/resolve';\nimport { logErrorPlatform } from '../../core/platformManager';\nimport { generateEnvVars, executeTask } from '../../core/engineManager';\nimport { chalk, logTask, logError, logRaw, logInfo } from '../../core/systemManager/logger';\nimport { isBundlerActive } from '../commonEngine';\nimport { IOS,\n    TVOS,\n    ANDROID,\n    ANDROID_TV,\n    ANDROID_WEAR,\n    TASK_START,\n    TASK_CONFIGURE_SOFT,\n    PARAMS } from '../../core/constants';\nimport { executeAsync } from '../../core/systemManager/exec';\n\n\nconst BUNDLER_PLATFORMS = {};\n\nBUNDLER_PLATFORMS[IOS] = IOS;\nBUNDLER_PLATFORMS[TVOS] = IOS;\nBUNDLER_PLATFORMS[ANDROID] = ANDROID;\nBUNDLER_PLATFORMS[ANDROID_TV] = ANDROID;\nBUNDLER_PLATFORMS[ANDROID_WEAR] = ANDROID;\n\nexport const taskRnvStart = async (c, parentTask, originTask) => {\n    const { platform } = c;\n    const { hosted } = c.program;\n\n    logTask('taskRnvStart', `parent:${parentTask} port:${c.runtime.port} hosted:${!!hosted}`);\n\n    if (hosted) {\n        return logError(\n            'This platform does not support hosted mode',\n            true\n        );\n    }\n    // Disable reset for other commands (ie. cleaning platforms)\n    c.runtime.disableReset = true;\n    if (!parentTask) {\n        await executeTask(c, TASK_CONFIGURE_SOFT, TASK_START, originTask);\n    }\n\n\n    switch (platform) {\n        case IOS:\n        case TVOS:\n        case ANDROID:\n        case ANDROID_TV:\n        case ANDROID_WEAR: {\n            let startCmd = `node ${doResolve(\n                'react-native'\n            )}/local-cli/cli.js start --port ${\n                c.runtime.port\n            } --config=metro.config.js`;\n\n            if (c.program.resetHard) {\n                startCmd += ' --reset-cache';\n            } else if (c.program.reset) {\n                startCmd += ' --reset-cache';\n            }\n            if (c.program.resetHard || c.program.reset) {\n                logInfo(\n                    `You passed ${chalk().white('-r')} argument. --reset-cache will be applied to react-native`\n                );\n            }\n            // logSummary('BUNDLER STARTED');\n            const url = chalk().cyan(`http://${c.runtime.localhost}:${c.runtime.port}/${\n                getEntryFile(c, c.platform)}.bundle?platform=${BUNDLER_PLATFORMS[platform]}`);\n            logRaw(`\n\nDev server running at: ${url}\n\n`);\n            if (!parentTask) {\n                const isRunning = await isBundlerActive(c);\n                const resetCompleted = await confirmActiveBundler(c);\n                if (!isRunning || (isRunning && resetCompleted)) {\n                    return executeAsync(c, startCmd, { stdio: 'inherit', silent: true, env: { ...generateEnvVars(c) } });\n                }\n                return true;\n            }\n            executeAsync(c, startCmd, { stdio: 'inherit', silent: true, env: { ...generateEnvVars(c) } });\n            return true;\n        }\n        default:\n\n            return logErrorPlatform(c);\n    }\n};\n\nexport default {\n    description: 'Starts bundler / server',\n    fn: taskRnvStart,\n    task: 'start',\n    params: PARAMS.withBase(PARAMS.withConfigure()),\n    platforms: [\n        IOS,\n        TVOS,\n        ANDROID,\n        ANDROID_TV,\n        ANDROID_WEAR,\n    ],\n};\n"],"file":"task.rnv.start.js"}