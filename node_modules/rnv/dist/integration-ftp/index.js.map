{"version":3,"sources":["../../src/integration-ftp/index.js"],"names":["FtpDeploy","require","dotEnv","_deployToFtp","c","platform","Promise","resolve","reject","promise","envPath","path","paths","project","dir","_createEnvFtpConfig","resolve2","err","data","toString","then","envContent","matches","targetMatches","split","map","line","forEach","key","indexOf","envPromise","config","user","process","env","RNV_DEPLOY_WEB_FTP_USER","password","RNV_DEPLOY_WEB_FTP_PASSWORD","host","RNV_DEPLOY_WEB_FTP_SERVER","port","RNV_DEPLOY_WEB_FTP_PORT","localRoot","buildConfig","platforms","deploy","DEPLOY_TARGET_FTP","remoteRoot","include","exclude","deleteRemote","forcePasv","ftpDeploy","catch","configFilePath","previousContent","inquirer","prompt","name","type","message","validate","i","default","_createDeployConfig","builds","runtime","appId","excludeSourcemaps","concat","appConfig","files","deployToFtp","targetConfig","description","fn","task","params","PARAMS","withBase"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport inquirer from 'inquirer';\nimport {\n    fsExistsSync,\n    writeFileSync,\n    fsWriteFileSync,\n    fsReadFile\n} from '../core/systemManager/fileutils';\nimport { logInfo, logTask } from '../core/systemManager/logger';\nimport { DEPLOY_TARGET_FTP } from '../core/deployManager/webTools';\nimport { PARAMS } from '../core/constants';\n\nconst FtpDeploy = require('ftp-deploy');\nconst dotEnv = require('dotenv');\n\nconst _deployToFtp = (c, platform) => new Promise((resolve, reject) => {\n    logTask('_deployToFtp');\n    let promise;\n    const envPath = path.resolve(c.paths.project.dir, '.env');\n    if (!fsExistsSync(envPath)) {\n        logInfo('.env file does not exist. Creating one for you');\n        promise = _createEnvFtpConfig(envPath);\n    } else {\n        promise = new Promise((resolve2) => {\n            fsReadFile(envPath, (err, data) => {\n                if (err) return reject(err);\n                resolve2(data.toString());\n            });\n        });\n    }\n    promise\n        .then((envContent) => {\n            let matches = 0;\n            const targetMatches = 2;\n            envContent\n                .split('\\n')\n                .map(line => line.split('='))\n                .forEach(([key]) => {\n                    if (\n                        [\n                            'RNV_DEPLOY_WEB_FTP_SERVER',\n                            'RNV_DEPLOY_WEB_FTP_USER'\n                        ].indexOf(key) > -1\n                    ) {\n                        matches++;\n                    }\n                });\n            let envPromise;\n            if (matches >= targetMatches) {\n                envPromise = Promise.resolve();\n            } else {\n                logInfo(\n                    '.env file does not contain all needed FTP config, helping you to set it up'\n                );\n                envPromise = _createEnvFtpConfig(\n                    envPath,\n                    `${envContent}\\n`\n                );\n            }\n            return envPromise;\n        })\n        .then(() => {\n            dotEnv.config();\n            const config = {\n                user: process.env.RNV_DEPLOY_WEB_FTP_USER,\n                password: process.env.RNV_DEPLOY_WEB_FTP_PASSWORD, // optional, prompted if none given\n                host: process.env.RNV_DEPLOY_WEB_FTP_SERVER,\n                port: process.env.RNV_DEPLOY_WEB_FTP_PORT || 21,\n                localRoot:\n                        c.buildConfig.platforms[platform].deploy[\n                            DEPLOY_TARGET_FTP\n                        ].localRoot,\n                remoteRoot:\n                        c.buildConfig.platforms[platform].deploy[\n                            DEPLOY_TARGET_FTP\n                        ].remoteRoot || '/',\n                include: c.buildConfig.platforms[platform].deploy[\n                    DEPLOY_TARGET_FTP\n                ].include || ['*', '**/*'], // this would upload everything except dot files\n                exclude:\n                        c.buildConfig.platforms[platform].deploy[\n                            DEPLOY_TARGET_FTP\n                        ].exclude || [], // e.g. exclude sourcemaps - ** exclude: [] if nothing to exclude **\n                deleteRemote:\n                        c.buildConfig.platforms[platform].deploy[\n                            DEPLOY_TARGET_FTP\n                        ].exclude.deleteRemote || false, // delete ALL existing files at destination before uploading, if true\n                forcePasv: true // Passive mode is forced (EPSV command is not sent)\n            };\n            return config;\n        })\n        .then((config) => {\n            const ftpDeploy = new FtpDeploy();\n            return ftpDeploy.deploy(config);\n        })\n        .catch(reject);\n});\n\nconst _createEnvFtpConfig = async (configFilePath, previousContent = '') => {\n    let envContent = previousContent || '';\n\n    const { host, user, password, port } = await inquirer.prompt([\n        {\n            name: 'host',\n            type: 'input',\n            message: 'Type your FTP host',\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'port',\n            type: 'number',\n            message: 'Type your FTP port',\n            default: 21,\n            validate: i => !!i || 'No FTP server provided'\n        },\n        {\n            name: 'user',\n            message: 'Type your FTP user',\n            type: 'input',\n            validate: i => !!i || 'No FTP user provided'\n        },\n        {\n            name: 'password',\n            message:\n                'Type your FTP password (or press ENTER for prompting every time)',\n            type: 'password'\n        }\n    ]);\n\n    envContent += `RNV_DEPLOY_WEB_FTP_SERVER=${host}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_USER=${user}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PASSWORD=${password}\\n`;\n    envContent += `RNV_DEPLOY_WEB_FTP_PORT=${port}`;\n\n    fsWriteFileSync(configFilePath, envContent);\n    logInfo(`Writing .env config to ${configFilePath}`);\n};\n\nconst _createDeployConfig = async (c, platform) => {\n    logTask('_createDeployConfig');\n\n    const deploy = c.buildConfig.platforms[platform].deploy || {};\n\n    deploy[DEPLOY_TARGET_FTP] = {};\n    deploy[DEPLOY_TARGET_FTP].type = DEPLOY_TARGET_FTP;\n\n    deploy[DEPLOY_TARGET_FTP].localRoot = path.resolve(\n        c.paths.project.builds.dir,\n        `${c.runtime.appId}_${platform}`\n    );\n    const {\n        remoteRoot,\n        deleteRemote,\n        include,\n        exclude,\n        excludeSourcemaps\n    } = await inquirer.prompt([\n        {\n            name: 'remoteRoot',\n            type: 'input',\n            message: 'Folder on the ftp to upload the project',\n            default: '/'\n        },\n        {\n            name: 'deleteRemote',\n            type: 'confirm',\n            message:\n                'Delete all contents of that folder when deploying versions?'\n        },\n        {\n            name: 'include',\n            type: 'input',\n            message: 'Included files pattern, comma separated',\n            default: \"'*','**/*'\"\n        },\n        {\n            name: 'exclude',\n            type: 'input',\n            message: 'Excluded files pattern, comma separated',\n            default: '[]'\n        },\n        {\n            name: 'excludeSourcemaps',\n            type: 'confirm',\n            message: 'Exclude sourcemaps?'\n        }\n    ]);\n\n    deploy[DEPLOY_TARGET_FTP].remoteRoot = remoteRoot || '/';\n    deploy[DEPLOY_TARGET_FTP].deleteRemote = deleteRemote;\n    deploy[DEPLOY_TARGET_FTP].include = include\n        ? include.split(',')\n        : ['*', '**/*'];\n    deploy[DEPLOY_TARGET_FTP].exclude = exclude ? exclude.split(',') : [];\n    deploy[DEPLOY_TARGET_FTP].exclude = deploy[\n        DEPLOY_TARGET_FTP\n    ].exclude.concat(excludeSourcemaps ? ['**/*.map'] : []);\n\n    logInfo(`Setting your appconfig for ${platform} to include deploy type: ${DEPLOY_TARGET_FTP}\n                    on ${c.paths.appConfig.config}\n                `);\n\n    // TODO: Review this (where to put what props renative.*.json)\n    c.files.appConfig.config.platforms[platform].deploy = deploy;\n    writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n};\n\nconst deployToFtp = (c, platform) => {\n    logTask('checkDeployConfigTarget');\n    const targetConfig = c.buildConfig.platforms[platform];\n    if (targetConfig?.deploy?.[DEPLOY_TARGET_FTP]?.type) {\n        return _deployToFtp(c, platform);\n    }\n    return _createDeployConfig(c, platform).then(() => _deployToFtp(c, platform));\n};\n\nexport { deployToFtp };\n\n\nexport default {\n    description: '',\n    fn: deployToFtp,\n    task: 'deploy ftp',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"index.js"}