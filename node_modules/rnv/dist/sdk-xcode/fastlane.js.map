{"version":3,"sources":["../../src/sdk-xcode/fastlane.js"],"names":["registerDevice","c","platform","teamID","udid","runtime","targetUDID","deviceName","target","args","join","shell","stdio","silent","updateProfile","appConfigId","grey","IOS","TVOS","Promise","reject","scheme","program","appId","id","pMethod","method","runScheme","provisioning","certsPath","path","paths","workspace","appConfig","dir","process","env","APPLE_DEVELOPER_USERNAME","concat","push"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { getConfigProp, getAppId } from '../core/common';\nimport { chalk, logTask, logWarning, logSuccess } from '../core/systemManager/logger';\nimport { executeAsync } from '../core/systemManager/exec';\nimport { IOS, TVOS } from '../core/constants';\n\nexport const registerDevice = async (c) => {\n    logTask(`registerDevice:${c.platform}`);\n\n    const teamID = getConfigProp(c, c.platform, 'teamID');\n    const udid = c.runtime.targetUDID;\n    const deviceName = c.runtime.target;\n\n    const args = [\n        'run',\n        'register_device',\n        `team_id:\"${teamID}\"`,\n        `udid:\"${udid}\"`,\n        `name:\"${deviceName}\"`\n    ];\n\n    try {\n        await executeAsync(c, `fastlane ${args.join(' ')}`, {\n            shell: true,\n            stdio: 'inherit',\n            silent: true\n        });\n        logSuccess(\n            `Succesfully registered device ${deviceName}:${udid}:${teamID}`\n        );\n        return true;\n    } catch (e) {\n        logWarning(e);\n        return true;\n    }\n};\n\nexport const updateProfile = async (c, appConfigId) => {\n    logTask(`updateProfile:${appConfigId}`, chalk().grey);\n\n    // TODO: run trough all schemes\n    // const schemes = c.buildConfig.platforms?.[c.platform]?.buildSchemes\n    // const currScheme = c.program.scheme\n    // for(k in schemes) {\n    //   c.program.scheme = k\n    // }\n\n    // if (appConfigId) await setAppConfig(c, appConfigId);\n\n    if (c.platform !== IOS && c.platform !== TVOS) {\n        return Promise.reject(\n            `updateProfile:platform ${c.platform} not supported`\n        );\n    }\n    const { scheme } = c.program;\n\n    const { platform } = c;\n\n    const { appId } = c.runtime;\n\n    const id = getAppId(c, platform);\n    const teamID = getConfigProp(c, platform, 'teamID');\n    const pMethod = getConfigProp(c, platform, 'exportOptions')?.method;\n    const runScheme = getConfigProp(c, platform, 'runScheme');\n    let provisioning;\n    if (pMethod === 'ad-hoc') provisioning = 'adhoc';\n    if (pMethod === 'development' || runScheme === 'Debug') { provisioning = 'development'; }\n\n    const certsPath = path.join(c.paths.workspace.appConfig.dir, 'certs');\n\n    let args = [\n        'sigh',\n        '--app_identifier',\n        id,\n        '--team_id',\n        teamID,\n        '--output_path',\n        certsPath,\n        '--force',\n        '--platform',\n        platform\n    ];\n    if (process.env.APPLE_DEVELOPER_USERNAME) {\n        args = args.concat([\n            '--username',\n            process.env.APPLE_DEVELOPER_USERNAME\n        ]);\n    }\n    if (provisioning) {\n        args.push(`--${provisioning}`);\n    }\n\n    try {\n        await executeAsync(c, `fastlane ${args.join(' ')}`, {\n            shell: true,\n            stdio: 'inherit',\n            silent: true\n        });\n        logSuccess(\n            `Succesfully updated provisioning profile for ${appId}:${scheme}:${id}`\n        );\n        return true;\n    } catch (e) {\n        logWarning(e);\n        return true;\n    }\n};\n"],"file":"fastlane.js"}