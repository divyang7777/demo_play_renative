{"version":3,"sources":["../../src/sdk-xcode/podfileParser.js"],"names":["parsePodFile","c","platform","appFolder","pluginInject","pluginConfigiOS","podfileInject","plugin","pluginPlat","key","podName","_injectPod","podNames","forEach","v","isStatic","staticFrameworks","includes","push","reactSubSpecs","podfile","injectLines","ignoreWarnings","podWarnings","podfileSources","podfileObj","buildConfig","platforms","sources","length","deploymentTarget","staticPodDefinition","podVersion","isPodOld","injects","pattern","override","join","path","REACT_CORE_OVERRIDES","isNpm","podPath","podspecPath","git","commit","version"],"mappings":"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","sourcesContent":["import path from 'path';\nimport compareVersions from 'compare-versions';\nimport {\n    getAppFolder,\n    getAppTemplateFolder,\n    getConfigProp,\n    getFlavouredProp,\n    addSystemInjects\n} from '../core/common';\nimport { logTask, logWarning } from '../core/systemManager/logger';\nimport { parsePlugins, overrideFileContents } from '../core/pluginManager';\nimport { doResolve, doResolvePath } from '../core/resolve';\nimport { executeAsync } from '../core/systemManager/exec';\nimport { writeCleanFile } from '../core/systemManager/fileutils';\n\nexport const parsePodFile = async (c, platform) => {\n    logTask('parsePodFile');\n\n    const appFolder = getAppFolder(c);\n    let pluginInject = '';\n\n    // PLUGINS\n    c.pluginConfigiOS.podfileInject = '';\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        const podName = getFlavouredProp(c, pluginPlat, 'podName');\n        if (podName) {\n            pluginInject += _injectPod(podName, pluginPlat, plugin, key);\n        }\n        const podNames = getFlavouredProp(c, pluginPlat, 'podNames');\n        if (podNames) {\n            podNames.forEach((v) => {\n                pluginInject += _injectPod(v, pluginPlat, plugin, key);\n            });\n        }\n        const isStatic = getFlavouredProp(c, pluginPlat, 'isStatic');\n        if (isStatic === true) {\n            if (!c.pluginConfigiOS.staticFrameworks.includes(podName)) {\n                c.pluginConfigiOS.staticFrameworks.push(`'${podName}'`);\n            }\n        }\n        const reactSubSpecs = getFlavouredProp(c, pluginPlat, 'reactSubSpecs');\n        if (reactSubSpecs) {\n            logWarning(\n                'reactSubSpecs prop is deprecated. yoy can safely remove it'\n            );\n        }\n\n        const podfile = getFlavouredProp(c, pluginPlat, 'Podfile');\n        if (podfile) {\n            const { injectLines } = podfile;\n            // INJECT LINES\n            if (injectLines) {\n                injectLines.forEach((v) => {\n                    c.pluginConfigiOS.podfileInject += `${v}\\n`;\n                });\n            }\n        }\n    });\n\n    // WARNINGS\n    const ignoreWarnings = getConfigProp(c, platform, 'ignoreWarnings');\n    const podWarnings = ignoreWarnings ? 'inhibit_all_warnings!' : '';\n\n    // SOURCES\n    c.pluginConfigiOS.podfileSources = '';\n    const podfileObj = getFlavouredProp(\n        c,\n        c.buildConfig?.platforms?.[platform],\n        'Podfile'\n    );\n    const podfileSources = podfileObj?.sources;\n    if (podfileSources && podfileSources.length) {\n        podfileSources.forEach((v) => {\n            c.pluginConfigiOS.podfileSources += `source '${v}'\\n`;\n        });\n    }\n\n\n    // DEPLOYMENT TARGET\n    const deploymentTarget = getConfigProp(\n        c,\n        platform,\n        'deploymentTarget',\n        '10.0'\n    );\n    c.pluginConfigiOS.deploymentTarget = deploymentTarget;\n\n    // STATIC POD INJECT VERSION\n    c.pluginConfigiOS.staticPodDefinition = 'Pod::BuildType.static_library';\n    try {\n        const podVersion = await executeAsync(c, 'pod --version');\n        const isPodOld = compareVersions(podVersion, '1.9') < 0;\n        if (isPodOld) {\n            c.pluginConfigiOS.staticPodDefinition = 'Pod::Target::BuildType.static_library';\n        }\n    } catch (e) {\n        // Ignore\n    }\n\n    const injects = [\n        { pattern: '{{PLUGIN_PATHS}}', override: pluginInject },\n        { pattern: '{{PLUGIN_WARNINGS}}', override: podWarnings },\n        {\n            pattern: '{{PLUGIN_PODFILE_INJECT}}',\n            override: c.pluginConfigiOS.podfileInject\n        },\n        {\n            pattern: '{{PLUGIN_PODFILE_SOURCES}}',\n            override: c.pluginConfigiOS.podfileSources\n        },\n        {\n            pattern: '{{PLUGIN_DEPLOYMENT_TARGET}}',\n            override: c.pluginConfigiOS.deploymentTarget\n        },\n        {\n            pattern: '{{PLUGIN_STATIC_FRAMEWORKS}}',\n            override: c.pluginConfigiOS.staticFrameworks.join(',')\n        },\n        {\n            pattern: '{{PATH_JSC_ANDROID}}',\n            override: doResolve('jsc-android')\n        },\n        {\n            pattern: '{{PATH_REACT_NATIVE}}',\n            override: doResolve('react-native')\n        },\n        {\n            pattern: '{{PLUGIN_STATIC_POD_DEFINITION}}',\n            override: c.pluginConfigiOS.staticPodDefinition\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        path.join(getAppTemplateFolder(c, platform), 'Podfile'),\n        path.join(appFolder, 'Podfile'),\n        injects, null, c\n    );\n    return true;\n};\n\nconst REACT_CORE_OVERRIDES = {\n    \"s.dependency 'React'\": \"s.dependency 'React-Core'\",\n    's.dependency \"React\"': 's.dependency \"React-Core\"'\n};\n\nconst _injectPod = (podName, pluginPlat, plugin, key) => {\n    let pluginInject = '';\n    const isNpm = plugin['no-npm'] !== true;\n    if (isNpm) {\n        const podPath = doResolvePath(pluginPlat.path ?? key);\n        pluginInject += `  pod '${podName}', :path => '${podPath}'\\n`;\n        const podspecPath = `${podPath}/${podName}.podspec`;\n        // Xcode 12 Migration\n        overrideFileContents(podspecPath, REACT_CORE_OVERRIDES);\n    } else if (pluginPlat.git) {\n        const commit = pluginPlat.commit\n            ? `, :commit => '${pluginPlat.commit}'`\n            : '';\n        pluginInject += `  pod '${podName}', :git => '${\n            pluginPlat.git\n        }'${commit}\\n`;\n    } else if (pluginPlat.version) {\n        pluginInject += `  pod '${podName}', '${pluginPlat.version}'\\n`;\n    } else {\n        pluginInject += `  pod '${podName}'\\n`;\n    }\n\n    return pluginInject;\n};\n"],"file":"podfileParser.js"}