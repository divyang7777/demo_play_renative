{"version":3,"sources":["../../src/sdk-xcode/plistParser.js"],"names":["parseExportOptionsPlist","c","platform","Promise","resolve","tId","appFolder","exportOptions","id","pluginConfigiOS","objToPlist","provisioningProfiles","expProvProfile","paths","appConfig","config","bPath","injects","pattern","override","path","join","parseEntitlementsPlist","appFolderName","entitlementsPath","pluginsEntitlementsObj","rnv","dir","saveObjToPlistSync","parseInfoPlist","plat","buildConfig","platforms","orientationSupport","urlScheme","plistPath","plistObj","CFBundleDisplayName","CFBundleShortVersionString","CFBundleVersion","embeddedFonts","length","UIAppFonts","includedPermissions","permissions","platPrem","pc","Object","keys","forEach","v","key","desc","phone","UISupportedInterfaceOrientations","tab","CFBundleURLTypes","push","CFBundleTypeRole","CFBundleURLName","CFBundleURLSchemes","plist","plugin","pluginPlat","plistPlug","PLIST_START","PLIST_END","obj","output","_parseObject","level","space","i","filePath"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport {\n    isObject,\n    isArray,\n    isBool,\n    isString\n} from '../core/systemManager/objectUtils';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    getAppVersionCode,\n    getConfigProp,\n    getBuildFilePath,\n    getFlavouredProp,\n    addSystemInjects\n} from '../core/common';\nimport { logTask, logError, logWarning } from '../core/systemManager/logger';\nimport { parsePlugins } from '../core/pluginManager';\nimport { getAppFolderName } from './index';\nimport { readObjectSync, mergeObjects, writeCleanFile, fsWriteFileSync } from '../core/systemManager/fileutils';\n\nexport const parseExportOptionsPlist = (c, platform) => new Promise((resolve) => {\n    // EXPORT OPTIONS\n    const tId = getConfigProp(c, platform, 'teamID');\n    const appFolder = getAppFolder(c);\n    const exportOptions = getConfigProp(c, platform, 'exportOptions') || {};\n    const id = getConfigProp(c, platform, 'id');\n\n    c.pluginConfigiOS.exportOptions = objToPlist(exportOptions);\n\n    if (exportOptions.provisioningProfiles) {\n        const expProvProfile = exportOptions.provisioningProfiles[id];\n        if (!expProvProfile) {\n            logError(\n                `Your exportOptions.provisionProfiles object in ${c.paths.appConfig.config} does not include id ${id}!`\n            );\n        }\n    }\n\n    const bPath = getBuildFilePath(c, platform, 'exportOptions.plist');\n\n    const injects = [\n        { pattern: '{{TEAM_ID}}', override: tId },\n        {\n            pattern: '{{PLUGIN_EXPORT_OPTIONS}}',\n            override: c.pluginConfigiOS.exportOptions\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(bPath, path.join(appFolder, 'exportOptions.plist'), injects, null, c);\n    resolve();\n});\n\nexport const parseEntitlementsPlist = (c, platform) => new Promise((resolve) => {\n    logTask('parseEntitlementsPlist');\n\n    const appFolder = getAppFolder(c);\n    const appFolderName = getAppFolderName(c, platform);\n    const entitlementsPath = path.join(\n        appFolder,\n        `${appFolderName}/${appFolderName}.entitlements`\n    );\n        // PLUGIN ENTITLEMENTS\n    let pluginsEntitlementsObj = getConfigProp(c, platform, 'entitlements');\n    if (!pluginsEntitlementsObj) {\n        pluginsEntitlementsObj = readObjectSync(\n            path.join(\n                c.paths.rnv.dir,\n                'src/sdk-xcode/supportFiles/entitlements.json'\n            )\n        );\n    }\n\n    saveObjToPlistSync(c, entitlementsPath, pluginsEntitlementsObj);\n    resolve();\n});\n\nexport const parseInfoPlist = (c, platform) => new Promise((resolve) => {\n    logTask('parseInfoPlist');\n\n    const appFolder = getAppFolder(c);\n    const appFolderName = getAppFolderName(c, platform);\n    const plat = c.buildConfig.platforms[platform];\n    const { orientationSupport, urlScheme } = plat;\n    const plistPath = path.join(appFolder, `${appFolderName}/Info.plist`);\n\n    // PLIST\n    let plistObj = readObjectSync(\n        path.join(\n            c.paths.rnv.dir,\n            `src/sdk-xcode/supportFiles/info.plist.${platform}.json`\n        )\n    );\n    plistObj.CFBundleDisplayName = getAppTitle(c, platform);\n    plistObj.CFBundleShortVersionString = getAppVersion(c, platform);\n    plistObj.CFBundleVersion = getAppVersionCode(c, platform);\n    // FONTS\n    if (c.pluginConfigiOS.embeddedFonts.length) {\n        plistObj.UIAppFonts = c.pluginConfigiOS.embeddedFonts;\n    }\n    // PERMISSIONS\n    const includedPermissions = getConfigProp(c, platform, 'includedPermissions')\n            || getConfigProp(c, platform, 'permissions');\n    if (includedPermissions && c.buildConfig.permissions) {\n        const platPrem = c.buildConfig.permissions[platform] ? platform : 'ios';\n        const pc = c.buildConfig.permissions[platPrem];\n        if (includedPermissions.length && includedPermissions[0] === '*') {\n            Object.keys(pc).forEach((v) => {\n                const key = pc[v].key || v;\n                plistObj[key] = pc[v].desc;\n            });\n        } else {\n            includedPermissions.forEach((v) => {\n                if (pc[v]) {\n                    const key = pc[v].key || v;\n                    plistObj[key] = pc[v].desc;\n                }\n            });\n        }\n    }\n    // ORIENATATIONS\n    if (orientationSupport) {\n        if (orientationSupport.phone) {\n            plistObj.UISupportedInterfaceOrientations = orientationSupport.phone;\n        } else {\n            plistObj.UISupportedInterfaceOrientations = [\n                'UIInterfaceOrientationPortrait'\n            ];\n        }\n        if (orientationSupport.tab) {\n            plistObj['UISupportedInterfaceOrientations~ipad'] = orientationSupport.tab;\n        } else {\n            plistObj['UISupportedInterfaceOrientations~ipad'] = [\n                'UIInterfaceOrientationPortrait'\n            ];\n        }\n    }\n    // URL_SCHEMES (LEGACY)\n    if (urlScheme) {\n        logWarning(\n            'urlScheme is DEPRECATED. use \"plist:{ CFBundleURLTypes: []}\" object instead'\n        );\n        plistObj.CFBundleURLTypes.push({\n            CFBundleTypeRole: 'Editor',\n            CFBundleURLName: urlScheme,\n            CFBundleURLSchemes: [urlScheme]\n        });\n    }\n\n    // PLIST\n    const plist = getConfigProp(c, platform, 'plist');\n    if (plist) {\n        plistObj = mergeObjects(c, plistObj, plist, true, true);\n    }\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat) => {\n        const plistPlug = getFlavouredProp(c, pluginPlat, 'plist');\n        if (plistPlug) {\n            plistObj = mergeObjects(c, plistObj, plistPlug, true, false);\n        }\n    });\n    saveObjToPlistSync(c, plistPath, plistObj);\n    resolve();\n});\n\nconst PLIST_START = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\\n`;\n\nconst PLIST_END = '</plist>\\n';\n\nconst objToPlist = (obj) => {\n    let output = PLIST_START;\n    output += _parseObject(obj, 0);\n    output += PLIST_END;\n    return output;\n};\n\nconst _parseObject = (obj, level) => {\n    let output = '';\n    let space = '';\n    for (let i = 0; i < level; i++) {\n        space += '  ';\n    }\n    if (isArray(obj)) {\n        output += `${space}<array>\\n`;\n        obj.forEach((v) => {\n            output += _parseObject(v, level + 1);\n        });\n        output += `${space}</array>\\n`;\n    } else if (isBool(obj)) {\n        output += `${space}<${obj} />\\n`;\n    } else if (isObject(obj)) {\n        output += `${space}<dict>\\n`;\n        Object.keys(obj).forEach((key) => {\n            output += `  ${space}<key>${key}</key>\\n`;\n            output += _parseObject(obj[key], level + 1);\n        });\n        output += `${space}</dict>\\n`;\n    } else if (isString(obj)) {\n        output += `${space}<string>${obj}</string>\\n`;\n    }\n\n    return output;\n};\n\nconst saveObjToPlistSync = (c, filePath, obj) => {\n    // fsWriteFileSync(filePath, objToPlist(sanitizeDynamicProps(obj, c.buildConfig?._refs)));\n    fsWriteFileSync(filePath, objToPlist(obj));\n};\n\nexport { objToPlist, saveObjToPlistSync };\n"],"file":"plistParser.js"}