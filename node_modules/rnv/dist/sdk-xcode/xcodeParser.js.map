{"version":3,"sources":["../../src/sdk-xcode/xcodeParser.js"],"names":["parseXcodeProject","c","platform","runtime","xcodeProj","provisioningStyle","deploymentTarget","provisionProfileSpecifier","codeSignIdentity","systemCapabilities","runScheme","teamID","id","appId","result","eligable","forEach","v","bundleId","Entitlements","eligibleProfile","type","name","message","warningMessage","autoFix","Name","files","appConfig","config","platforms","buildSchemes","program","scheme","paths","w","_parseXcodeProject","Promise","resolve","xcode","require","appFolder","appFolderName","projectPath","path","join","project","parse","updateBuildProperty","addTargetAttribute","addBuildProperty","IOS","TVOS","sysCapObj","Object","keys","sk","val","enabled","xcodeprojObj1","sourceFiles","filePath","addSourceFile","red","plugin","pluginPlat","xcodeprojObj","resourceFiles","addResourceFile","headerFiles","addHeaderFile","buildPhases","addBuildPhase","shellPath","shellScript","inputPaths","frameworks","k","fPath","opts","startsWith","replace","customFramework","embed","link","addFramework","buildSettings","addToBuildSettings","pluginConfigiOS","embeddedFontSources","variantGroup","writeSync"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport {\n    getAppFolder,\n    getAppId,\n    getConfigProp,\n    getFlavouredProp\n} from '../core/common';\nimport { fsExistsSync, writeFileSync, fsWriteFileSync } from '../core/systemManager/fileutils';\nimport { doResolve } from '../core/resolve';\nimport { chalk, logTask, logWarning } from '../core/systemManager/logger';\nimport { inquirerPrompt } from '../cli/prompt';\nimport { IOS, TVOS } from '../core/constants';\nimport { parsePlugins } from '../core/pluginManager';\nimport { getAppFolderName } from './index';\nimport { parseProvisioningProfiles } from './provisionParser';\n\n\nexport const parseXcodeProject = async (c) => {\n    logTask('parseXcodeProject');\n    const { platform } = c;\n    // PROJECT\n    c.runtime.xcodeProj = {};\n    c.runtime.xcodeProj.provisioningStyle = getConfigProp(\n        c,\n        platform,\n        'provisioningStyle',\n        'Automatic'\n    );\n    c.runtime.xcodeProj.deploymentTarget = getConfigProp(\n        c,\n        platform,\n        'deploymentTarget',\n        '10.0'\n    );\n    c.runtime.xcodeProj.provisionProfileSpecifier = getConfigProp(\n        c,\n        platform,\n        'provisionProfileSpecifier'\n    );\n    c.runtime.xcodeProj.codeSignIdentity = getConfigProp(\n        c,\n        platform,\n        'codeSignIdentity',\n        'iPhone Developer'\n    );\n    c.runtime.xcodeProj.systemCapabilities = getConfigProp(\n        c,\n        platform,\n        'systemCapabilities'\n    );\n    c.runtime.xcodeProj.runScheme = getConfigProp(c, platform, 'runScheme');\n    c.runtime.xcodeProj.teamID = getConfigProp(c, platform, 'teamID');\n    c.runtime.xcodeProj.id = getConfigProp(c, platform, 'id');\n    c.runtime.xcodeProj.appId = getAppId(c, platform);\n\n    if (\n        c.runtime.xcodeProj.provisioningStyle !== 'Automatic'\n        && !c.runtime.xcodeProj.provisionProfileSpecifier\n    ) {\n        const result = await parseProvisioningProfiles(c);\n\n        let eligibleProfile;\n\n        if (result?.eligable) {\n            result.eligable.forEach((v) => {\n                const bundleId = v.Entitlements['application-identifier'];\n\n                if (\n                    bundleId\n                  === `${c.runtime.xcodeProj.teamID}.${c.runtime.xcodeProj.id}`\n                ) {\n                    eligibleProfile = v;\n                }\n            });\n        }\n\n\n        if (eligibleProfile) {\n            const { autoFix } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'autoFix',\n                message: `Found following eligible provisioning profile on your system: ${eligibleProfile.Entitlements['application-identifier']}. Do you want ReNative to fix your app confing?`,\n                warningMessage:\n                    'No provisionProfileSpecifier configured in appConfig despite setting provisioningStyle to manual'\n            });\n            if (autoFix) {\n                c.runtime.xcodeProj.provisionProfileSpecifier = eligibleProfile.Name;\n                c.files.appConfig.config.platforms[platform].buildSchemes[\n                    c.program.scheme\n                ].provisionProfileSpecifier = eligibleProfile.Name;\n                writeFileSync(\n                    c.paths.appConfig.config,\n                    c.files.appConfig.config\n                );\n            }\n        } else {\n            const w = 'Your build config has provisioningStyle set to manual but no provisionProfileSpecifier configured in appConfig and no available provisioning profiles availiable for';\n            logWarning(\n                `${w} ${c.runtime.xcodeProj.id}`\n            );\n        }\n    }\n\n    await _parseXcodeProject(c, platform);\n};\n\nconst _parseXcodeProject = (c, platform) => new Promise((resolve) => {\n    logTask('_parseXcodeProject');\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const xcode = require(doResolve('xcode'));\n    // const xcode = require(`${c.paths.project.nodeModulesDir}/xcode`);\n    const appFolder = getAppFolder(c);\n    const appFolderName = getAppFolderName(c, platform);\n    const projectPath = path.join(\n        appFolder,\n        `${appFolderName}.xcodeproj/project.pbxproj`\n    );\n    const xcodeProj = xcode.project(projectPath);\n    xcodeProj.parse(() => {\n        const {\n            provisioningStyle,\n            deploymentTarget,\n            provisionProfileSpecifier,\n            codeSignIdentity,\n            systemCapabilities,\n            teamID,\n            appId\n        } = c.runtime.xcodeProj;\n\n        if (c.runtime.xcodeProj.teamID) {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', teamID);\n        } else {\n            xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM', '\"\"');\n        }\n\n        xcodeProj.addTargetAttribute(\n            'ProvisioningStyle',\n            provisioningStyle\n        );\n        xcodeProj.addBuildProperty('CODE_SIGN_STYLE', provisioningStyle);\n        xcodeProj.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', appId);\n\n        if (platform === IOS) {\n            xcodeProj.updateBuildProperty(\n                'IPHONEOS_DEPLOYMENT_TARGET',\n                deploymentTarget\n            );\n        } else if (platform === TVOS) {\n            xcodeProj.updateBuildProperty(\n                'TVOS_DEPLOYMENT_TARGET',\n                deploymentTarget\n            );\n        }\n\n        if (provisionProfileSpecifier) {\n            xcodeProj.updateBuildProperty(\n                'PROVISIONING_PROFILE_SPECIFIER',\n                `\"${provisionProfileSpecifier}\"`\n            );\n        }\n\n        xcodeProj.updateBuildProperty(\n            'CODE_SIGN_IDENTITY',\n            `\"${codeSignIdentity}\"`\n        );\n        xcodeProj.updateBuildProperty(\n            '\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"',\n            `\"${codeSignIdentity}\"`\n        );\n\n        // if (codeSignIdentity) {\n        //     const bc = xcodeProj.pbxXCBuildConfigurationSection();\n        //     const cs1 = 'CODE_SIGN_IDENTITY';\n        //     const cs2 = '\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"';\n        //     for (const configName in bc) {\n        //         const config = bc[configName];\n        //         if ((runScheme && config.name === runScheme) || (!runScheme)) {\n        //             if (config.buildSettings?.[cs1]) config.buildSettings[cs1] = `\"${codeSignIdentity}\"`;\n        //             if (config.buildSettings?.[cs2]) config.buildSettings[cs2] = `\"${codeSignIdentity}\"`;\n        //         }\n        //     }\n        // }\n\n        if (systemCapabilities) {\n            const sysCapObj = {};\n            Object.keys(systemCapabilities).forEach((sk) => {\n                const val = systemCapabilities[sk];\n                sysCapObj[sk] = { enabled: val === true ? 1 : 0 };\n            });\n            // const var1 = xcodeProj.getFirstProject().firstProject.attributes.TargetAttributes['200132EF1F6BF9CF00450340'];\n            xcodeProj.addTargetAttribute('SystemCapabilities', sysCapObj);\n        }\n\n        const xcodeprojObj1 = getConfigProp(\n            c,\n            c.platform,\n            'xcodeproj'\n        );\n\n        if (xcodeprojObj1?.sourceFiles) {\n            xcodeprojObj1.sourceFiles.forEach((v) => {\n                const filePath = path.join(appFolder, v);\n                if (fsExistsSync(filePath)) {\n                    xcodeProj.addSourceFile(\n                        filePath,\n                        null,\n                        '200132F21F6BF9CF00450340'\n                    );\n                } else {\n                    logWarning(`You are trying to inject native file which does not exists: ${\n                        chalk().red(filePath)\n                    }. Skipping.`);\n                }\n            });\n        }\n\n        // PLUGINS\n        parsePlugins(c, platform, (plugin, pluginPlat) => {\n            const xcodeprojObj = getFlavouredProp(\n                c,\n                pluginPlat,\n                'xcodeproj'\n            );\n            if (xcodeprojObj) {\n                if (xcodeprojObj.resourceFiles) {\n                    xcodeprojObj.resourceFiles.forEach((v) => {\n                        xcodeProj.addResourceFile(path.join(appFolder, v));\n                    });\n                }\n                if (xcodeprojObj.sourceFiles) {\n                    xcodeprojObj.sourceFiles.forEach((v) => {\n                        // const group = xcodeProj.hash.project.objects.PBXGroup['200132F21F6BF9CF00450340'];\n                        xcodeProj.addSourceFile(\n                            v,\n                            null,\n                            '200132F21F6BF9CF00450340'\n                        );\n                    });\n                }\n                if (xcodeprojObj.headerFiles) {\n                    xcodeprojObj.headerFiles.forEach((v) => {\n                        xcodeProj.addHeaderFile(\n                            v,\n                            null,\n                            '200132F21F6BF9CF00450340'\n                        );\n                    });\n                }\n                if (xcodeprojObj.buildPhases) {\n                    xcodeprojObj.buildPhases.forEach((v) => {\n                        xcodeProj.addBuildPhase(\n                            [],\n                            'PBXShellScriptBuildPhase',\n                            'ShellScript',\n                            null,\n                            {\n                                shellPath: v.shellPath || '/bin/sh',\n                                shellScript: v.shellScript,\n                                inputPaths: v.inputPaths || [\n                                    '\"$(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)\"'\n                                ]\n                            }\n                        );\n                    });\n                }\n                if (xcodeprojObj.frameworks) {\n                    Object.keys(xcodeprojObj.frameworks).forEach((k) => {\n                        let fPath;\n                        let opts;\n                        if (k.startsWith('./')) {\n                            fPath = path.join(\n                                appFolder,\n                                k.replace('./', '')\n                            );\n                            opts = {\n                                customFramework: true,\n                                embed: true,\n                                link: true\n                            };\n                        } else {\n                            fPath = path.join(\n                                'System/Library/Frameworks',\n                                k\n                            );\n                            opts = {\n                                embed: true\n                            };\n                        }\n                        xcodeProj.addFramework(fPath, opts);\n                    });\n                }\n                if (xcodeprojObj.buildSettings) {\n                    Object.keys(xcodeprojObj.buildSettings).forEach((k) => {\n                        xcodeProj.addToBuildSettings(\n                            k,\n                            xcodeprojObj.buildSettings[k]\n                        );\n                    });\n                }\n            }\n        });\n\n        // FONTS\n        // Cocoapods take care of this\n        c.pluginConfigiOS.embeddedFontSources.forEach((v) => {\n            xcodeProj.addResourceFile(v, { variantGroup: false });\n        });\n\n        fsWriteFileSync(projectPath, xcodeProj.writeSync());\n        resolve();\n    });\n});\n"],"file":"xcodeParser.js"}