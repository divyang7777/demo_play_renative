{"version":3,"sources":["../../src/sdk-xcode/swiftParser.js"],"names":["parseAppDelegate","c","platform","appFolder","appFolderName","isBundled","ip","Promise","resolve","newPort","runtime","port","appDelegate","entryFile","forceBundle","bundle","plugin","pluginPlat","key","injectPluginSwiftSync","package","clr","rgbDecimal","pluginBgColor","methods","application","didFinishLaunchingWithOptions","isRequired","func","begin","render","v","end","applicationDidBecomeActive","open","continue","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","constructMethod","lines","method","output","length","forEach","Object","keys","key2","f","pluginConfigiOS","pluginAppDelegateMethods","appDelegateMethods","injects","pattern","override","pluginAppDelegateImports","path","join","appDelegateImports","Array","appDelegateImport","indexOf","delKey","plugArr","red","plugVal","includes","push"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n    getEntryFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getGetJsBundleFile,\n    sanitizeColor,\n    getFlavouredProp,\n    addSystemInjects\n} from '../core/common';\nimport { chalk, logTask, logDebug, logWarning } from '../core/systemManager/logger';\nimport { parsePlugins } from '../core/pluginManager';\nimport { writeCleanFile } from '../core/systemManager/fileutils';\n\nexport const parseAppDelegate = (\n    c,\n    platform,\n    appFolder,\n    appFolderName,\n    isBundled = false,\n    ip = 'localhost',\n) => new Promise((resolve) => {\n    const newPort = c.runtime?.port;\n    logTask('parseAppDelegateSync', `ip:${ip} port:${newPort}`);\n    const appDelegate = 'AppDelegate.swift';\n\n    const entryFile = getEntryFile(c, platform);\n\n    const forceBundle = getGetJsBundleFile(c, platform);\n    let bundle;\n    if (forceBundle) {\n        bundle = forceBundle;\n    } else if (isBundled) {\n        bundle = `RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"${\n            entryFile\n        }\", fallbackResource: nil)`;\n    } else {\n        bundle = `URL(string: \"http://${ip}:${newPort}/${entryFile}.bundle?platform=ios\")`;\n    }\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginSwiftSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    // BG COLOR\n    // let pluginBgColor = 'vc.view.backgroundColor = UIColor.white';\n    // const UI_COLORS = ['black', 'blue', 'brown', 'clear', 'cyan', 'darkGray', 'gray', 'green', 'lightGray', 'magneta', 'orange', 'purple', 'red', 'white', 'yellow'];\n    // if (backgroundColor) {\n    //     if (UI_COLORS.includes(backgroundColor)) {\n    //         pluginBgColor = `vc.view.backgroundColor = UIColor.${backgroundColor}`;\n    //     } else {\n    //         logWarning(`Your choosen color in renative.json for platform ${chalk().white(platform)} is not supported by UIColor. use one of the predefined ones: ${chalk().white(UI_COLORS.join(','))}`);\n    //     }\n    // }\n\n    const clr = sanitizeColor(getConfigProp(c, platform, 'backgroundColor'), 'backgroundColor')\n        .rgbDecimal;\n    const pluginBgColor = `vc.view.backgroundColor = UIColor(red: ${\n        clr[0]\n    }, green: ${clr[1]}, blue: ${clr[2]}, alpha: ${clr[3]})`;\n    const methods = {\n        application: {\n            didFinishLaunchingWithOptions: {\n                isRequired: true,\n                func:\n                        'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {',\n                begin: `\n        self.window = UIWindow(frame: UIScreen.main.bounds)\n        let vc = UIViewController()\n        let v = RCTRootView(\n            bundleURL: bundleUrl!,\n            moduleName: moduleName,\n            initialProperties: nil,\n            launchOptions: launchOptions)\n        vc.view = v\n        ${pluginBgColor}\n        v.frame = vc.view.bounds\n        self.window?.rootViewController = vc\n        self.window?.makeKeyAndVisible()\n        UNUserNotificationCenter.current().delegate = self\n                `,\n                render: v => `${v}`,\n                end: 'return true'\n            },\n            applicationDidBecomeActive: {\n                func:\n                        'func applicationDidBecomeActive(_ application: UIApplication) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            open: {\n                func:\n                        'func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {',\n                begin: 'var handled = false',\n                render: v => `if(!handled) { handled = ${v} }`,\n                end: 'return handled'\n            },\n            continue: {\n                func:\n                        'func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -> Void) -> Bool {',\n                begin: null,\n                render: v => `return ${v}`,\n                end: null\n            },\n            supportedInterfaceOrientationsFor: {\n                func:\n                        'func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {',\n                begin: null,\n                render: v => `return ${v}`,\n                end: null\n            },\n            didReceiveRemoteNotification: {\n                func:\n                        'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didFailToRegisterForRemoteNotificationsWithError: {\n                func:\n                        'func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didReceive: {\n                func:\n                        'func application(_ application: UIApplication, didReceive notification: UILocalNotification) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didRegister: {\n                func:\n                        'func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didRegisterForRemoteNotificationsWithDeviceToken: {\n                func:\n                        'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        },\n        userNotificationCenter: {\n            willPresent: {\n                func:\n                        'func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        }\n    };\n\n    const constructMethod = (lines, method) => {\n        let output = '';\n        if (lines.length || method.isRequired) {\n            output += `\\n${method.func}\\n`;\n            if (method.begin) output += `   ${method.begin}\\n`;\n            lines.forEach((v) => {\n                output += `    ${method.render(v)}\\n`;\n            });\n            if (method.end) output += `   ${method.end}\\n`;\n            output += '}\\n';\n        }\n        return output;\n    };\n    Object.keys(methods).forEach((key) => {\n        const method = methods[key];\n        Object.keys(method).forEach((key2) => {\n            const f = method[key2];\n            c.pluginConfigiOS.pluginAppDelegateMethods += constructMethod(\n                c.pluginConfigiOS.appDelegateMethods[key][key2],\n                f\n            );\n        });\n    });\n\n    const injects = [\n        { pattern: '{{BUNDLE}}', override: bundle },\n        { pattern: '{{ENTRY_FILE}}', override: entryFile },\n        { pattern: '{{IP}}', override: ip },\n        { pattern: '{{PORT}}', override: newPort },\n        { pattern: '{{BACKGROUND_COLOR}}', override: pluginBgColor },\n        {\n            pattern: '{{APPDELEGATE_IMPORTS}}',\n            override: c.pluginConfigiOS.pluginAppDelegateImports\n        },\n        {\n            pattern: '{{APPDELEGATE_METHODS}}',\n            override: c.pluginConfigiOS.pluginAppDelegateMethods\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        path.join(\n            getAppTemplateFolder(c, platform),\n            appFolderName,\n            appDelegate\n        ),\n        path.join(appFolder, appFolderName, appDelegate),\n        injects, null, c\n    );\n    resolve();\n});\n\nexport const injectPluginSwiftSync = (c, plugin, key) => {\n    logDebug(`injectPluginSwiftSync:${c.platform}:${key}`);\n    const appDelegateImports = getFlavouredProp(\n        c,\n        plugin,\n        'appDelegateImports'\n    );\n    if (appDelegateImports instanceof Array) {\n        appDelegateImports.forEach((appDelegateImport) => {\n            // Avoid duplicate imports\n            logDebug('appDelegateImports add');\n            if (\n                c.pluginConfigiOS.pluginAppDelegateImports.indexOf(\n                    appDelegateImport\n                ) === -1\n            ) {\n                logDebug('appDelegateImports add ok');\n                c.pluginConfigiOS.pluginAppDelegateImports += `import ${appDelegateImport}\\n`;\n            }\n        });\n    }\n    // if (plugin.appDelegateMethods instanceof Array) {\n    //     c.pluginConfigiOS.pluginAppDelegateMethods += `${plugin.appDelegateMethods.join('\\n    ')}`;\n    // }\n\n    const appDelegateMethods = getFlavouredProp(\n        c,\n        plugin,\n        'appDelegateMethods'\n    );\n    if (appDelegateMethods) {\n        Object.keys(appDelegateMethods).forEach((delKey) => {\n            Object.keys(appDelegateMethods[delKey]).forEach((key2) => {\n                const plugArr = c.pluginConfigiOS.appDelegateMethods[delKey][key2];\n                if (!plugArr) {\n                    logWarning(`appDelegateMethods.${delKey}.${chalk().red(key2)} not supported. SKIPPING.`);\n                } else {\n                    const plugVal = appDelegateMethods[delKey][key2];\n                    if (plugVal) {\n                        plugVal.forEach((v) => {\n                            if (!plugArr.includes(v)) {\n                                plugArr.push(v);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n    }\n};\n"],"file":"swiftParser.js"}