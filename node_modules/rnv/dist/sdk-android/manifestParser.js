var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.injectPluginManifestSync=exports.parseAndroidManifestSync=void 0;var _path=_interopRequireDefault(require("path"));
var _common=require("../core/common");








var _logger=require("../core/systemManager/logger");
var _fileutils=require("../core/systemManager/fileutils");
var _pluginManager=require("../core/pluginManager");

var PROHIBITED_DUPLICATE_TAGS=['intent-filter'];
var SYSTEM_TAGS=['tag','children'];

var _findChildNode=function _findChildNode(tag,name,node){
if(!node){
(0,_logger.logWarning)('_findChildNode: Node is undefined');
return;
}
if(!name&&!PROHIBITED_DUPLICATE_TAGS.includes(tag))return null;
for(var i=0;i<node.children.length;i++){
var ch=node.children[i];
if(ch.tag===tag){
if(
ch['android:name']===name||
PROHIBITED_DUPLICATE_TAGS.includes(tag))
{return ch;}
}
}
return null;
};

var _convertToXML=function _convertToXML(manifestObj){return _parseNode(manifestObj,0);};

var _parseNode=function _parseNode(n,level){
var output='';
var space='';
for(var i=0;i<level;i++){
space+='    ';
}

var nodeKeysCount=0;
Object.keys(n).forEach(function(v){
if(!SYSTEM_TAGS.includes(v))nodeKeysCount++;
});
var isSingleLine=nodeKeysCount<2;

if(!n.tag){
(0,_logger.logWarning)('Each node must have tag key!');
return;
}

if(n){
var endLine=isSingleLine?' ':'\n';
output+=space+"<"+n.tag+endLine;
Object.keys(n).forEach(function(k){
if(!SYSTEM_TAGS.includes(k)){
output+=""+(isSingleLine?'':space+"  ")+k+"=\""+
n[k]+"\""+
endLine;
}
});
}else{
output+=space+"<"+n.tag;
}
if(n.children&&n.children.length){
if(isSingleLine){
output+='>\n';
}else{
output+=space+">\n";
}

var nextLevel=level+1;
n.children.forEach(function(v){
output+=_parseNode(v,nextLevel);
});
output+=space+"</"+n.tag+">\n";
}else{
output+=(isSingleLine?'':space)+"/>\n";
}
return output;
};

var _mergeNodeParameters=function _mergeNodeParameters(node,nodeParamsExt){
if(!nodeParamsExt){
(0,_logger.logWarning)('_mergeNodeParameters: nodeParamsExt value is null');
return;
}
if(!node){
(0,_logger.logWarning)('_mergeNodeParameters: node value is null');
return;
}

Object.keys(nodeParamsExt).forEach(function(k){
if(!SYSTEM_TAGS.includes(k))node[k]=nodeParamsExt[k];
});
};

var _mergeNodeChildren=function _mergeNodeChildren(node){var nodeChildrenExt=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];

if(!node){
(0,_logger.logWarning)('_mergeNodeChildren: Node is undefined');
return;
}
if(!node.children)node.children=[];
nodeChildrenExt.forEach(function(v){
var nameExt=v['android:name'];
if(v.tag){
var childNode=_findChildNode(v.tag,nameExt,node);
if(childNode){
(0,_logger.logDebug)("_mergeNodeChildren: FOUND EXISTING NODE TO MERGE "+
nameExt+" "+v.tag);

_mergeNodeParameters(childNode,v);
_mergeNodeChildren(childNode,v.children);
}else{
(0,_logger.logDebug)("_mergeNodeChildren: NO android:name found. adding to children "+
nameExt+" "+v.tag);

node.children.push(v);
}
}
});
};

var _mergeFeatures=function _mergeFeatures(c,baseManifestFile,configKey,value){
var features=(0,_common.getConfigProp)(c,c.platform,configKey);

if(features){
var featuresObj=[];
features.forEach(function(key){
featuresObj.push({
tag:'uses-feature',
'android:name':key,
'android:required':value});

});
_mergeNodeChildren(baseManifestFile,featuresObj);
}
};

var parseAndroidManifestSync=function parseAndroidManifestSync(c){
(0,_logger.logTask)('parseAndroidManifestSync');var
platform=c.platform;

try{var _c$buildConfig;
var baseManifestFilePath=_path.default.join(
c.paths.rnv.dir,"src/sdk-android/supportFiles/AndroidManifest_"+
platform+".json");

var baseManifestFile=(0,_fileutils.readObjectSync)(baseManifestFilePath);
baseManifestFile.package=(0,_common.getAppId)(c,platform);

var objArr=(0,_common.getConfigPropArray)(c,c.platform,'AndroidManifest');


objArr.forEach(function(manifestObj){
_mergeNodeParameters(baseManifestFile,manifestObj);
if(manifestObj.children){
_mergeNodeChildren(baseManifestFile,manifestObj.children);
}
});


(0,_pluginManager.parsePlugins)(c,platform,function(plugin,pluginPlat){
var androidManifestPlugin=(0,_common.getFlavouredProp)(
c,
pluginPlat,
'AndroidManifest');

if(androidManifestPlugin){
_mergeNodeChildren(baseManifestFile,androidManifestPlugin.children);
if(androidManifestPlugin.children){
_mergeNodeChildren(baseManifestFile,androidManifestPlugin.children);
}
}
});


var configPermissions=(_c$buildConfig=c.buildConfig)==null?void 0:_c$buildConfig.permissions;

var includedPermissions=(0,_common.getConfigProp)(c,platform,'includedPermissions')||
(0,_common.getConfigProp)(c,platform,'permissions');
var excludedPermissions=(0,_common.getConfigProp)(
c,
platform,
'excludedPermissions');

if(includedPermissions&&configPermissions){
var platPerm=configPermissions[platform]?platform:'android';
var pc=configPermissions[platPerm];
if(includedPermissions[0]==='*'){
Object.keys(pc).forEach(function(k){
if(
!(
excludedPermissions&&
excludedPermissions.includes(k)))

{
var key=pc[k].key||k;
baseManifestFile.children.push({
tag:'uses-permission',
'android:name':key});

}
});
}else{
includedPermissions.forEach(function(v){
if(pc[v]){
var key=pc[v].key||v;
baseManifestFile.children.push({
tag:'uses-permission',
'android:name':key});

}
});
}
}


_mergeFeatures(c,baseManifestFile,'includedFeatures',true);
_mergeFeatures(c,baseManifestFile,'excludedFeatures',false);


var manifestXml=_convertToXML(baseManifestFile);

var manifestFile='app/src/main/AndroidManifest.xml';

var injects=[
{pattern:'{{PLUGIN_MANIFEST_FILE}}',override:manifestXml}];


(0,_common.addSystemInjects)(c,injects);

var appFolder=(0,_common.getAppFolder)(c);

(0,_fileutils.writeCleanFile)(
(0,_common.getBuildFilePath)(c,platform,manifestFile),
_path.default.join(appFolder,manifestFile),
injects,null,c);


return;
}catch(e){
(0,_logger.logError)(e);
}
};exports.parseAndroidManifestSync=parseAndroidManifestSync;

var injectPluginManifestSync=function injectPluginManifestSync(){










};exports.injectPluginManifestSync=injectPluginManifestSync;
//# sourceMappingURL=manifestParser.js.map