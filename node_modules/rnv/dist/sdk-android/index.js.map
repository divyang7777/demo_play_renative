{"version":3,"sources":["../../src/sdk-android/index.js"],"names":["_getEntryOutputName","c","entryFile","buildConfig","platforms","platform","outputFile","ANDROID_WEAR","packageAndroid","bundleAssets","appFolder","reactNative","isSystemWin","path","normalize","process","cwd","env","Promise","reject","runAndroid","defaultTarget","target","program","outputAab","_runGradleApp","net","isIP","device","undefined","devicesAndEmulators","activeDevices","filter","d","isActive","inactiveDevices","askWhereToRun","length","devicesString","choices","inquirer","prompt","name","type","message","response","chosenEmulator","devices","dev","find","foundDevice","udid","includes","dv","_checkSigningCerts","signingConfig","isRelease","privateConfig","files","workspace","appConfig","configPrivate","command","white","paths","confirm","confirmCopy","confirmNewKeystore","platCandidates","ANDROID_TV","ANDROID","forEach","v","platCandidate","resultCopy","dir","result","storeFile","storePassword","keyAlias","keyPassword","keystorePath","keytoolCmd","shell","stdio","silent","configureProject","bundleId","outputFolder","arch","stacktrace","info","cd","aabPath","join","apkPath","CLI_ANDROID_ADB","Error","buildAndroid","cyan","toLowerCase","configureAndroidProperties","runtime","platformBuildsProjectPath","addNDK","sdks","ANDROID_NDK","ndkString","sdkDir","ANDROID_SDK","replace","configureGradleProject","gradlew","pluginConfigAndroid","pluginIncludes","pluginPaths","pluginImports","pluginPackages","pluginActivityImports","pluginActivityMethods","pluginApplicationImports","pluginApplicationMethods","pluginApplicationCreateMethods","pluginApplicationDebugServer","applyPlugin","defaultConfig","pluginActivityCreateMethods","pluginActivityResultMethods","pluginSplashActivityImports","manifestApplication","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","buildGradleBuildScriptDexOptions","appBuildGradleSigningConfigs","appBuildGradleImplementations","resourceStrings","appBuildGradleAfterEvaluate","plugin","pluginPlat","key","package","substring","font","split","includedFonts","common","fontSource","fontFolder","fontDest","runAndroidLog","child","execa","cli","stdout","on","data","toString","red","yellow","then","res","catch","err"],"mappings":"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","sourcesContent":["import path from 'path';\nimport net from 'net';\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\nimport execa from 'execa';\nimport {\n    fsExistsSync,\n    copyFileSync,\n    mkdirSync,\n    getRealPath,\n    updateObjectSync,\n    fsWriteFileSync,\n    fsChmodSync\n} from '../core/systemManager/fileutils';\nimport { executeAsync, execCLI } from '../core/systemManager/exec';\nimport {\n    getAppFolder,\n    getConfigProp,\n    getAppId\n} from '../core/common';\nimport { isPlatformActive, createPlatformBuild } from '../core/platformManager';\nimport { generateEnvVars } from '../core/engineManager';\nimport { isSystemWin } from '../core/utils';\nimport { inquirerPrompt } from '../cli/prompt';\nimport {\n    chalk,\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo,\n    logSuccess,\n    logRaw\n} from '../core/systemManager/logger';\n\nimport {\n    copyAssetsFolder,\n    copyBuildsFolder,\n    parseFonts\n} from '../core/projectManager/projectParser';\nimport {\n    ANDROID_WEAR,\n    ANDROID,\n    ANDROID_TV,\n    CLI_ANDROID_ADB\n} from '../core/constants';\nimport { parsePlugins } from '../core/pluginManager';\nimport {\n    parseAndroidManifestSync,\n    injectPluginManifestSync\n} from './manifestParser';\nimport {\n    parseMainActivitySync,\n    parseSplashActivitySync,\n    parseMainApplicationSync,\n    injectPluginKotlinSync\n} from './kotlinParser';\nimport {\n    parseAppBuildGradleSync,\n    parseBuildGradleSync,\n    parseSettingsGradleSync,\n    parseGradlePropertiesSync,\n    injectPluginGradleSync\n} from './gradleParser';\nimport {\n    parseValuesStringsSync,\n    injectPluginXmlValuesSync,\n    parseValuesColorsSync\n} from './xmlValuesParser';\nimport {\n    resetAdb,\n    getAndroidTargets,\n    composeDevicesString,\n    launchAndroidSimulator,\n    checkForActiveEmulator,\n    askForNewEmulator,\n    connectToWifiDevice\n} from './deviceManager';\n\nconst _getEntryOutputName = (c) => {\n    // CRAPPY BUT Android Wear does not support webview required for connecting to packager. this is hack to prevent RN connectiing to running bundler\n    const { entryFile } = c.buildConfig.platforms[c.platform];\n    // TODO Android PROD Crashes if not using this hardcoded one\n    let outputFile;\n    if (c.platform === ANDROID_WEAR) {\n        outputFile = entryFile;\n    } else {\n        outputFile = 'index.android';\n    }\n    return outputFile;\n};\n\nexport const packageAndroid = async (c) => {\n    logTask('packageAndroid');\n    const { platform } = c;\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets', false) === true;\n\n    if (!bundleAssets && platform !== ANDROID_WEAR) {\n        return true;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    const appFolder = getAppFolder(c);\n    let reactNative = 'react-native';\n\n    if (isSystemWin) {\n        reactNative = path.normalize(\n            `${process.cwd()}/node_modules/.bin/react-native.cmd`\n        );\n    }\n\n    logInfo('ANDROID PACKAGE STARTING...');\n\n    try {\n        await executeAsync(c, `${reactNative} bundle --platform android --dev false --assets-dest ${\n            appFolder\n        }/app/src/main/res --entry-file ${\n        c.buildConfig.platforms[c.platform]?.entryFile\n        }.js --bundle-output ${appFolder}/app/src/main/assets/${\n            outputFile\n        }.bundle --config=metro.config.js`, { env: { ...generateEnvVars(c) } });\n\n        logInfo('ANDROID PACKAGE FINISHED');\n        return true;\n    } catch (e) {\n        logInfo('ANDROID PACKAGE FAILED');\n        return Promise.reject(e);\n    }\n};\n\nexport const runAndroid = async (c, defaultTarget) => {\n    const { target } = c.program;\n    const { platform } = c;\n    logTask('runAndroid', `target:${target} default:${defaultTarget}`);\n\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    // shortcircuit devices logic since aabs can't be installed on a device\n    if (outputAab) return _runGradleApp(c, platform, {});\n\n    await resetAdb(c);\n\n    if (target && net.isIP(target)) {\n        await connectToWifiDevice(c, target);\n    }\n\n    let devicesAndEmulators;\n    try {\n        devicesAndEmulators = await getAndroidTargets(\n            c,\n            false,\n            false,\n            c.program.device !== undefined\n        );\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    const activeDevices = devicesAndEmulators.filter(d => d.isActive);\n    const inactiveDevices = devicesAndEmulators.filter(d => !d.isActive);\n\n    const askWhereToRun = async () => {\n        if (activeDevices.length === 0 && inactiveDevices.length > 0) {\n            // No device active, but there are emulators created\n            const devicesString = composeDevicesString(inactiveDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenEmulator',\n                    type: 'list',\n                    message: 'What emulator would you like to start?',\n                    choices\n                }\n            ]);\n            if (response.chosenEmulator) {\n                await launchAndroidSimulator(c, response.chosenEmulator, true);\n                const devices = await checkForActiveEmulator(c);\n                await _runGradleApp(c, platform, devices);\n            }\n        } else if (activeDevices.length > 1) {\n            const devicesString = composeDevicesString(activeDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenEmulator',\n                    type: 'list',\n                    message: 'Where would you like to run your app?',\n                    choices\n                }\n            ]);\n            if (response.chosenEmulator) {\n                const dev = activeDevices.find(\n                    d => d.name === response.chosenEmulator\n                );\n                await _runGradleApp(c, platform, dev);\n            }\n        } else {\n            await askForNewEmulator(c, platform);\n            const devices = await checkForActiveEmulator(c);\n            await _runGradleApp(c, platform, devices);\n        }\n    };\n\n    if (target) {\n        // a target is provided\n        logDebug('Target provided', target);\n        const foundDevice = devicesAndEmulators.find(\n            d => d.udid.includes(target) || d.name.includes(target)\n        );\n        if (foundDevice) {\n            if (foundDevice.isActive) {\n                await _runGradleApp(c, platform, foundDevice);\n            } else {\n                await launchAndroidSimulator(c, foundDevice, true);\n                const device = await checkForActiveEmulator(c);\n                await _runGradleApp(c, platform, device);\n            }\n        } else {\n            await askWhereToRun();\n        }\n    } else if (activeDevices.length === 1) {\n        // Only one that is active, running on that one\n        const dv = activeDevices[0];\n        logInfo(`Found device ${dv.name}:${dv.udid}!`);\n        await _runGradleApp(c, platform, dv);\n    } else if (defaultTarget) {\n        // neither a target nor an active device is found, revert to default target if available\n        logDebug('Default target used', defaultTarget);\n        const foundDevice = devicesAndEmulators.find(\n            d => d.udid.includes(defaultTarget) || d.name.includes(defaultTarget)\n        );\n        if (!foundDevice) {\n            logDebug('Target not provided, asking where to run');\n            await askWhereToRun();\n        } else {\n            await launchAndroidSimulator(c, foundDevice, true);\n            const device = await checkForActiveEmulator(c);\n            await _runGradleApp(c, platform, device);\n        }\n    } else {\n        // we don't know what to do, ask the user\n        logDebug('Target not provided, asking where to run');\n        await askWhereToRun();\n    }\n};\n\nconst _checkSigningCerts = async (c) => {\n    logTask('_checkSigningCerts');\n    const signingConfig = getConfigProp(\n        c,\n        c.platform,\n        'signingConfig',\n        'Debug'\n    );\n    const isRelease = signingConfig === 'Release';\n    const privateConfig = c.files.workspace.appConfig.configPrivate?.[c.platform];\n\n    if (isRelease && !privateConfig) {\n        logWarning(\n            `You're attempting to ${\n                c.command\n            } app in release mode but you have't configured your ${chalk().white(\n                c.paths.workspace.appConfig.configPrivate\n            )} for ${chalk().white(c.platform)} platform yet.`\n        );\n\n        const { confirm } = await inquirer.prompt({\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Do you want to configure it now?'\n        });\n\n        if (confirm) {\n            let confirmCopy = false;\n            let platCandidate;\n            const { confirmNewKeystore } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'confirmNewKeystore',\n                message: 'Do you want to generate new keystore as well?'\n            });\n\n            if (c.files.workspace.appConfig.configPrivate) {\n                const platCandidates = [ANDROID_WEAR, ANDROID_TV, ANDROID];\n\n                platCandidates.forEach((v) => {\n                    if (c.files.workspace.appConfig.configPrivate[v]) {\n                        platCandidate = v;\n                    }\n                });\n                if (platCandidate) {\n                    const resultCopy = await inquirerPrompt({\n                        type: 'confirm',\n                        name: 'confirmCopy',\n                        message: `Found existing keystore configuration for ${platCandidate}. do you want to reuse it?`\n                    });\n                    confirmCopy = resultCopy?.confirmCopy;\n                }\n            }\n\n            if (confirmCopy) {\n                c.files.workspace.appConfig\n                    .configPrivate[c.platform] = c.files.workspace\n                        .appConfig.configPrivate[platCandidate];\n            } else {\n                let storeFile;\n\n                if (!confirmNewKeystore) {\n                    const result = await inquirerPrompt({\n                        type: 'input',\n                        name: 'storeFile',\n                        message: `Paste asolute or relative path to ${chalk().white(\n                            c.paths.workspace.appConfig.dir\n                        )} of your existing ${chalk().white(\n                            'release.keystore'\n                        )} file`\n                    });\n                    storeFile = result?.storeFile;\n                }\n\n                const {\n                    storePassword,\n                    keyAlias,\n                    keyPassword\n                } = await inquirer.prompt([\n                    {\n                        type: 'password',\n                        name: 'storePassword',\n                        message: 'storePassword'\n                    },\n                    {\n                        type: 'input',\n                        name: 'keyAlias',\n                        message: 'keyAlias'\n                    },\n                    {\n                        type: 'password',\n                        name: 'keyPassword',\n                        message: 'keyPassword'\n                    }\n                ]);\n\n                if (confirmNewKeystore) {\n                    const keystorePath = `${c.paths.workspace.appConfig.dir}/release.keystore`;\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    const keytoolCmd = `keytool -genkey -v -keystore ${\n                        keystorePath\n                    } -alias ${keyAlias} -keypass ${keyPassword} -storepass ${\n                        storePassword\n                    } -keyalg RSA -keysize 2048 -validity 10000`;\n                    await executeAsync(c, keytoolCmd, {\n                        env: process.env,\n                        shell: true,\n                        stdio: 'inherit',\n                        silent: true\n                    });\n                    storeFile = './release.keystore';\n                }\n\n                if (c.paths.workspace.appConfig.dir) {\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    c.files.workspace.appConfig.configPrivate = {};\n                    c.files.workspace.appConfig.configPrivate[c.platform] = {\n                        storeFile,\n                        storePassword,\n                        keyAlias,\n                        keyPassword\n                    };\n                }\n            }\n\n            updateObjectSync(\n                c.paths.workspace.appConfig.configPrivate,\n                c.files.workspace.appConfig.configPrivate\n            );\n            logSuccess(\n                `Successfully updated private config file at ${chalk().white(\n                    c.paths.workspace.appConfig.dir\n                )}.`\n            );\n            await configureProject(c);\n        } else {\n            return Promise.reject(\"You selected no. Can't proceed\");\n        }\n    }\n};\n\nconst _runGradleApp = async (c, platform, device) => {\n    logTask('_runGradleApp');\n\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n    const appFolder = getAppFolder(c);\n    const bundleId = getAppId(c, platform);\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    const outputFolder = signingConfig === 'Debug' ? 'debug' : 'release';\n    const { arch, name } = device;\n    const stacktrace = c.program.info ? ' --debug' : '';\n\n    shell.cd(`${appFolder}`);\n\n    await _checkSigningCerts(c);\n    await executeAsync(\n        c,\n        `${isSystemWin ? 'gradlew.bat' : './gradlew'} ${\n            outputAab ? 'bundle' : 'assemble'\n        }${signingConfig}${stacktrace} -x bundleReleaseJsAndAssets`,\n        // { interactive: true }\n    );\n    if (outputAab) {\n        const aabPath = path.join(\n            appFolder,\n            `app/build/outputs/bundle/${outputFolder}/app.aab`\n        );\n        logInfo(`App built. Path ${aabPath}`);\n        return true;\n    }\n    let apkPath = path.join(\n        appFolder,\n        `app/build/outputs/apk/${outputFolder}/app-${outputFolder}.apk`\n    );\n    if (!fsExistsSync(apkPath)) {\n        apkPath = path.join(\n            appFolder,\n            `app/build/outputs/apk/${outputFolder}/app-${outputFolder}-unsigned.apk`\n        );\n    }\n    if (!fsExistsSync(apkPath)) {\n        apkPath = path.join(\n            appFolder,\n            `app/build/outputs/apk/${outputFolder}/app-${arch}-${outputFolder}.apk`\n        );\n    }\n    logInfo(`Installing ${apkPath} on ${name}`);\n    try {\n        await execCLI(\n            c,\n            CLI_ANDROID_ADB,\n            `-s ${device.udid} install -r -d -f ${apkPath}`\n        );\n    } catch (e) {\n        if (\n            e?.includes('INSTALL_FAILED')\n            || e?.message?.includes('INSTALL_FAILED')\n        ) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message:\n                    \"It seems you already have the app installed but RNV can't update it. Uninstall that one and try again?\"\n            });\n\n            if (!confirm) throw new Error('User canceled');\n            await execCLI(\n                c,\n                CLI_ANDROID_ADB,\n                `-s ${device.udid} uninstall ${bundleId}`\n            );\n            await execCLI(\n                c,\n                CLI_ANDROID_ADB,\n                `-s ${device.udid} install -r -d -f ${apkPath}`\n            );\n        } else {\n            throw new Error(e);\n        }\n    }\n\n    if (!outputAab) {\n        await execCLI(\n            c,\n            CLI_ANDROID_ADB,\n            `-s ${device.udid} shell am start -n ${bundleId}/.MainActivity`\n        );\n    }\n};\n\nexport const buildAndroid = async (c) => {\n    logTask('buildAndroid');\n    const { platform } = c;\n\n    const appFolder = getAppFolder(c);\n    const signingConfig = getConfigProp(\n        c,\n        platform,\n        'signingConfig',\n        'Debug'\n    );\n\n    shell.cd(`${appFolder}`);\n\n    await _checkSigningCerts(c);\n    await executeAsync(c, `${isSystemWin ? 'gradlew.bat' : './gradlew'} assemble${signingConfig} -x bundleReleaseJsAndAssets`);\n\n    logSuccess(\n        `Your APK is located in ${chalk().cyan(\n            path.join(\n                appFolder,\n                `app/build/outputs/apk/${signingConfig.toLowerCase()}`\n            )\n        )} .`\n    );\n    return true;\n};\n\nexport const configureAndroidProperties = async (c) => {\n    logTask('configureAndroidProperties');\n\n    const appFolder = getAppFolder(c);\n\n    c.runtime.platformBuildsProjectPath = appFolder;\n\n\n    const addNDK = c.buildConfig?.sdks?.ANDROID_NDK\n            && !c.buildConfig.sdks.ANDROID_NDK.includes('<USER>');\n    const ndkString = `ndk.dir=${getRealPath(\n        c,\n        c.buildConfig?.sdks?.ANDROID_NDK\n    )}`;\n    let sdkDir = getRealPath(c, c.buildConfig?.sdks?.ANDROID_SDK);\n\n    if (isSystemWin) {\n        sdkDir = sdkDir.replace(/\\\\/g, '/');\n    }\n\n    fsWriteFileSync(\n        path.join(appFolder, 'local.properties'),\n        `#Generated by ReNative (https://renative.org)\n${addNDK ? ndkString : ''}\nsdk.dir=${sdkDir}`\n    );\n\n    return true;\n};\n\nexport const configureGradleProject = async (c) => {\n    const { platform } = c;\n    logTask('configureGradleProject');\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureAndroidProperties(c);\n    await configureProject(c);\n    await copyBuildsFolder(c, platform);\n    return true;\n};\n\nexport const configureProject = async (c) => {\n    logTask('configureProject');\n    const { platform } = c;\n\n    const appFolder = getAppFolder(c);\n\n    const gradlew = path.join(appFolder, 'gradlew');\n\n    if (!fsExistsSync(gradlew)) {\n        logWarning(\n            `Your ${chalk().white(\n                platform\n            )} platformBuild is misconfigured!. let's repair it.`\n        );\n        await createPlatformBuild(c, platform);\n        await configureGradleProject(c, platform);\n\n        return true;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    mkdirSync(path.join(appFolder, 'app/src/main/assets'));\n    fsWriteFileSync(\n        path.join(appFolder, `app/src/main/assets/${outputFile}.bundle`),\n        '{}'\n    );\n    fsChmodSync(gradlew, '755');\n\n    // INJECTORS\n    c.pluginConfigAndroid = {\n        pluginIncludes: \"include ':app'\",\n        pluginPaths: '',\n        pluginImports: '',\n        pluginPackages: 'MainReactPackage(),\\n',\n        pluginActivityImports: '',\n        pluginActivityMethods: '',\n        pluginApplicationImports: '',\n        pluginApplicationMethods: '',\n        pluginApplicationCreateMethods: '',\n        pluginApplicationDebugServer: '',\n        applyPlugin: '',\n        defaultConfig: '',\n        pluginActivityCreateMethods: '',\n        pluginActivityResultMethods: '',\n        pluginSplashActivityImports: '',\n        manifestApplication: '',\n        buildGradleAllProjectsRepositories: '',\n        buildGradleBuildScriptRepositories: '',\n        buildGradleBuildScriptDependencies: '',\n        buildGradleBuildScriptDexOptions: '',\n        appBuildGradleSigningConfigs: '',\n        appBuildGradleImplementations: '',\n        resourceStrings: [],\n        appBuildGradleAfterEvaluate: ''\n    };\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginGradleSync(c, pluginPlat, key, pluginPlat.package, plugin);\n        injectPluginKotlinSync(c, pluginPlat, key, pluginPlat.package, plugin);\n        injectPluginManifestSync(c, pluginPlat, key, pluginPlat.package, plugin);\n        injectPluginXmlValuesSync(c, pluginPlat, key, pluginPlat.package, plugin);\n    });\n\n    c.pluginConfigAndroid.pluginPackages = c.pluginConfigAndroid.pluginPackages.substring(\n        0,\n        c.pluginConfigAndroid.pluginPackages.length - 2\n    );\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts) {\n                if (\n                    includedFonts.includes('*')\n                        || includedFonts.includes(key)\n                ) {\n                    if (font) {\n                        const fontSource = path.join(dir, font);\n                        if (fsExistsSync(fontSource)) {\n                            const fontFolder = path.join(\n                                appFolder,\n                                'app/src/main/assets/fonts'\n                            );\n                            mkdirSync(fontFolder);\n                            const fontDest = path.join(fontFolder, font);\n                            copyFileSync(fontSource, fontDest);\n                        } else {\n                            logWarning(\n                                `Font ${chalk().white(\n                                    fontSource\n                                )} doesn't exist! Skipping.`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    parseSettingsGradleSync(c);\n    parseAppBuildGradleSync(c);\n    parseBuildGradleSync(c);\n    parseMainActivitySync(c);\n    parseMainApplicationSync(c);\n    parseSplashActivitySync(c);\n    parseValuesStringsSync(c);\n    parseValuesColorsSync(c);\n    parseAndroidManifestSync(c);\n    parseGradlePropertiesSync(c);\n\n    return true;\n};\n\n// Resolve or reject will not be called so this will keep running\nexport const runAndroidLog = async (c) => {\n    logTask('runAndroidLog');\n    const filter = c.program.filter || '';\n    const child = execa.command(`${c.cli[CLI_ANDROID_ADB]} logcat`);\n    // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString().split('\\n');\n        d.forEach((v) => {\n            if (v.includes(' E ') && v.includes(filter)) {\n                logRaw(chalk().red(v));\n            } else if (v.includes(' W ') && v.includes(filter)) {\n                logRaw(chalk().yellow(v));\n            } else if (v.includes(filter)) {\n                logRaw(v);\n            }\n        });\n    });\n    return child\n        .then(res => res.stdout)\n        .catch(err => Promise.reject(`Error: ${err}`));\n};\n"],"file":"index.js"}