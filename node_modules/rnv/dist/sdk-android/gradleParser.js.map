{"version":3,"sources":["../../src/sdk-android/gradleParser.js"],"names":["parseBuildGradleSync","c","appFolder","platform","dexOptions","pluginConfigAndroid","buildGradleBuildScriptDexOptions","injects","pattern","override","compileSdkVersion","supportLibVersion","buildToolsVersion","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","forceForwardPaths","path","join","parseAppBuildGradleSync","minSdkVersion","targetSdkVersion","debugSigning","appBuildGradleSigningConfigs","localProperties","files","workspace","appConfig","configPrivate","keystorePath","storeFile","keystorePathFull","startsWith","paths","dir","genPropsPath","keyAlias","storePassword","keyPassword","white","pluginConfig","buildConfig","debugBuildTypes","platforms","gradle","buildTypes","debug","releaseBuildTypes","release","versionCodeOffset","isMultiApk","multiAPKs","splits","packagingOptions","compileOptions","enableAndroidX","appBuildGradleImplementations","enableHermes","applyPlugin","appBuildGradleAfterEvaluate","defaultConfig","parseSettingsGradleSync","pluginIncludes","pluginPaths","parseGradlePropertiesSync","pluginGradleProperties","gradleProps","Object","keys","forEach","key","gradleProperties","injectPluginGradleSync","plugin","pkg","pluginRoot","keyFixed","replace","pathFixed","skipPathResolutions","pathAbsolute","projectName","skipLinking","skipImplementation","implementation","implementations","v","appBuildGradle","apply","afterEvaluate","_fixAndroidLegacy","buildGradle","BuildGradle","allProjRepos","allprojects","repositories","k","buildscriptRepos","buildscript","buildscriptDeps","dependencies","buildscriptDexOptions","modulePath","project"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppVersionCode,\n    getAppId,\n    getBuildFilePath,\n    getConfigProp,\n    addSystemInjects\n} from '../core/common';\nimport { fsExistsSync, writeCleanFile, fsWriteFileSync } from '../core/systemManager/fileutils';\nimport { doResolve, doResolvePath } from '../core/resolve';\nimport { chalk, logTask, logWarning, logDebug } from '../core/systemManager/logger';\n\n\nexport const parseBuildGradleSync = (c) => {\n    const appFolder = getAppFolder(c);\n    const { platform } = c;\n\n    let dexOptions = '';\n\n    if (c.pluginConfigAndroid.buildGradleBuildScriptDexOptions) {\n        dexOptions = `dexOptions() {\n            ${c.pluginConfigAndroid.buildGradleBuildScriptDexOptions}\n        }`;\n    }\n    const injects = [\n        {\n            pattern: '{{COMPILE_SDK_VERSION}}',\n            override: c.pluginConfigAndroid.compileSdkVersion\n        },\n        {\n            pattern: '{{SUPPORT_LIB_VERSION}}',\n            override: c.pluginConfigAndroid.supportLibVersion\n        },\n        {\n            pattern: '{{BUILD_TOOLS_VERSION}}',\n            override: c.pluginConfigAndroid.buildToolsVersion\n        },\n        {\n            pattern: '{{PLUGIN_INJECT_ALLPROJECTS_REPOSITORIES}}',\n            override:\n                c.pluginConfigAndroid.buildGradleAllProjectsRepositories\n        },\n        {\n            pattern: '{{PLUGIN_INJECT_BUILDSCRIPT_REPOSITORIES}}',\n            override:\n                c.pluginConfigAndroid.buildGradleBuildScriptRepositories\n        },\n        {\n            pattern: '{{PLUGIN_INJECT_BUILDSCRIPT_DEPENDENCIES}}',\n            override:\n                c.pluginConfigAndroid.buildGradleBuildScriptDependencies\n        },\n        { pattern: '{{PLUGIN_INJECT_DEXOPTIONS}}', override: dexOptions },\n        {\n            pattern: '{{PATH_JSC_ANDROID}}',\n            override: doResolve('jsc-android', true, { forceForwardPaths: true })\n        },\n        {\n            pattern: '{{PATH_REACT_NATIVE}}',\n            override: doResolve('react-native', true, { forceForwardPaths: true })\n        },\n    ];\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, 'build.gradle'),\n        path.join(appFolder, 'build.gradle'),\n        injects, null, c\n    );\n};\n\n/* eslint-disable max-len */\nexport const parseAppBuildGradleSync = (c) => {\n    logTask('parseAppBuildGradleSync');\n    const appFolder = getAppFolder(c);\n    const { platform } = c;\n\n    // ANDROID PROPS\n    c.pluginConfigAndroid.minSdkVersion = getConfigProp(\n        c,\n        platform,\n        'minSdkVersion',\n        21\n    );\n    c.pluginConfigAndroid.targetSdkVersion = getConfigProp(\n        c,\n        platform,\n        'targetSdkVersion',\n        28\n    );\n    c.pluginConfigAndroid.compileSdkVersion = getConfigProp(\n        c,\n        platform,\n        'compileSdkVersion',\n        28\n    );\n    c.pluginConfigAndroid.supportLibVersion = getConfigProp(\n        c,\n        platform,\n        'supportLibVersion',\n        '28.0.0'\n    );\n    c.pluginConfigAndroid.buildToolsVersion = getConfigProp(\n        c,\n        platform,\n        'buildToolsVersion',\n        '28.0.0'\n    );\n\n    // SIGNING CONFIGS\n    const debugSigning = `\n    debug {\n        storeFile file('debug.keystore')\n        storePassword \"android\"\n        keyAlias \"androiddebugkey\"\n        keyPassword \"android\"\n    }`;\n\n    c.pluginConfigAndroid.appBuildGradleSigningConfigs = `${debugSigning}\n    release`;\n    c.pluginConfigAndroid.localProperties = '';\n    // c.files.workspace.appConfig.configPrivate = _getPrivateConfig(c, platform);\n\n    if (\n        c.files.workspace.appConfig.configPrivate\n        && c.files.workspace.appConfig.configPrivate[platform]\n    ) {\n        const keystorePath = c.files.workspace.appConfig.configPrivate[platform].storeFile;\n        let keystorePathFull;\n        if (keystorePath) {\n            if (keystorePath.startsWith('./')) {\n                keystorePathFull = path.join(\n                    c.paths.workspace.appConfig.dir,\n                    keystorePath\n                );\n            } else {\n                keystorePathFull = keystorePath;\n            }\n        }\n\n        if (fsExistsSync(keystorePathFull)) {\n            const genPropsPath = path.join(appFolder, 'keystore.properties');\n            fsWriteFileSync(\n                genPropsPath,\n                `# auto generated by ReNative\nstoreFile=${keystorePathFull}\nkeyAlias=${c.files.workspace.appConfig.configPrivate[platform].keyAlias}\nstorePassword=${c.files.workspace.appConfig.configPrivate[platform].storePassword}\nkeyPassword=${c.files.workspace.appConfig.configPrivate[platform].keyPassword}`\n            );\n\n            c.pluginConfigAndroid.appBuildGradleSigningConfigs = `${debugSigning}\n            release {\n                storeFile file(keystoreProps['storeFile'])\n                storePassword keystoreProps['storePassword']\n                keyAlias keystoreProps['keyAlias']\n                keyPassword keystoreProps['keyPassword']\n            }`;\n\n            c.pluginConfigAndroid.localProperties = `\n          def keystorePropsFile = rootProject.file(\"keystore.properties\")\n          def keystoreProps = new Properties()\n          keystoreProps.load(new FileInputStream(keystorePropsFile))`;\n        } else {\n            logWarning(\n                `Your ${chalk().white(\n                    keystorePathFull\n                )} does not exist. You won't be able to make production releases without it!`\n            );\n        }\n    }\n\n    // BUILD_TYPES\n    const pluginConfig = c.buildConfig ?? {};\n    const debugBuildTypes = pluginConfig?.platforms[platform]?.gradle?.buildTypes?.debug ?? [];\n    const releaseBuildTypes = pluginConfig?.platforms[platform]?.gradle?.buildTypes?.release ?? [];\n    c.pluginConfigAndroid.buildTypes = `\n    debug {\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        ${debugBuildTypes.join('\\n        ')}\n    }\n    release {\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        signingConfig signingConfigs.release\n        ${releaseBuildTypes.join('\\n        ')}\n    }`;\n\n    // MULTI APK\n    const versionCodeOffset = getConfigProp(\n        c,\n        platform,\n        'versionCodeOffset',\n        0\n    );\n    const isMultiApk = getConfigProp(c, platform, 'multipleAPKs', false) === true;\n    c.pluginConfigAndroid.multiAPKs = '';\n    if (isMultiApk) {\n        c.pluginConfigAndroid.multiAPKs = `\n      ext.abiCodes = [\"armeabi-v7a\": 1, \"x86\": 2, \"arm64-v8a\": 3, \"x86_64\": 4]\n      import com.android.build.OutputFile\n\n      android.applicationVariants.all { variant ->\n        variant.outputs.each { output ->\n          def bavc = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))\n          if (bavc != null) {\n            output.versionCodeOverride = Integer.parseInt(Integer.toString(variant.versionCode) + Integer.toString(bavc)) + ${\n    versionCodeOffset\n}\n          }\n        }\n      }`;\n    }\n\n    // SPLITS\n    c.pluginConfigAndroid.splits = '';\n    if (isMultiApk) {\n        c.pluginConfigAndroid.splits = `\n    splits {\n      abi {\n          reset()\n          enable true\n          include \"armeabi-v7a\", \"x86\", \"arm64-v8a\", \"x86_64\"\n          universalApk false\n      }\n    }\n`;\n    }\n\n    // PACKAGING OPTIONS\n    c.pluginConfigAndroid.packagingOptions = `\n    exclude 'META-INF/DEPENDENCIES.txt'\n    exclude 'META-INF/DEPENDENCIES'\n    exclude 'META-INF/dependencies.txt'\n    exclude 'META-INF/LICENSE.txt'\n    exclude 'META-INF/LICENSE'\n    exclude 'META-INF/license.txt'\n    exclude 'META-INF/LGPL2.1'\n    exclude 'META-INF/NOTICE.txt'\n    exclude 'META-INF/NOTICE'\n    exclude 'META-INF/notice.txt'\n    pickFirst 'lib/armeabi-v7a/libc++_shared.so'\n    pickFirst 'lib/x86_64/libc++_shared.so'\n    pickFirst 'lib/x86/libc++_shared.so'\n    pickFirst 'lib/arm64-v8a/libc++_shared.so'\n    pickFirst 'lib/arm64-v8a/libjsc.so'\n    pickFirst 'lib/x86_64/libjsc.so'`;\n\n    // COMPILE OPTIONS\n    c.pluginConfigAndroid.compileOptions = `\n    sourceCompatibility 1.8\n    targetCompatibility 1.8`;\n\n    // TODO This is temporary ANDROIDX support. whole gradle parser will be refactored in the near future\n    let enableAndroidX = getConfigProp(\n        c,\n        platform,\n        'enableAndroidX',\n        'androidx.appcompat:appcompat:1.1.0'\n    );\n    if (enableAndroidX === true) {\n        enableAndroidX = 'androidx.appcompat:appcompat:1.1.0';\n    }\n\n    if (enableAndroidX !== false) {\n        c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation \"${enableAndroidX}\"\\n`;\n    } else {\n        c.pluginConfigAndroid.appBuildGradleImplementations\n            += \"    implementation 'com.android.support:appcompat-v7:27.0.2'\\n\";\n    }\n\n    c.pluginConfigAndroid.appBuildGradleImplementations\n        += '    implementation \"androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02\"\\n';\n    // ENABLE HERMES\n    const enableHermes = getConfigProp(c, platform, 'enableHermes', false);\n\n    if (enableHermes) {\n        c.pluginConfigAndroid.appBuildGradleImplementations += `    debugImplementation files(\"${doResolve(\n            'hermes-engine', true, { forceForwardPaths: true }\n        )}/android/hermes-debug.aar\")\\n`;\n        c.pluginConfigAndroid.appBuildGradleImplementations += `    releaseImplementation files(\"${doResolve(\n            'hermes-engine', true, { forceForwardPaths: true }\n        )}/android/hermes-release.aar\")\\n`;\n    } else {\n        c.pluginConfigAndroid.appBuildGradleImplementations\n            += \"    implementation 'org.webkit:android-jsc:+'\\n\";\n    }\n    c.pluginConfigAndroid.enableHermes = `    enableHermes: ${enableHermes},`;\n\n    const injects = [\n        {\n            pattern: '{{PLUGIN_APPLY}}',\n            override: c.pluginConfigAndroid.applyPlugin\n        },\n        { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform) },\n        {\n            pattern: '{{VERSION_CODE}}',\n            override: getAppVersionCode(c, platform)\n        },\n        {\n            pattern: '{{VERSION_NAME}}',\n            override: getAppVersion(c, platform)\n        },\n        {\n            pattern: '{{PLUGIN_IMPLEMENTATIONS}}',\n            override: c.pluginConfigAndroid.appBuildGradleImplementations\n        },\n        {\n            pattern: '{{PLUGIN_AFTER_EVALUATE}}',\n            override: c.pluginConfigAndroid.appBuildGradleAfterEvaluate\n        },\n        {\n            pattern: '{{PLUGIN_SIGNING_CONFIGS}}',\n            override: c.pluginConfigAndroid.appBuildGradleSigningConfigs\n        },\n        {\n            pattern: '{{PLUGIN_SPLITS}}',\n            override: c.pluginConfigAndroid.splits\n        },\n        {\n            pattern: '{{PLUGIN_ANDROID_DEFAULT_CONFIG}}',\n            override: c.pluginConfigAndroid.defaultConfig\n        },\n        {\n            pattern: '{{PLUGIN_PACKAGING_OPTIONS}}',\n            override: c.pluginConfigAndroid.packagingOptions\n        },\n        {\n            pattern: '{{PLUGIN_BUILD_TYPES}}',\n            override: c.pluginConfigAndroid.buildTypes\n        },\n        {\n            pattern: '{{PLUGIN_MULTI_APKS}}',\n            override: c.pluginConfigAndroid.multiAPKs\n        },\n        {\n            pattern: '{{MIN_SDK_VERSION}}',\n            override: c.pluginConfigAndroid.minSdkVersion\n        },\n        {\n            pattern: '{{TARGET_SDK_VERSION}}',\n            override: c.pluginConfigAndroid.targetSdkVersion\n        },\n        {\n            pattern: '{{COMPILE_SDK_VERSION}}',\n            override: c.pluginConfigAndroid.compileSdkVersion\n        },\n        {\n            pattern: '{{PLUGIN_COMPILE_OPTIONS}}',\n            override: c.pluginConfigAndroid.compileOptions\n        },\n        {\n            pattern: '{{PLUGIN_LOCAL_PROPERTIES}}',\n            override: c.pluginConfigAndroid.localProperties\n        },\n        {\n            pattern: '{{PLUGIN_ENABLE_HERMES}}',\n            override: c.pluginConfigAndroid.enableHermes\n        },\n        {\n            pattern: '{{PATH_JSC_ANDROID}}',\n            override: doResolve('jsc-android', true, { forceForwardPaths: true })\n        },\n        {\n            pattern: '{{PATH_REACT_NATIVE}}',\n            override: doResolve('react-native', true, { forceForwardPaths: true })\n        },\n        {\n            pattern: '{{PATH_HERMES_ENGINE}}',\n            override: doResolve('hermes-engine', true, { forceForwardPaths: true })\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, 'app/build.gradle'),\n        path.join(appFolder, 'app/build.gradle'),\n        injects, null, c\n    );\n};\n\nexport const parseSettingsGradleSync = (c) => {\n    const appFolder = getAppFolder(c);\n    const { platform } = c;\n    const injects = [\n        {\n            pattern: '{{PLUGIN_INCLUDES}}',\n            override: c.pluginConfigAndroid.pluginIncludes\n        },\n        {\n            pattern: '{{PLUGIN_PATHS}}',\n            override: c.pluginConfigAndroid.pluginPaths\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, 'settings.gradle'),\n        path.join(appFolder, 'settings.gradle'),\n        injects, null, c\n    );\n};\n\nexport const parseGradlePropertiesSync = (c) => {\n    const appFolder = getAppFolder(c);\n    const { platform } = c;\n    // GRADLE.PROPERTIES\n    let pluginGradleProperties = '';\n    const pluginConfigAndroid = c.buildConfig?.platforms?.[platform] || {};\n\n    const gradleProps = pluginConfigAndroid['gradle.properties'];\n\n    if (gradleProps) {\n        const enableAndroidX = getConfigProp(\n            c,\n            platform,\n            'enableAndroidX',\n            true\n        );\n        if (enableAndroidX === true) {\n            gradleProps['android.useAndroidX'] = true;\n            gradleProps['android.enableJetifier'] = true;\n        }\n\n        Object.keys(gradleProps).forEach((key) => {\n            pluginGradleProperties += `${key}=${gradleProps[key]}\\n`;\n        });\n    }\n\n    const gradleProperties = 'gradle.properties';\n\n\n    const injects = [\n        {\n            pattern: '{{PLUGIN_GRADLE_PROPERTIES}}',\n            override: pluginGradleProperties\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, gradleProperties),\n        path.join(appFolder, gradleProperties),\n        injects, null, c\n    );\n};\n\nexport const injectPluginGradleSync = (c, plugin, key, pkg, pluginRoot) => {\n    // const keyFixed = key.replace(/\\//g, '-').replace(/@/g, '');\n    // const packagePath = plugin.path ?? `${key}/android`;\n    // let pathAbsolute;\n    // try {\n    //     pathAbsolute = plugin.path\n    //         ? doResolvePath(packagePath, true, { keepSuffix: true })\n    //         : doResolvePath(packagePath, true, { keepSuffix: true });\n    // } catch (err) {\n    //     logWarning(\n    //         `GradleParser: plugin ${packagePath} not resolvable and has been skipped`\n    //     );\n    //     return;\n    // }\n    // const modulePath = `../../${pathFixed}`;\n\n    // let packageParams = '';\n    // if (plugin.packageParams) {\n    //     packageParams = plugin.packageParams.join(',');\n    // }\n    const keyFixed = key.replace(/\\//g, '-').replace(/@/g, '');\n    const pathFixed = plugin.path ? `${plugin.path}` : `${key}/android`;\n    const skipPathResolutions = pluginRoot['no-npm'];\n    let pathAbsolute;\n\n    if (!skipPathResolutions) {\n        pathAbsolute = doResolvePath(pathFixed, true, { forceForwardPaths: true });\n    }\n\n    // APP/BUILD.GRADLE\n    if (plugin.projectName) {\n        if (!plugin.skipLinking && !skipPathResolutions) {\n            c.pluginConfigAndroid.pluginIncludes += `, ':${plugin.projectName}'`;\n            // }').projectDir = new File(rootProject.projectDir, '${modulePath}')\\n`;\n            c.pluginConfigAndroid.pluginPaths += `project(':${\n                plugin.projectName\n            }').projectDir = new File('${pathAbsolute}')\\n`;\n        }\n        if (!plugin.skipImplementation) {\n            if (plugin.implementation) {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `${plugin.implementation}\\n`;\n            } else {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation project(':${\n                    plugin.projectName\n                }')\\n`;\n            }\n        }\n    } else {\n        if (!plugin.skipLinking && !skipPathResolutions) {\n            c.pluginConfigAndroid.pluginIncludes += `, ':${keyFixed}'`;\n            c.pluginConfigAndroid.pluginPaths += `project(':${keyFixed}').projectDir = new File('${pathAbsolute}')\\n`;\n        }\n        if (!plugin.skipImplementation) {\n            if (plugin.implementation) {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `${plugin.implementation}\\n`;\n            } else {\n                c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation project(':${keyFixed}')\\n`;\n            }\n        }\n    }\n\n    if (plugin.implementations) {\n        plugin.implementations.forEach((v) => {\n            c.pluginConfigAndroid.appBuildGradleImplementations += `    implementation ${v}\\n`;\n        });\n    }\n\n    const appBuildGradle = plugin['app/build.gradle'];\n    if (appBuildGradle) {\n        if (appBuildGradle.apply) {\n            appBuildGradle.apply.forEach((v) => {\n                c.pluginConfigAndroid.applyPlugin += `apply ${v}\\n`;\n            });\n        }\n\n        if (appBuildGradle.defaultConfig) {\n            appBuildGradle.defaultConfig.forEach((v) => {\n                c.pluginConfigAndroid.defaultConfig += `${v}\\n`;\n            });\n        }\n    }\n\n    if (plugin.afterEvaluate) {\n        plugin.afterEvaluate.forEach((v) => {\n            c.pluginConfigAndroid.appBuildGradleAfterEvaluate += ` ${v}\\n`;\n        });\n    }\n    if (!skipPathResolutions) {\n        _fixAndroidLegacy(c, pathAbsolute);\n    }\n\n    // BUILD.GRADLE\n    const buildGradle = plugin.BuildGradle;\n    const allProjRepos = buildGradle?.allprojects?.repositories;\n    if (allProjRepos) {\n        Object.keys(allProjRepos).forEach((k) => {\n            if (allProjRepos[k] === true) {\n                c.pluginConfigAndroid.buildGradleAllProjectsRepositories += `${k}\\n`;\n            }\n        });\n    }\n\n    const buildscriptRepos = buildGradle?.buildscript?.repositories;\n    if (buildscriptRepos) {\n        Object.keys(buildscriptRepos).forEach((k) => {\n            if (buildscriptRepos[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptRepositories += `${k}\\n`;\n            }\n        });\n    }\n\n    const buildscriptDeps = buildGradle?.buildscript?.dependencies;\n    if (buildscriptDeps) {\n        Object.keys(buildscriptDeps).forEach((k) => {\n            if (buildscriptDeps[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptDependencies += `${k}\\n`;\n            }\n        });\n    }\n\n    const buildscriptDexOptions = buildGradle?.dexOptions;\n    if (buildscriptDexOptions) {\n        Object.keys(buildscriptDexOptions).forEach((k) => {\n            if (buildscriptDexOptions[k] === true) {\n                c.pluginConfigAndroid.buildGradleBuildScriptDexOptions += `${k}\\n`;\n            }\n        });\n    }\n};\n\nconst _fixAndroidLegacy = (c, modulePath) => {\n    const buildGradle = path.join(\n        c.paths.project.dir,\n        modulePath,\n        'build.gradle'\n    );\n\n    if (fsExistsSync(buildGradle)) {\n        logDebug('FIX:', buildGradle);\n        writeCleanFile(buildGradle, buildGradle, [\n            { pattern: \" compile '\", override: \"  implementation '\" },\n            { pattern: ' compile \"', override: '  implementation \"' },\n            { pattern: ' testCompile \"', override: '  testImplementation \"' },\n            { pattern: \" provided '\", override: \"  compileOnly '\" },\n            { pattern: ' provided \"', override: '  compileOnly \"' },\n            {\n                pattern: ' compile fileTree',\n                override: '  implementation fileTree'\n            }\n        ], null, c);\n    }\n};\n\n// const _getPrivateConfig = (c, platform) => {\n//     let privateConfigFolder = path.join(c.paths.workspace.dir, c.files.project.package.name, c.buildConfig.id);\n//     if (!fsExistsSync(privateConfigFolder)) {\n//         privateConfigFolder = path.join(c.paths.workspace.dir, c.files.project.package.name, 'appConfigs', c.buildConfig.id);\n//     }\n//     const appConfigSPP = c.buildConfig.platforms[platform] ? c.buildConfig.platforms[platform].signingPropertiesPath : null;\n//     const appConfigSPPClean = appConfigSPP ? appConfigSPP.replace('{globalConfigDir}', c.paths.workspace.dir) : null;\n//     const privateConfigPath = appConfigSPPClean || path.join(privateConfigFolder, 'config.private.json');\n//     c.paths.workspaceConfigPath = privateConfigPath;\n//     c.paths.workspace.appConfig.dir = privateConfigPath.replace('/config.private.json', '');\n//     if (fsExistsSync(privateConfigPath)) {\n//         try {\n//             const output = JSON.parse(fsReadFileSync(privateConfigPath));\n//             output.parentFolder = c.paths.workspace.appConfig.dir;\n//             output.path = privateConfigPath;\n//             logInfo(\n//                 `Found ${chalk().white(privateConfigPath)}. Will use it for production releases!`,\n//             );\n//             return output;\n//         } catch (e) {\n//             logError(e);\n//             return null;\n//         }\n//     } else {\n//         logWarning(\n//             `You're missing ${chalk().white(privateConfigPath)} for this app: . You won't be able to make production releases without it!`,\n//         );\n//         return null;\n//     }\n// };\n"],"file":"gradleParser.js"}