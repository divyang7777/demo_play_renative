{"version":3,"sources":["../../src/projectTools/projectParser.js"],"names":["checkAndCreateProjectPackage","c","Promise","resolve","fs","existsSync","paths","project","package","packageName","files","config","projectName","dir","split","pop","version","defaults","templateName","template","rnvVersion","rnv","pkgJson","name","dependencies","renative","devDependencies","pkgJsonStringClean","JSON","stringify","checkAndCreateGitignore","ignrPath","path","join","copyRuntimeAssets","reject","destPath","assets","appConfig","dirs","forEach","v","sourcePath","buildConfig","common","chalk","white","fontsObj","duplicateFontCheck","parseFonts","font","includes","key","includedFonts","platform","push","fontSource","replace","runtimeDir","fontJsPath","existingFileContents","readFileSync","toString","supportFiles","callback","projectConfig","fontsDir","readdirSync","fontsDirs","copySharedPlatforms","platformTemplatesDirs","builds","ASSET_PATH_ALIASES","android","androidtv","androidwear","ios","tvos","tizen","tizenmobile","tizenwatch","webos","kaios","firefoxtv","firefoxos","windows","macos","web","chromecast","copyAssetsFolder","customFn","tsPathsConfig","hasAssetFolder","filter","length","generateDefaultAssets","confirmAssets","program","ci","type","message","confirm","copyBuildsFolder","configPropsInject","INJECTABLE_CONFIG_PROPS","pattern","override","runtime","sourcePath1","sourcePath1sec","workspace","WEB_HOSTED_PLATFORMS","sourcePathShared","sourceV","sourcePath0sec","upgradeProjectDependencies","thw","tb","templates","_requiresNpmInstall","configureNodeModules","skipPackageUpdate","then","catch","e","cleanPlaformAssets"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport { WEB_HOSTED_PLATFORMS, INJECTABLE_CONFIG_PROPS } from '../constants';\nimport {\n    getAppFolder,\n    getAppSubFolder,\n    getBuildsFolder,\n    areNodeModulesInstalled,\n    getConfigProp,\n    getTimestampPathsConfig\n} from '../common';\nimport {\n    cleanFolder,\n    copyFolderContentsRecursiveSync,\n    copyFileSync,\n    mkdirSync,\n    writeFileSync,\n    fsWriteFileSync\n} from '../systemTools/fileutils';\nimport { isPlatformActive } from '../platformTools';\nimport { npmInstall } from '../systemTools/exec';\nimport { logTask, logWarning, logDebug, logInfo } from '../systemTools/logger';\nimport { copyTemplatePluginsSync } from '../pluginTools';\nimport { loadFile } from '../configTools/configParser';\nimport { inquirerPrompt } from '../systemTools/prompt';\n\nexport const checkAndCreateProjectPackage = c => new Promise((resolve) => {\n    logTask('checkAndCreateProjectPackage');\n\n    if (!fs.existsSync(c.paths.project.package)) {\n        logInfo(\n            `Looks like your ${c.paths.project.package} is missing. Let's create one for you!`\n        );\n\n        const packageName = c.files.project.config.projectName\n                || c.paths.project.dir.split('/').pop();\n        const version = c.files.project.config.defaults?.package?.version || '0.1.0';\n        const templateName = c.files.project.config.defaults?.template\n                || 'renative-template-hello-world';\n        const rnvVersion = c.files.rnv.package.version;\n\n        const pkgJson = {};\n        pkgJson.name = packageName;\n        pkgJson.version = version;\n        pkgJson.dependencies = {\n            renative: rnvVersion\n        };\n        pkgJson.devDependencies = {\n            rnv: rnvVersion\n        };\n        pkgJson.devDependencies[templateName] = rnvVersion;\n        const pkgJsonStringClean = JSON.stringify(pkgJson, null, 2);\n        fsWriteFileSync(c.paths.project.package, pkgJsonStringClean);\n    }\n\n    loadFile(c.files.project, c.paths.project, 'package');\n\n    resolve();\n});\n\nexport const checkAndCreateGitignore = (c) => {\n    logTask('checkAndCreateGitignore');\n    const ignrPath = path.join(c.paths.project.dir, '.gitignore');\n    if (!fs.existsSync(ignrPath)) {\n        logInfo(\n            \"Looks like your .gitignore is missing. Let's create one for you!\"\n        );\n\n        copyFileSync(\n            path.join(c.paths.rnv.dir, 'supportFiles/gitignore-template'),\n            ignrPath\n        );\n    }\n};\n\nexport const copyRuntimeAssets = c => new Promise((resolve, reject) => {\n    logTask('copyRuntimeAssets');\n\n    const destPath = path.join(c.paths.project.assets.dir, 'runtime');\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourcePath = path.join(v, 'assets/runtime');\n            copyFolderContentsRecursiveSync(sourcePath, destPath);\n        });\n    } else {\n        const sourcePath = path.join(\n            c.paths.appConfig.dir,\n            'assets/runtime'\n        );\n        copyFolderContentsRecursiveSync(sourcePath, destPath);\n    }\n\n    if (!c.buildConfig?.common) {\n        reject(\n            `Your ${chalk.white(\n                c.paths.appConfig.config\n            )} is missconfigured. (Maybe you have older version?). Missing ${chalk.white(\n                '{ common: {} }'\n            )} object at root`\n        );\n        return;\n    }\n\n\n    // FONTS\n    let fontsObj = 'export default [';\n\n    const duplicateFontCheck = [];\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const includedFonts = getConfigProp(\n                c,\n                c.platform,\n                'includedFonts'\n            );\n            if (includedFonts) {\n                if (\n                    includedFonts.includes('*')\n                        || includedFonts.includes(key)\n                ) {\n                    if (font && !duplicateFontCheck.includes(font)) {\n                        duplicateFontCheck.push(font);\n                        const fontSource = path.join(dir, font).replace(/\\\\/g, '\\\\\\\\');\n                        if (fs.existsSync(fontSource)) {\n                            // const fontFolder = path.join(appFolder, 'app/src/main/assets/fonts');\n                            // mkdirSync(fontFolder);\n                            // const fontDest = path.join(fontFolder, font);\n                            // copyFileSync(fontSource, fontDest);\n                            fontsObj += `{\n                              fontFamily: '${key}',\n                              file: require('${fontSource}'),\n                          },`;\n                        } else {\n                            logWarning(\n                                `Font ${chalk.white(\n                                    fontSource\n                                )} doesn't exist! Skipping.`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    fontsObj += '];';\n    if (!fs.existsSync(c.paths.project.assets.runtimeDir)) {\n        mkdirSync(c.paths.project.assets.runtimeDir);\n    }\n    const fontJsPath = path.join(\n        c.paths.project.assets.dir,\n        'runtime',\n        'fonts.web.js'\n    );\n    if (fs.existsSync(fontJsPath)) {\n        const existingFileContents = fs.readFileSync(fontJsPath).toString();\n\n        if (existingFileContents !== fontsObj) {\n            logDebug('newFontsJsFile');\n            fsWriteFileSync(fontJsPath, fontsObj);\n        }\n    } else {\n        logDebug('newFontsJsFile');\n        fsWriteFileSync(fontJsPath, fontsObj);\n    }\n\n    const supportFiles = path.resolve(c.paths.rnv.dir, 'supportFiles');\n    copyFileSync(\n        path.resolve(supportFiles, 'fontManager.js'),\n        path.resolve(\n            c.paths.project.assets.dir,\n            'runtime',\n            'fontManager.js'\n        )\n    );\n    copyFileSync(\n        path.resolve(supportFiles, 'fontManager.web.js'),\n        path.resolve(\n            c.paths.project.assets.dir,\n            'runtime',\n            'fontManager.web.js'\n        )\n    );\n\n    resolve();\n});\n\nexport const parseFonts = (c, callback) => {\n    logTask('parseFonts');\n\n    if (c.buildConfig) {\n        // FONTS - PROJECT CONFIG\n        if (fs.existsSync(c.paths.project.projectConfig.fontsDir)) {\n            fs.readdirSync(c.paths.project.projectConfig.fontsDir).forEach(\n                (font) => {\n                    if (callback) { callback(font, c.paths.project.projectConfig.fontsDir); }\n                }\n            );\n        }\n        // FONTS - APP CONFIG\n        if (c.paths.appConfig.fontsDirs) {\n            c.paths.appConfig.fontsDirs.forEach((v) => {\n                if (fs.existsSync(v)) {\n                    fs.readdirSync(v).forEach((font) => {\n                        if (callback) callback(font, v);\n                    });\n                }\n            });\n        } else if (fs.existsSync(c.paths.appConfig.fontsDir)) {\n            fs.readdirSync(c.paths.appConfig.fontsDir).forEach((font) => {\n                if (callback) callback(font, c.paths.appConfig.fontsDir);\n            });\n        }\n    }\n};\n\nexport const copySharedPlatforms = c => new Promise((resolve) => {\n    logTask(`_copySharedPlatform:${c.platform}`);\n\n    if (c.platform) {\n        mkdirSync(\n            path.resolve(\n                c.paths.project.platformTemplatesDirs[c.platform],\n                '_shared'\n            )\n        );\n\n        copyFolderContentsRecursiveSync(\n            path.resolve(\n                c.paths.project.platformTemplatesDirs[c.platform],\n                '_shared'\n            ),\n            path.resolve(c.paths.project.builds.dir, '_shared')\n        );\n    }\n\n    resolve();\n});\n\nconst ASSET_PATH_ALIASES = {\n    android: 'app/src/main',\n    androidtv: 'app/src/main',\n    androidwear: 'app/src/main',\n    ios: '',\n    tvos: '',\n    tizen: '',\n    tizenmobile: '',\n    tizenwatch: '',\n    webos: 'public',\n    kaios: '',\n    firefoxtv: '',\n    firefoxos: '',\n    windows: '',\n    macos: '',\n    web: 'public',\n    chromecast: 'public'\n};\n\nexport const copyAssetsFolder = async (c, platform, customFn) => {\n    logTask(`copyAssetsFolder:${platform}`);\n\n    if (!isPlatformActive(c, platform)) return;\n\n    if (customFn) {\n        return customFn(c, platform);\n    }\n\n    const destPath = path.join(\n        getAppSubFolder(c, platform),\n        ASSET_PATH_ALIASES[platform]\n    );\n\n    const tsPathsConfig = getTimestampPathsConfig(c, platform);\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        const hasAssetFolder = c.paths.appConfig.dirs\n            .filter(v => fs.existsSync(path.join(v, `assets/${platform}`))).length;\n        if (!hasAssetFolder) {\n            await generateDefaultAssets(\n                c,\n                platform,\n                path.join(c.paths.appConfig.dirs[0], `assets/${platform}`)\n            );\n        }\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourcePath = path.join(v, `assets/${platform}`);\n            copyFolderContentsRecursiveSync(sourcePath, destPath, true, false, false, null, tsPathsConfig);\n        });\n    } else {\n        const sourcePath = path.join(\n            c.paths.appConfig.dir,\n            `assets/${platform}`\n        );\n        if (!fs.existsSync(sourcePath)) {\n            await generateDefaultAssets(c, platform, sourcePath);\n        }\n        copyFolderContentsRecursiveSync(sourcePath, destPath, true, false, false, null, tsPathsConfig);\n    }\n};\n\nconst generateDefaultAssets = async (c, platform, sourcePath) => {\n    logTask(`generateDefaultAssets:${platform}`);\n    let confirmAssets = true;\n    if (c.program.ci === false) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `It seems you don't have assets configured in ${chalk.white(\n                sourcePath\n            )} do you want generate default ones?`\n        });\n        confirmAssets = confirm;\n    }\n\n    if (confirmAssets) {\n        copyFolderContentsRecursiveSync(\n            path.join(c.paths.rnv.dir, `projectTemplate/assets/${platform}`),\n            sourcePath\n        );\n    }\n};\n\nexport const copyBuildsFolder = (c, platform) => new Promise((resolve) => {\n    logTask(`copyBuildsFolder:${platform}`);\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const destPath = path.join(getAppFolder(c, platform));\n    const tsPathsConfig = getTimestampPathsConfig(c, platform);\n\n    const configPropsInject = [];\n    INJECTABLE_CONFIG_PROPS.forEach((v) => {\n        configPropsInject.push({\n            pattern: `{{configProps.${v}}}`,\n            override: getConfigProp(c, c.platform, v)\n        });\n    });\n    c.runtime.configPropsInject = configPropsInject;\n\n    // FOLDER MERGERS PROJECT CONFIG\n    const sourcePath1 = getBuildsFolder(\n        c,\n        platform,\n        c.paths.project.projectConfig.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath1, destPath, true, false, false, configPropsInject, tsPathsConfig);\n\n    // FOLDER MERGERS PROJECT CONFIG (PRIVATE)\n    const sourcePath1sec = getBuildsFolder(\n        c,\n        platform,\n        c.paths.workspace.project.projectConfig.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath1sec, destPath, true, false, false, configPropsInject, tsPathsConfig);\n\n    if (WEB_HOSTED_PLATFORMS.includes(platform)) {\n        // FOLDER MERGERS _SHARED\n        const sourcePathShared = path.join(\n            c.paths.project.projectConfig.dir,\n            'builds/_shared'\n        );\n        copyFolderContentsRecursiveSync(\n            sourcePathShared,\n            path.join(c.paths.project.builds.dir, '_shared'),\n            true, false, false, configPropsInject\n        );\n    }\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourceV = getBuildsFolder(c, platform, v);\n            copyFolderContentsRecursiveSync(\n                sourceV,\n                destPath,\n                true, false, false, configPropsInject, tsPathsConfig\n            );\n        });\n    } else {\n        copyFolderContentsRecursiveSync(\n            getBuildsFolder(c, platform, c.paths.appConfig.dir),\n            destPath,\n            true, false, false, configPropsInject, tsPathsConfig\n        );\n    }\n\n    // FOLDER MERGERS FROM APP CONFIG (PRIVATE)\n    const sourcePath0sec = getBuildsFolder(\n        c,\n        platform,\n        c.paths.workspace.appConfig.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath0sec, destPath, true, false, false, configPropsInject, tsPathsConfig);\n\n    copyTemplatePluginsSync(c, platform);\n\n    resolve();\n});\n\nexport const upgradeProjectDependencies = (c, version) => {\n    logTask('upgradeProjectDependencies');\n\n    const thw = 'renative-template-hello-world';\n    const tb = 'renative-template-blank';\n    const devDependencies = c.files.project.package?.devDependencies;\n    if (devDependencies?.rnv) {\n        devDependencies.rnv = version;\n    }\n    if (devDependencies[thw]) {\n        devDependencies[thw] = version;\n    }\n    if (devDependencies[tb]) {\n        devDependencies[tb] = version;\n    }\n    if (devDependencies?.renative) {\n        devDependencies.renative = version;\n    }\n\n    writeFileSync(c.paths.project.package, c.files.project.package);\n\n    if (c.files.project.config?.templates?.[thw]?.version) { c.files.project.config.templates[thw].version = version; }\n    if (c.files.project.config?.templates?.[tb]?.version) { c.files.project.config.templates[tb].version = version; }\n\n    c._requiresNpmInstall = true;\n\n    writeFileSync(c.paths.project.config, c.files.project.config);\n};\n\nexport const configureNodeModules = c => new Promise((resolve, reject) => {\n    logTask(`configureNodeModules:${c._requiresNpmInstall}:${c.runtime.skipPackageUpdate}`);\n    // Check node_modules\n    if (!areNodeModulesInstalled() || (c._requiresNpmInstall && !c.runtime.skipPackageUpdate)) {\n        if (!areNodeModulesInstalled()) {\n            logWarning(\n                `Looks like your node_modules folder is missing! Let's run ${chalk.white(\n                    'npm install'\n                )} first!`\n            );\n        } else {\n            logWarning(\n                `Looks like your node_modules out of date! Let's run ${chalk.white(\n                    'npm install'\n                )} first!`\n            );\n        }\n        c._requiresNpmInstall = false;\n        npmInstall()\n            .then(() => resolve())\n            .catch(e => reject(e));\n    } else {\n        resolve();\n    }\n});\n\nexport const cleanPlaformAssets = async (c) => {\n    logTask('cleanPlaformAssets');\n\n    await cleanFolder(c.paths.project.assets.dir);\n    mkdirSync(c.paths.project.assets.runtimeDir);\n    return true;\n};\n"],"file":"projectParser.js"}