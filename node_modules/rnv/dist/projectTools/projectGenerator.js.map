{"version":3,"sources":["../../src/projectTools/projectGenerator.js"],"names":["highlight","chalk","green","configureGit","c","projectPath","paths","project","dir","fs","existsSync","path","join","cwd","_generateProject","data","base","resolve","projectName","replace","package","config","RENATIVE_CONFIG_NAME","packageName","appTitle","toLowerCase","inquirer","prompt","type","name","message","confirm","Promise","reject","templates","optionTemplates","selectedOption","selectedVersion","grey","version","workspaceID","optionWorkspaces","appConfigsDir","platformTemplatesDir","entryDir","platformAssetsDir","platformBuildsDir","projectConfigDir","defaults","title","id","appID","supportedPlatforms","optionPlatforms","selectedOptions","currentTemplate","isNew","isMonorepo","gitEnabled","white","_prepareProjectOverview","inputProjectName","inputAppTitle","defaultAppTitle","teamID","inputAppID","inputVersion","defaultVersion","tempString","str","gray","confirmString","createNewProject","args","program","defaultTemplate","defaultProjectName","defaultWorkspace","SUPPORTED_PLATFORMS","validate","value","inputProjectNameObj","default","val","match","v","semver","valid","coerce","choices","keysAsArray","inputWorkspace","runtime","selectedWorkspace","inputTemplate","templateVersionsStr","versionArr","split","reverse","rnvVersion","validVersions","filter","lte","map","inputTemplateVersion","pageSize","length","inputSupportedPlatforms","Analytics","captureEvent","template","platforms"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport path from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport semver from 'semver';\nimport fs from 'fs';\nimport { generateOptions } from '../systemTools/prompt';\nimport { RENATIVE_CONFIG_NAME, SUPPORTED_PLATFORMS } from '../constants';\nimport { getTemplateOptions } from '../templateTools';\nimport { mkdirSync, writeFileSync, cleanFolder } from '../systemTools/fileutils';\nimport { executeAsync, commandExistsSync } from '../systemTools/exec';\nimport {\n    printIntoBox,\n    printBoxStart,\n    printBoxEnd,\n    printArrIntoBox,\n    logTask,\n    logSuccess,\n    logInfo,\n    logDebug,\n    logWarning\n} from '../systemTools/logger';\nimport { getWorkspaceOptions } from './workspace';\nimport { parseRenativeConfigs } from '../configTools/configParser';\nimport Analytics from '../systemTools/analytics';\n\nconst highlight = chalk.green;\n\nconst configureGit = async (c) => {\n    const projectPath = c.paths.project.dir;\n    logTask(`configureGit:${projectPath}`);\n\n    if (!fs.existsSync(path.join(projectPath, '.git'))) {\n        logInfo('Your project does not have a git repo. Creating one...');\n        if (commandExistsSync('git')) {\n            await executeAsync('git init', { cwd: projectPath });\n            await executeAsync('git add -A', { cwd: projectPath });\n            await executeAsync('git commit -m \"Initial\"', { cwd: projectPath });\n        } else {\n            logWarning(\n                \"We tried to create a git repo inside your project but you don't seem to have git installed\"\n            );\n        }\n    }\n};\n\nconst _generateProject = async (c, data) => {\n    logTask('_generateProject');\n\n    const base = path.resolve('.');\n\n    c.paths.project.dir = path.join(\n        base,\n        data.projectName.replace(/(\\s+)/g, '_')\n    );\n    c.paths.project.package = path.join(c.paths.project.dir, 'package.json');\n    c.paths.project.config = path.join(\n        c.paths.project.dir,\n        RENATIVE_CONFIG_NAME\n    );\n\n    data.packageName = data.appTitle.replace(/\\s+/g, '-').toLowerCase();\n\n    if (fs.existsSync(c.paths.project.dir)) {\n        const { confirm } = await inquirer.prompt({\n            type: 'confirm',\n            name: 'confirm',\n            message: `Folder ${c.paths.project.dir} already exists. RNV will override it. Continue?`\n        });\n\n        if (!confirm) {\n            return Promise.reject('Cancelled by user');\n        }\n        await cleanFolder(c.paths.project.dir);\n    }\n\n    mkdirSync(c.paths.project.dir);\n\n    const templates = {};\n\n    logTask(\n        `_generateProject:${data.optionTemplates.selectedOption}:${data.optionTemplates.selectedVersion}`,\n        chalk.grey\n    );\n\n    templates[data.optionTemplates.selectedOption] = {\n        version: data.optionTemplates.selectedVersion\n    };\n\n    const config = {\n        projectName: data.projectName,\n        workspaceID: data.optionWorkspaces.selectedOption,\n        paths: {\n            appConfigsDir: './appConfigs',\n            platformTemplatesDir: '$RNV_HOME/platformTemplates',\n            entryDir: './',\n            platformAssetsDir: './platformAssets',\n            platformBuildsDir: './platformBuilds',\n            projectConfigDir: './projectConfig'\n        },\n        defaults: {\n            title: data.appTitle,\n            id: data.appID,\n            supportedPlatforms: data.optionPlatforms.selectedOptions\n        },\n        templates,\n        currentTemplate: data.optionTemplates.selectedOption,\n        isNew: true,\n        isMonorepo: false\n    };\n\n    writeFileSync(c.paths.project.config, config);\n\n    if (data.gitEnabled) {\n        await configureGit(c);\n    }\n\n    logSuccess(\n        `Your project is ready! navigate to project ${chalk.white(\n            `cd ${data.projectName}`\n        )} and run ${chalk.white(\n            `rnv run -p ${data.optionPlatforms.selectedOptions[0]}`\n        )} to see magic happen!`\n    );\n};\n\nconst _prepareProjectOverview = (c, data) => {\n    data.projectName = data.inputProjectName;\n    data.appTitle = data.inputAppTitle || data.defaultAppTitle;\n    data.teamID = '';\n    data.appID = data.inputAppID\n        ? data.inputAppID.replace(/\\s+/g, '-').toLowerCase()\n        : data.appID;\n    data.version = data.inputVersion || data.defaultVersion;\n    const tempString = `${data.optionTemplates.selectedOption}@${data.optionTemplates.selectedVersion}`;\n\n    let str = printBoxStart('🚀  ReNative Project Generator');\n    str += printIntoBox('');\n    str += printIntoBox(\n        `Project Name (folder): ${highlight(data.projectName)}`,\n        1\n    );\n    str += printIntoBox(\n        `Workspace: ${highlight(data.optionWorkspaces.selectedOption)}`,\n        1\n    );\n    str += printIntoBox(`Project Title: ${highlight(data.appTitle)}`, 1);\n    str += printIntoBox(`Project Version: ${highlight(data.version)}`, 1);\n    str += printIntoBox(`App ID: ${highlight(data.appID)}`, 1);\n    str += printIntoBox(`Project Template: ${highlight(tempString)}`, 1);\n    str += printIntoBox(`Git Enabled: ${highlight(data.gitEnabled)}`, 1);\n    str += printIntoBox('');\n    str += printIntoBox('Project Platforms:');\n    str += printArrIntoBox(data.optionPlatforms.selectedOptions);\n    str += printIntoBox('');\n    str += printIntoBox('Project Structure:');\n    str += printIntoBox('');\n    str += printIntoBox(data.projectName);\n    str += chalk.gray(`│   ├── appConfigs            # Application flavour configuration files/assets │\n│   │   └── [APP_ID]          # Example application flavour                    │\n│   │       ├── assets        # Platform assets injected to ./platformAssets   │\n│   │       ├── builds        # Platform files injected to ./platformBuilds    │\n│   │       ├── fonts             # Folder for all custom fonts                │\n│   │       ├── plugins           # Multi-platform plugins injections          │\n│   │       └── renative.json # Application flavour config                     │\n│   ├── platformAssets        # Generated cross-platform assets                │\n│   ├── platformBuilds        # Generated platform app projects                │\n│   ├── src                   # Source code files                              │\n│   ├── index.*.js            # Entry files                                    │\n│   └── renative.json         # ReNative project configuration                 │\n`);\n    str += printIntoBox('');\n    str += printBoxEnd();\n    str += '\\n';\n\n    data.confirmString = str;\n};\n\nexport const createNewProject = async (c) => {\n    logTask('createNewProject');\n    const { args } = c.program;\n\n    let data = {\n        defaultVersion: '0.1.0',\n        defaultTemplate: 'renative-template-hello-world',\n        defaultProjectName: 'helloRenative',\n        defaultAppTitle: 'Hello Renative',\n        defaultWorkspace: 'rnv'\n    };\n    data.optionPlatforms = generateOptions(SUPPORTED_PLATFORMS, true);\n    data.optionTemplates = {};\n    data.optionWorkspaces = getWorkspaceOptions(c);\n\n    // logWelcome();\n    let inputProjectName;\n\n    if (args[1] && args[1] !== '') {\n        inputProjectName = args[1];\n    } else {\n        const inputProjectNameObj = await inquirer.prompt({\n            name: 'inputProjectName',\n            type: 'input',\n            validate: value => !!value,\n            message:\n                \"What's your project Name? (no spaces, folder based on ID will be created in this directory)\"\n        });\n        inputProjectName = inputProjectNameObj?.inputProjectName;\n    }\n\n    const {\n        inputAppTitle,\n        inputAppID,\n        inputVersion,\n        inputWorkspace\n    } = await inquirer.prompt([\n        {\n            name: 'inputAppTitle',\n            type: 'input',\n            default: data.defaultAppTitle,\n            validate: val => !!val || 'Please enter a title',\n            message: \"What's your project Title?\"\n        },\n        {\n            name: 'inputAppID',\n            type: 'input',\n            default: () => {\n                data.appID = `com.mycompany.${inputProjectName\n                    .replace(/\\s+/g, '')\n                    .toLowerCase()}`;\n                return data.appID;\n            },\n            validate: id => !!id.match(/[a-z]+\\.[a-z0-9]+\\.[a-z0-9]+/)\n                || 'Please enter a valid appID (com.test.app)',\n            message: \"What's your App ID?\"\n        },\n        {\n            name: 'inputVersion',\n            type: 'input',\n            default: data.defaultVersion,\n            validate: v => !!semver.valid(semver.coerce(v))\n                || 'Please enter a valid semver version (1.0.0, 42.6.7.9.3-alpha, etc.)',\n            message: \"What's your Version?\"\n        },\n        {\n            name: 'inputWorkspace',\n            type: 'list',\n            message: 'What workspace to use?',\n            default: data.defaultWorkspace,\n            choices: data.optionWorkspaces.keysAsArray\n        }\n    ]);\n    data.optionWorkspaces.selectedOption = inputWorkspace;\n\n    c.runtime.selectedWorkspace = inputWorkspace;\n    await parseRenativeConfigs(c);\n    data.optionTemplates = getTemplateOptions(c);\n\n    const { inputTemplate } = await inquirer.prompt({\n        name: 'inputTemplate',\n        type: 'list',\n        message: 'What template to use?',\n        default: data.defaultTemplate,\n        choices: data.optionTemplates.keysAsArray\n    });\n    data.optionTemplates.selectedOption = inputTemplate;\n\n    const templateVersionsStr = await executeAsync(\n        c,\n        `npm view ${data.optionTemplates.selectedOption} versions`\n    );\n    const versionArr = templateVersionsStr\n        .replace(/\\r?\\n|\\r|\\s|'|\\[|\\]/g, '')\n        .split(',')\n        .reverse();\n    const { rnvVersion } = c;\n\n    // filter greater versions than rnv\n    const validVersions = versionArr\n        .filter(version => semver.lte(version, rnvVersion))\n        .map(v => ({ name: v, value: v }));\n    if (validVersions[0].name === rnvVersion) {\n        // mark the same versions as recommended\n        validVersions[0].name = `${validVersions[0].name} (recommended)`;\n    }\n\n    data.optionTemplates.selectedVersion = versionArr[0];\n\n    const { inputTemplateVersion } = await inquirer.prompt({\n        name: 'inputTemplateVersion',\n        type: 'list',\n        message: 'What version of template to use?',\n        default: data.optionTemplates.selectedVersion,\n        choices: validVersions\n    });\n    data.optionTemplates.selectedVersion = inputTemplateVersion;\n\n    const { inputSupportedPlatforms } = await inquirer.prompt({\n        name: 'inputSupportedPlatforms',\n        type: 'checkbox',\n        pageSize: 20,\n        message: 'What platforms would you like to use?',\n        validate: val => !!val.length || 'Please select at least a platform',\n        default: data.optionPlatforms.keysAsArray,\n        choices: data.optionPlatforms.keysAsArray\n    });\n\n    const { gitEnabled } = await inquirer.prompt({\n        name: 'gitEnabled',\n        type: 'confirm',\n        message: 'Do you want to set-up git in your new project?'\n    });\n\n    data = {\n        ...data,\n        inputProjectName,\n        inputAppTitle,\n        inputAppID,\n        inputVersion,\n        inputTemplate,\n        inputSupportedPlatforms,\n        inputWorkspace,\n        gitEnabled\n    };\n    data.optionPlatforms.selectedOptions = inputSupportedPlatforms;\n\n    _prepareProjectOverview(c, data);\n\n    const { confirm } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'confirm',\n        message: `\\n${data.confirmString}\\nIs all this correct?`\n    });\n\n    if (confirm) {\n        try {\n            await Analytics.captureEvent({\n                type: 'newProject',\n                template: inputTemplate,\n                platforms: inputSupportedPlatforms\n            });\n        } catch (e) {\n            logDebug(e);\n        }\n\n        await _generateProject(c, data);\n    }\n};\n"],"file":"projectGenerator.js"}