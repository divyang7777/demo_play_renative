{"version":3,"sources":["../../src/projectTools/package.js"],"names":["bumpVersions","version","Config","getConfig","paths","dir","project","pluginTemplates","rnv","packagesDir","path","join","fs","existsSync","packages","readdirSync","forEach","name","pkgPath","pkgJsonPath","lstatSync","isDirectory","existingPkgJson","require","renativePkgPath","config","renative","publishAll","Promise","all","map","cwd","rnvPkg","args","program","rawArgs","slice","firstArg","secondArg","semver","valid"],"mappings":";;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;;AAEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,CAAa;;;;AAI1BC,gBAAOC,SAAP,GAAmBC,KAJO,CAEfC,GAFe,uBAE1BC,OAF0B,CAEfD,GAFe,CAGnBE,eAHmB,uBAG1BC,GAH0B,CAGnBD,eAHmB;;AAM9B,GAAME,CAAAA,WAAW,CAAGC,cAAKC,IAAL,CAAUN,GAAV,CAAe,UAAf,CAApB;AACA,GAAIO,YAAGC,UAAH,CAAcJ,WAAd,CAAJ,CAAgC;AAC5B,GAAMK,CAAAA,QAAQ,CAAGF,YAAGG,WAAH,CAAeN,WAAf,CAAjB;AACAK,QAAQ,CAACE,OAAT,CAAiB,SAACC,IAAD,CAAU;AACvB,GAAMC,CAAAA,OAAO,CAAGR,cAAKC,IAAL,CAAUF,WAAV,CAAuBQ,IAAvB,CAAhB;AACA,GAAME,CAAAA,WAAW,CAAGT,cAAKC,IAAL,CAAUO,OAAV,CAAmB,cAAnB,CAApB;AACA;AACIN,YAAGQ,SAAH,CAAaF,OAAb,EAAsBG,WAAtB;AACGT,YAAGC,UAAH,CAAcM,WAAd,CAFP;AAGE;;AAEE,GAAMG,CAAAA,eAAe,CAAGC,OAAO,CAACJ,WAAD,CAA/B;AACAG,eAAe,CAACrB,OAAhB,CAA0BA,OAA1B;AACA,+BAAgBkB,WAAhB,CAA6BG,eAA7B;AACH;AACJ,CAZD;;AAcA,GAAME,CAAAA,eAAe,CAAGd,cAAKC,IAAL,CAAUF,WAAV,CAAuB,UAAvB,CAAxB;AACA,GAAIG,YAAGC,UAAH,CAAcW,eAAd,CAAJ,CAAoC;AAChC;AACId,cAAKC,IAAL,CAAUN,GAAV,CAAe,WAAf,CADJ;AAEIK,cAAKC,IAAL,CAAUa,eAAV,CAA2B,WAA3B,CAFJ;;AAIA,gCAAiBjB,eAAe,CAACkB,MAAjC,CAAyC;AACrClB,eAAe,CAAE;AACbmB,QAAQ,CAAE;AACNzB,OAAO,CAAPA,OADM,CADG,CADoB,CAAzC;;;;AAOH;AACJ;AACJ,CAtCD;;AAwCA,GAAM0B,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM;;AAENtB,GAFM;AAGjBH,gBAAOC,SAAP,GAAmBC,KAHF,CAEjBE,OAFiB,CAEND,GAFM;AAIrB,GAAMI,CAAAA,WAAW,CAAGC,cAAKC,IAAL,CAAUN,GAAV,CAAe,UAAf,CAApB;AACA,GAAIO,YAAGC,UAAH,CAAcJ,WAAd,CAAJ,CAAgC;AAC5B,GAAMK,CAAAA,QAAQ,CAAGF,YAAGG,WAAH,CAAeN,WAAf,CAAjB;AACA,MAAOmB,CAAAA,OAAO,CAACC,GAAR;AACHf,QAAQ,CAACgB,GAAT,CAAa,SAACb,IAAD,CAAU;AACnB,GAAMC,CAAAA,OAAO,CAAGR,cAAKC,IAAL,CAAUF,WAAV,CAAuBQ,IAAvB,CAAhB;AACA,MAAO,uBAAa,OAAb,CAAsB,CAAEc,GAAG,CAAEb,OAAP,CAAtB,CAAP;AACH,CAHD,CADG,CAAP;;AAMH;AACD,MAAO,KAAP;AACH,CAfD;;AAiBA,GAAMc,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS;AACPC,IADO,iCACI/B,gBAAOC,SAAP,GAAmB+B,OAAnB,CAA2BC,OAD/B;AAEXF,IAAI,CAAGA,IAAI,CAACG,KAAL,CAAW,CAAX,CAAP;;AAEMC,QAJK,CAIMJ,IAAI,CAAC,CAAD,CAJV;AAKLK,SALK,CAKOL,IAAI,CAAC,CAAD,CALX;;AAOHI,QAPG;AAQF,SARE;;;;;;;;;;;AAmBF,SAnBE,uBAUEC,SAVF,yDAUsB,qBAAS,sBAAT,CAAiC,KAAjC,CAAwC,IAAxC,CAVtB,YAWEC,gBAAOC,KAAP,CAAaF,SAAb,CAXF,0DAYQ,kDAC0BA,SAD1B,CAEH,KAFG,CAGH,IAHG,CAZR,0CAkBItC,YAAY,CAACsC,SAAD,CAlBhB;AAoBIX,UAAU,EApBd;;AAsBH,yCAA6BU,QAA7B,CAAyC,KAAzC,CAAgD,IAAhD,EAtBG,yGAAf,C;;;;;AA2BeL,M","sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require */\n/* eslint-disable import/no-cycle */\n\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n\nimport Config from '../config';\nimport { executeAsync } from '../systemTools/exec';\nimport {\n    writeObjectSync,\n    copyFileSync,\n    updateObjectSync\n} from '../systemTools/fileutils';\nimport { logError } from '../systemTools/logger';\n\nconst bumpVersions = (version) => {\n    const {\n        project: { dir },\n        rnv: { pluginTemplates }\n    } = Config.getConfig().paths;\n    // check for packages to bump\n    const packagesDir = path.join(dir, 'packages');\n    if (fs.existsSync(packagesDir)) {\n        const packages = fs.readdirSync(packagesDir);\n        packages.forEach((name) => {\n            const pkgPath = path.join(packagesDir, name);\n            const pkgJsonPath = path.join(pkgPath, 'package.json');\n            if (\n                fs.lstatSync(pkgPath).isDirectory()\n                && fs.existsSync(pkgJsonPath)\n            ) {\n                // we found a packaaaage, fist-bumpin' it\n                const existingPkgJson = require(pkgJsonPath);\n                existingPkgJson.version = version;\n                writeObjectSync(pkgJsonPath, existingPkgJson);\n            }\n        });\n        // check if it's our turf and do some extra magic\n        const renativePkgPath = path.join(packagesDir, 'renative');\n        if (fs.existsSync(renativePkgPath)) {\n            copyFileSync(\n                path.join(dir, 'README.md'),\n                path.join(renativePkgPath, 'README.md')\n            );\n            updateObjectSync(pluginTemplates.config, {\n                pluginTemplates: {\n                    renative: {\n                        version\n                    }\n                }\n            });\n        }\n    }\n};\n\nconst publishAll = () => {\n    const {\n        project: { dir }\n    } = Config.getConfig().paths;\n    const packagesDir = path.join(dir, 'packages');\n    if (fs.existsSync(packagesDir)) {\n        const packages = fs.readdirSync(packagesDir);\n        return Promise.all(\n            packages.map((name) => {\n                const pkgPath = path.join(packagesDir, name);\n                return executeAsync('npm i', { cwd: pkgPath });\n            })\n        );\n    }\n    return true;\n};\n\nconst rnvPkg = async () => {\n    let args = [...Config.getConfig().program.rawArgs];\n    args = args.slice(3);\n\n    const firstArg = args[0];\n    const secondArg = args[1];\n\n    switch (firstArg) {\n        case 'version':\n            // sets the given version to all of the packages, if there are any\n            if (!secondArg) { return logError('No version specified', false, true); }\n            if (!semver.valid(secondArg)) {\n                return logError(\n                    `Invalid version specified ${secondArg}`,\n                    false,\n                    true\n                );\n            }\n            return bumpVersions(secondArg);\n        case 'publish':\n            return publishAll();\n        default:\n            logError(`Unknown argument ${firstArg}`, false, true);\n            break;\n    }\n};\n\nexport default rnvPkg;\n"],"file":"package.js"}