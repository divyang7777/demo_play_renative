{"version":3,"sources":["../../src/projectTools/workspace.js"],"names":["rnvWorkspaceList","c","opts","files","rnv","configWorkspaces","workspaces","i","obj","mapping","defaultVal","isConnected","chalk","grey","bold","asString","rnvWorkspaceAdd","name","type","message","validate","workspace","workspacePath","path","join","fs","existsSync","confirm","workspaceID","split","pop","replace","workspaceIDInput","createWorkspace","workspaceConfig","sdks","defaultWorkspace","config","defaultTargets","paths","getWorkspaceDirPath","wss","ws","runtime","selectedWorkspace","buildConfig","dirPath","wsDir","home","dir","isWSConfirmed","program","ci","white","warningMessage","conf","globalConfigDir","project","GLOBAL_RNV_DIR","rnvWorkspaceConnect","Object","keys","map","v","_getConnectionString","choices","selectedWS","remoteUrl","remote","url","connectMsg","green","rnvWorkspaceUpdate","getWorkspaceOptions"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n\nimport chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs';\nimport { generateOptions, inquirerPrompt } from '../systemTools/prompt';\nimport {\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo,\n    logToSummary,\n    logRaw\n} from '../systemTools/logger';\nimport { writeFileSync, mkdirSync } from '../systemTools/fileutils';\n\nexport const rnvWorkspaceList = async (c) => {\n    logTask('rnvWorkspaceList');\n\n    const opts = generateOptions(\n        c.files.rnv.configWorkspaces?.workspaces,\n        true,\n        null,\n        (i, obj, mapping, defaultVal) => {\n            const isConnected = '';\n            return ` [${chalk.grey(i + 1)}]> ${chalk.bold(\n                defaultVal\n            )}${isConnected} \\n`;\n        }\n    );\n\n    logToSummary(`Workspaces:\\n\\n${opts.asString}`);\n};\n\nexport const rnvWorkspaceAdd = async (c) => {\n    logTask('rnvWorkspaceAdd');\n\n    const { workspace } = await inquirerPrompt({\n        name: 'workspace',\n        type: 'input',\n        message: 'absolute path to new workspace',\n        validate: i => !!i || 'No path provided'\n    });\n\n    const workspacePath = path.join(workspace);\n\n    if (fs.existsSync(workspacePath)) {\n        const { confirm } = await inquirerPrompt({\n            name: 'confirm',\n            type: 'confirm',\n            message: `Folder ${workspacePath} already exists are you sure you want to override it?`\n        });\n        if (!confirm) return;\n    }\n\n    let workspaceID = workspacePath\n        .split('/')\n        .pop()\n        .replace(/@|\\./g, '');\n\n    const { workspaceIDInput } = await inquirerPrompt({\n        name: 'workspaceIDInput',\n        type: 'input',\n        message: `ID of the workspace (${workspaceID})`\n    });\n\n    workspaceID = workspaceIDInput || workspaceID;\n    createWorkspace(c, workspaceID, workspacePath);\n};\n\nexport const createWorkspace = async (c, workspaceID, workspacePath) => {\n    c.files.rnv.configWorkspaces.workspaces[workspaceID] = {\n        path: workspacePath\n    };\n\n    const workspaceConfig = {\n        sdks: c.files.defaultWorkspace?.config?.sdks,\n        defaultTargets: c.files.defaultWorkspace?.config?.defaultTargets\n    };\n\n    mkdirSync(workspacePath);\n    writeFileSync(path.join(workspacePath, 'renative.json'), workspaceConfig);\n\n    writeFileSync(c.paths.rnv.configWorkspaces, c.files.rnv.configWorkspaces);\n    return true;\n};\n\nexport const getWorkspaceDirPath = async (c) => {\n    logTask('getWorkspaceDirPath');\n    const wss = c.files.rnv.configWorkspaces;\n    const ws = c.runtime.selectedWorkspace || c.buildConfig?.workspaceID;\n    let dirPath;\n    if (wss?.workspaces && ws) {\n        dirPath = wss.workspaces[ws]?.path;\n        if (!dirPath) {\n            const wsDir = path.join(c.paths.home.dir, `.${ws}`);\n            if (fs.existsSync(wsDir)) {\n                wss.workspaces[ws] = {\n                    path: wsDir\n                };\n                writeFileSync(c.paths.rnv.configWorkspaces, wss);\n                logInfo(\n                    `Found workspace id ${ws} and compatible directory ${wsDir}. Your ${\n                        c.paths.rnv.configWorkspaces} has been updated.`\n                );\n            } else if (!c.runtime.isWSConfirmed || c.program.ci === true) {\n                let confirm = true;\n                if (c.program.ci !== true) {\n                    const { conf } = await inquirerPrompt({\n                        name: 'conf',\n                        type: 'confirm',\n                        message: `Your project belongs to workspace ${chalk.white(\n                            ws\n                        )}. do you want to add new workspace ${chalk.white(\n                            ws\n                        )} to your local system at ${chalk.white(wsDir)}?`,\n                        warningMessage: 'No app configs found for this project'\n                    });\n                    confirm = conf;\n                    c.runtime.isWSConfirmed = true;\n                }\n                if (confirm) {\n                    await createWorkspace(c, ws, wsDir);\n                }\n            }\n        }\n    }\n    if (c.buildConfig?.paths?.globalConfigDir) {\n        logWarning(\n            `paths.globalConfigDir in ${\n                c.paths.project.config\n            } is DEPRECATED. use workspaceID instead. more info at https://renative.org/docs/workspaces`\n        );\n    }\n    if (!dirPath) {\n        return c.buildConfig?.paths?.globalConfigDir || c.paths.GLOBAL_RNV_DIR;\n    }\n    return dirPath;\n};\n\nexport const rnvWorkspaceConnect = async (c) => {\n    logTask('rnvWorkspaceConnect');\n\n    const opts = Object.keys(c.files.rnv.configWorkspaces?.workspaces).map(\n        v => `${v} ${_getConnectionString(\n                c.files.rnv.configWorkspaces?.workspaces[v]\n        )}`\n    );\n\n    const { selectedWS } = await inquirerPrompt({\n        type: 'list',\n        name: 'selectedWS',\n        message: 'Pick a workspace',\n        choices: opts\n    });\n\n    logRaw(selectedWS);\n};\n\nconst _getConnectionString = (obj) => {\n    const remoteUrl = obj.remote?.url;\n    const connectMsg = remoteUrl\n        ? chalk.green(`(${obj.remote.type}:${remoteUrl})`)\n        : '';\n    return connectMsg;\n};\n\nexport const rnvWorkspaceUpdate = async () => {\n    // TODO: rnvWorkspaceUpdate\n    logTask('rnvWorkspaceUpdate');\n};\n\nexport const getWorkspaceOptions = c => generateOptions(\n        c.files.rnv.configWorkspaces?.workspaces,\n        false,\n        null,\n        (i, obj, mapping, defaultVal) => {\n            logDebug('getWorkspaceOptions');\n\n            return ` [${chalk.grey(i + 1)}]> ${chalk.bold(\n                defaultVal\n            )} ${_getConnectionString(obj)}\\n`;\n        }\n);\n"],"file":"workspace.js"}