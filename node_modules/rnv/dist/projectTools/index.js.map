{"version":3,"sources":["../../src/projectTools/index.js"],"names":["rnvConfigure","c","p","platform","Config","injectPlatformDependencies","_checkAndCreatePlatforms","originalPlatform","_configurePlatform","ANDROID","configureGradleProject","ANDROID_TV","ANDROID_WEAR","TIZEN","configureTizenProject","TIZEN_WATCH","TIZEN_MOBILE","WEBOS","configureWebOSProject","WEB","configureWebProject","MACOS","configureElectronProject","WINDOWS","KAIOS","configureKaiOSProject","FIREFOX_OS","FIREFOX_TV","IOS","configureXcodeProject","TVOS","CHROMECAST","configureChromecastProject","method","_isOK","rnvSwitch","Promise","resolve","reject","program","then","catch","e","rnvLink","fs","existsSync","paths","project","npmLinkPolyfill","l","JSON","parse","readFileSync","toString","Object","keys","forEach","key","source","path","nm","join","dest","list","result","v","builds","dir","command","subCommand","appConfig","runtime","appId","appFolder","platforms","buildConfig","chalk","white","config","ks","i","length","k"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEO,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAOC,CAAP;AAClBC,CADkB,CACdD,CAAC,CAACE,QAAF,EAAc,KADA;AAExB,oCAAwBF,CAAC,CAACE,QAA1B,KAAsCD,CAAtC,EAFwB;;;AAKpBA,CAAC,GAAK,KALc,4EAKDE,gBAAOC,0BAAP,CAAkCH,CAAlC,CALC;;AAOlBI,wBAAwB,CAACL,CAAD,CAAIA,CAAC,CAACE,QAAN,CAPN;AAQlB,qCAAkBF,CAAlB,CARkB;AASlB,uCAAoBA,CAApB,CATkB;AAUlB,wCAAsBA,CAAtB,CAVkB;AAWlB,yCAAwBA,CAAxB,CAXkB;;AAalBM,gBAbkB,CAaCN,CAAC,CAACE,QAbH;;AAelBK,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOO,kBAAP,CAAgBC,+BAAhB,CAfA;AAgBlBF,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOS,qBAAP,CAAmBD,+BAAnB,CAhBA;AAiBlBF,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOU,uBAAP,CAAqBF,+BAArB,CAjBA;AAkBlBF,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOW,gBAAP,CAAcC,4BAAd,CAlBA;AAmBlBN,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOa,sBAAP,CAAoBD,4BAApB,CAnBA;AAoBlBN,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOc,uBAAP,CAAqBF,4BAArB,CApBA;AAqBlBN,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOe,gBAAP,CAAcC,4BAAd,CArBA;AAsBlBV,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOiB,cAAP,CAAYC,wBAAZ,CAtBA;AAuBlBZ,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOmB,gBAAP,CAAcC,kCAAd,CAvBA;AAwBlBd,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOqB,kBAAP,CAAgBD,kCAAhB,CAxBA;AAyBlBd,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOsB,gBAAP,CAAcC,8BAAd,CAzBA;AA0BlBjB,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOwB,qBAAP,CAAmBD,8BAAnB,CA1BA;AA2BlBjB,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAOyB,qBAAP,CAAmBF,8BAAnB,CA3BA;AA4BlBjB,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAO0B,cAAP,CAAYC,4BAAZ,CA5BA;AA6BlBrB,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAO4B,eAAP,CAAaD,4BAAb,CA7BA;AA8BlBrB,kBAAkB,CAACP,CAAD,CAAIC,CAAJ,CAAO6B,qBAAP,CAAmBC,sCAAnB,CA9BA;;AAgCxB/B,CAAC,CAACE,QAAF,CAAaI,gBAAb,CAhCwB,sEAArB,C;;;AAmCP,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAOP,CAAP,CAAUC,CAAV,CAAaC,QAAb,CAAuB8B,MAAvB;AACnBC,KAAK,CAACjC,CAAD,CAAIC,CAAJ,CAAO,CAACC,QAAD,CAAP,CADc;AAEnBF,CAAC,CAACE,QAAF,CAAaA,QAAb,CAFmB;AAGb8B,MAAM,CAAChC,CAAD,CAAIE,QAAJ,CAHO,wEAA3B;;;;AAOO,GAAMgC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAlC,CAAC,QAAI,IAAImC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AAC3D,GAAMpC,CAAAA,CAAC,CAAGD,CAAC,CAACsC,OAAF,CAAUpC,QAAV,EAAsB,KAAhC;AACA,iCAAqBD,CAArB;;AAEA,qCAAkBD,CAAlB;AACKuC,IADL,CACU,iBAAM,uCAAoBvC,CAApB,CAAN,EADV;AAEKuC,IAFL,CAEU,iBAAM,wCAAsBvC,CAAtB,CAAN,EAFV;AAGKuC,IAHL,CAGU,iBAAMH,CAAAA,OAAO,EAAb,EAHV;AAIKI,KAJL,CAIW,SAAAC,CAAC,QAAIJ,CAAAA,MAAM,CAACI,CAAD,CAAV,EAJZ;AAKH,CAT6B,CAAJ,EAAnB,C;;AAWA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAA1C,CAAC,QAAI,IAAImC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa;AACjD,GAAIO,YAAGC,UAAH,CAAc5C,CAAC,CAAC6C,KAAF,CAAQC,OAAR,CAAgBC,eAA9B,CAAJ,CAAoD;AAChD,GAAMC,CAAAA,CAAC,CAAGC,IAAI,CAACC,KAAL;AACNP,YAAGQ,YAAH,CAAgBnD,CAAC,CAAC6C,KAAF,CAAQC,OAAR,CAAgBC,eAAhC,EAAiDK,QAAjD,EADM,CAAV;;AAGAC,MAAM,CAACC,IAAP,CAAYN,CAAZ,EAAeO,OAAf,CAAuB,SAACC,GAAD,CAAS;AAC5B,GAAMC,CAAAA,MAAM,CAAGC,cAAKtB,OAAL,CAAaY,CAAC,CAACQ,GAAD,CAAd,CAAf;AACA,GAAMG,CAAAA,EAAE,CAAGD,cAAKE,IAAL,CAAUH,MAAV,CAAkB,cAAlB,CAAX;AACA,GAAMI,CAAAA,IAAI,CAAG,uBAAUL,GAAV,CAAb;AACA,GAAIb,YAAGC,UAAH,CAAca,MAAd,CAAJ,CAA2B;AACvB,+CAAgCA,MAAhC,CAAwCI,IAAxC,CAA8C,KAA9C,CAAqD,CAACF,EAAD,CAArD;AACH,CAFD,IAEO;AACH,kCAAsBF,MAAtB;AACH;AACJ,CATD;AAUH,CAdD,IAcO;AACH;AACOzD,CAAC,CAAC6C,KAAF,CAAQC,OAAR,CAAgBC,eADvB;;AAGAX,OAAO;AACV;AACJ,CArB2B,CAAJ,EAAjB,C;;AAuBP,GAAMH,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACjC,CAAD,CAAIC,CAAJ,CAAO6D,IAAP,CAAgB;AAC1B,GAAIC,CAAAA,MAAM,CAAG,KAAb;AACAD,IAAI,CAACP,OAAL,CAAa,SAACS,CAAD,CAAO;AAChB,GAAI,oCAAiBhE,CAAjB,CAAoBgE,CAApB,IAA2B/D,CAAC,GAAK+D,CAAN,EAAW/D,CAAC,GAAK,KAA5C,CAAJ,CAAwD8D,MAAM,CAAG,IAAT;AAC3D,CAFD;AAGA,MAAOA,CAAAA,MAAP;AACH,CAND;;;AASA,GAAM1D,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAOL,CAAP,CAAUE,QAAV;AAC7B,gDAAoCA,QAApC,EAD6B;;AAGxByC,YAAGC,UAAH,CAAc5C,CAAC,CAAC6C,KAAF,CAAQC,OAAR,CAAgBmB,MAAhB,CAAuBC,GAArC,CAHwB;AAIzB,uBAAW,qDAAX,EAJyB;AAKnB,iBAAIlE,CAAJ,CAAO;AACTmE,OAAO,CAAE,UADA;AAETC,UAAU,CAAE,WAFH;AAGT9B,OAAO,CAAE,CAAE+B,SAAS,CAAErE,CAAC,CAACsE,OAAF,CAAUC,KAAvB,CAA8BrE,QAAQ,CAARA,QAA9B,CAHA,CAAP,CALmB;;;;AAYzBA,QAZyB;AAanBsE,SAbmB,CAaP,yBAAaxE,CAAb,CAAgBE,QAAhB,CAbO;AAcpByC,YAAGC,UAAH,CAAc4B,SAAd,CAdoB;AAerB;AACgBtE,QADhB,+CACsEsE,SADtE,EAfqB;;AAkBf,iBAAIxE,CAAJ,CAAO;AACTmE,OAAO,CAAE,UADA;AAETC,UAAU,CAAE,WAFH;AAGT9B,OAAO,CAAE,CAAE+B,SAAS,CAAErE,CAAC,CAACsE,OAAF,CAAUC,KAAvB,CAA8BrE,QAAQ,CAARA,QAA9B,CAHA,CAAP,CAlBe;;;;AAyBjBuE,SAzBiB,CAyBHzE,CAAC,CAAC0E,WAzBC,CAyBjBD,SAzBiB;AA0BpBA,SA1BoB;AA2BdtC,OAAO,CAACE,MAAR;AACKsC,eAAMC,KAAN;AACJ5E,CAAC,CAAC6C,KAAF,CAAQwB,SAAR,CAAkBQ,MADd,CADL;AAG8DF,eAAMC,KAAN;AAC7D,mBAD6D,CAH9D,mBA3Bc;;;;AAmCnBE,EAnCmB,CAmCdzB,MAAM,CAACC,IAAP,CAAYmB,SAAZ,CAnCc;AAoChBM,CApCgB,CAoCZ,CApCY,cAoCTA,CAAC,CAAGD,EAAE,CAACE,MApCE;AAqCfC,CArCe,CAqCXH,EAAE,CAACC,CAAD,CArCS;AAsCfP,UAtCe,CAsCH,yBAAaxE,CAAb,CAAgBiF,CAAhB,CAtCG;AAuChBtC,YAAGC,UAAH,CAAc4B,UAAd,CAvCgB;AAwCjB;AACgBS,CADhB,8CAC8DT,UAD9D,EAxCiB;;AA2CX,iBAAIxE,CAAJ,CAAO;AACTmE,OAAO,CAAE,UADA;AAETC,UAAU,CAAE,WAFH;AAGTlE,QAAQ,CAAE+E,CAHD;AAIT3C,OAAO,CAAE,CAAE+B,SAAS,CAAErE,CAAC,CAACsE,OAAF,CAAUC,KAAvB,CAA8BrE,QAAQ,CAAE+E,CAAxC,CAJA,CAAP,CA3CW,UAoCMF,CAAC,EApCP,gGAAjC","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport { getAppFolder } from '../common';\nimport { doResolve } from '../resolve';\nimport { isPlatformActive } from '../platformTools';\nimport { logTask, logWarning } from '../systemTools/logger';\nimport {\n    IOS,\n    ANDROID,\n    TVOS,\n    TIZEN,\n    WEBOS,\n    ANDROID_TV,\n    ANDROID_WEAR,\n    WEB,\n    MACOS,\n    WINDOWS,\n    TIZEN_MOBILE,\n    TIZEN_WATCH,\n    KAIOS,\n    FIREFOX_OS,\n    FIREFOX_TV,\n    CHROMECAST\n} from '../constants';\nimport { configureXcodeProject } from '../platformTools/apple';\nimport { configureGradleProject } from '../platformTools/android';\nimport { configureTizenProject } from '../platformTools/tizen';\nimport { configureWebOSProject } from '../platformTools/webos';\nimport { configureElectronProject } from '../platformTools/electron';\nimport { configureKaiOSProject } from '../platformTools/firefox';\nimport { configureWebProject } from '../platformTools/web';\nimport {\n    copyFolderContentsRecursiveSync\n} from '../systemTools/fileutils';\nimport CLI from '../cli';\nimport { copyRuntimeAssets, copySharedPlatforms } from './projectParser';\nimport { generateRuntimeConfig } from '../configTools/configParser';\nimport Config from '../config';\nimport { overrideTemplatePlugins } from '../pluginTools';\nimport { configureChromecastProject } from '../platformTools/chromecast';\n\nexport const rnvConfigure = async (c) => {\n    const p = c.platform || 'all';\n    logTask(`rnvConfigure:${c.platform}:${p}`);\n\n    // inject packages if needed\n    if (p !== 'all') await Config.injectPlatformDependencies(p);\n\n    await _checkAndCreatePlatforms(c, c.platform);\n    await copyRuntimeAssets(c);\n    await copySharedPlatforms(c);\n    await generateRuntimeConfig(c);\n    await overrideTemplatePlugins(c);\n\n    const originalPlatform = c.platform;\n\n    await _configurePlatform(c, p, ANDROID, configureGradleProject);\n    await _configurePlatform(c, p, ANDROID_TV, configureGradleProject);\n    await _configurePlatform(c, p, ANDROID_WEAR, configureGradleProject);\n    await _configurePlatform(c, p, TIZEN, configureTizenProject);\n    await _configurePlatform(c, p, TIZEN_WATCH, configureTizenProject);\n    await _configurePlatform(c, p, TIZEN_MOBILE, configureTizenProject);\n    await _configurePlatform(c, p, WEBOS, configureWebOSProject);\n    await _configurePlatform(c, p, WEB, configureWebProject);\n    await _configurePlatform(c, p, MACOS, configureElectronProject);\n    await _configurePlatform(c, p, WINDOWS, configureElectronProject);\n    await _configurePlatform(c, p, KAIOS, configureKaiOSProject);\n    await _configurePlatform(c, p, FIREFOX_OS, configureKaiOSProject);\n    await _configurePlatform(c, p, FIREFOX_TV, configureKaiOSProject);\n    await _configurePlatform(c, p, IOS, configureXcodeProject);\n    await _configurePlatform(c, p, TVOS, configureXcodeProject);\n    await _configurePlatform(c, p, CHROMECAST, configureChromecastProject);\n\n    c.platform = originalPlatform;\n};\n\nconst _configurePlatform = async (c, p, platform, method) => {\n    if (_isOK(c, p, [platform])) {\n        c.platform = platform;\n        await method(c, platform);\n    }\n};\n\nexport const rnvSwitch = c => new Promise((resolve, reject) => {\n    const p = c.program.platform || 'all';\n    logTask(`rnvSwitch:${p}`);\n\n    copyRuntimeAssets(c)\n        .then(() => copySharedPlatforms(c))\n        .then(() => generateRuntimeConfig(c))\n        .then(() => resolve())\n        .catch(e => reject(e));\n});\n\nexport const rnvLink = c => new Promise((resolve) => {\n    if (fs.existsSync(c.paths.project.npmLinkPolyfill)) {\n        const l = JSON.parse(\n            fs.readFileSync(c.paths.project.npmLinkPolyfill).toString()\n        );\n        Object.keys(l).forEach((key) => {\n            const source = path.resolve(l[key]);\n            const nm = path.join(source, 'node_modules');\n            const dest = doResolve(key);\n            if (fs.existsSync(source)) {\n                copyFolderContentsRecursiveSync(source, dest, false, [nm]);\n            } else {\n                logWarning(`Source: ${source} doesn't exists!`);\n            }\n        });\n    } else {\n        logWarning(\n            `${c.paths.project.npmLinkPolyfill} file not found. nothing to link!`\n        );\n        resolve();\n    }\n});\n\nconst _isOK = (c, p, list) => {\n    let result = false;\n    list.forEach((v) => {\n        if (isPlatformActive(c, v) && (p === v || p === 'all')) result = true;\n    });\n    return result;\n};\n\n/* eslint-disable no-await-in-loop */\nconst _checkAndCreatePlatforms = async (c, platform) => {\n    logTask(`_checkAndCreatePlatforms:${platform}`);\n\n    if (!fs.existsSync(c.paths.project.builds.dir)) {\n        logWarning('Platforms not created yet. creating them for you...');\n        await CLI(c, {\n            command: 'platform',\n            subCommand: 'configure',\n            program: { appConfig: c.runtime.appId, platform }\n        });\n        return;\n    }\n    if (platform) {\n        const appFolder = getAppFolder(c, platform);\n        if (!fs.existsSync(appFolder)) {\n            logWarning(\n                `Platform ${platform} not created yet. creating them for you at ${appFolder}`\n            );\n            await CLI(c, {\n                command: 'platform',\n                subCommand: 'configure',\n                program: { appConfig: c.runtime.appId, platform }\n            });\n        }\n    } else {\n        const { platforms } = c.buildConfig;\n        if (!platforms) {\n            return Promise.reject(\n                `Your ${chalk.white(\n                    c.paths.appConfig.config\n                )} is missconfigured. (Maybe you have older version?). Missing ${chalk.white(\n                    '{ platforms: {} }'\n                )} object at root`\n            );\n        }\n        const ks = Object.keys(platforms);\n        for (let i = 0; i < ks.length; i++) {\n            const k = ks[i];\n            const appFolder = getAppFolder(c, k);\n            if (!fs.existsSync(appFolder)) {\n                logWarning(\n                    `Platform ${k} not created yet. creating one for you at ${appFolder}`\n                );\n                await CLI(c, {\n                    command: 'platform',\n                    subCommand: 'configure',\n                    platform: k,\n                    program: { appConfig: c.runtime.appId, platform: k }\n                });\n            }\n        }\n    }\n};\n"],"file":"index.js"}