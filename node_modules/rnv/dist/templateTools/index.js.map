{"version":3,"sources":["../../src/templateTools/index.js"],"names":["addTemplate","c","template","files","project","config","templates","version","_writeObjectSync","paths","checkIfTemplateInstalled","Promise","resolve","buildConfig","chalk","white","Object","keys","forEach","k","obj","basedir","_requiresNpmInstall","package","devDependencies","_cleanProjectTemplateSync","dirsToRemove","path","join","projectConfig","dir","srcDir","appConfigsDir","filesToRemove","defaults","supportedPlatforms","map","p","_applyTemplate","currentTemplate","runtime","selectedTemplate","configTemplate","RENATIVE_CONFIG_TEMPLATE_NAME","fs","existsSync","projectConfigDir","requiresForcedTemplateApply","appId","_configureSrc","_configureAppConfigs","appConfigIds","supPlats","v","appConfigPath","RENATIVE_CONFIG_NAME","appConfig","common","isWrapper","title","id","platforms","pk","includes","_configureProjectConfig","_configureRenativeConfig","templateConfig","isNew","mergedObj","plugins","renative","webpack","modulePaths","projectPath","moduleAliases","configLocal","_parseSupportedPlatforms","callback","pLen","length","i","plat","platKeysNum","undefined","configureEntryPoints","rnv","entryDir","platform","source","entryFile","backupSource","projectTemplate","dest","reject","_configureMetroConfigs","configDir","s","getTemplateOptions","projectTemplates","mapping","defaultVal","exists","installed","yellow","grey","bold","getInstalledTemplateOptions","rnvTemplateList","opts","asString","rnvTemplateAdd","inquirer","prompt","type","message","name","choices","keysAsArray","applyTemplate","engine","requiresMetroConfig","rnvTemplateApply","program"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport chalk from 'chalk';\nimport fs, { mkdirSync } from 'fs';\nimport path from 'path';\nimport inquirer from 'inquirer';\n\nimport {\n    RENATIVE_CONFIG_NAME,\n    RENATIVE_CONFIG_TEMPLATE_NAME\n} from '../constants';\nimport {\n    copyFolderContentsRecursiveSync,\n    copyFileSync,\n    writeFileSync,\n    removeDirsSync,\n    removeFilesSync,\n    mergeObjects,\n    readObjectSync\n} from '../systemTools/fileutils';\nimport {\n    logToSummary,\n    logError,\n    logInfo,\n    logWarning,\n    logTask,\n    logDebug\n} from '../systemTools/logger';\nimport { generateOptions } from '../systemTools/prompt';\nimport {\n    setAppConfig,\n    listAppConfigsFoldersSync,\n    generateBuildConfig,\n    generateLocalConfig,\n    updateConfig,\n    parseRenativeConfigs\n} from '../configTools/configParser';\nimport { doResolve } from '../resolve';\nimport { getEngineByPlatform } from '../engineTools';\n\n\n// let templateName = c.buildConfig.currentTemplate;\n// if (!templateName) {\n//     templateName = 'renative-template-hello-world';\n//     logWarning(`You're missing template name in your ${chalk.white(c.paths.project.config)}. ReNative will add default ${chalk.white(templateName)} for you`);\n//     c.buildConfig.defaults.template = templateName;\n//     fs.writeFileSync(c.paths.project.config, JSON.stringify(c.files.project.config, null, 2));\n// }\n\nexport const addTemplate = (c, template) => {\n    logTask('addTemplate');\n\n    c.files.project.config.templates = c.files.project.config.templates || {};\n\n    if (!c.files.project.config.templates[template]) {\n        c.files.project.config.templates[template] = {\n            version: 'latest'\n        };\n    }\n\n    _writeObjectSync(c, c.paths.project.config, c.files.project.config);\n};\n\nexport const checkIfTemplateInstalled = c => new Promise((resolve) => {\n    logTask('checkIfTemplateInstalled');\n    if (!c.buildConfig.templates) {\n        logWarning(\n            `Your ${chalk.white(\n                c.paths.project.config\n            )} does not contain ${chalk.white(\n                'templates'\n            )} object. ReNative will skip template generation`\n        );\n        resolve();\n        return;\n    }\n    Object.keys(c.buildConfig.templates).forEach((k) => {\n        const obj = c.buildConfig.templates[k];\n        if (\n            !doResolve(k.version, false, { basedir: '../' })\n              && !doResolve(k, false)\n        ) {\n            logWarning(\n                `Your ${chalk.white(\n                    k.version\n                )} template is not installed. ReNative will install it for you`\n            );\n            c._requiresNpmInstall = true;\n        }\n        if (c.files.project.package.devDependencies) {\n            c.files.project.package.devDependencies[k] = obj.version;\n        }\n    });\n\n    _writeObjectSync(c, c.paths.project.package, c.files.project.package);\n\n    resolve();\n});\n\nconst _cleanProjectTemplateSync = (c) => {\n    logTask('_cleanProjectTemplateSync');\n    const dirsToRemove = [\n        path.join(c.paths.project.projectConfig.dir),\n        path.join(c.paths.project.srcDir),\n        path.join(c.paths.project.appConfigsDir)\n    ];\n\n    const filesToRemove = c.buildConfig.defaults.supportedPlatforms.map(\n        p => path.join(c.paths.project.dir, `index.${p}.js`)\n    );\n\n    removeDirsSync(dirsToRemove);\n    // TODO: NOT SERVED FROM TEMPLATE YET\n    removeFilesSync(filesToRemove);\n};\n\nconst _applyTemplate = async (c) => {\n    logTask(`_applyTemplate | current:${c.buildConfig.currentTemplate} | selected:${c.runtime.selectedTemplate}`);\n\n    if (c.runtime.selectedTemplate) {\n        _cleanProjectTemplateSync(c);\n        // if (isMonorepo()) {\n        //     // @todo - have the templates report their absolute locations\n        //     c.paths.template.dir = path.join(\n        //         getMonorepoRoot(),\n        //         'packages',\n        //         c.runtime.selectedTemplate\n        //     );\n        // } else {\n        c.paths.template.dir = doResolve(c.runtime.selectedTemplate);\n        // c.paths.template.dir = path.join(c.paths.project.nodeModulesDir, c.runtime.selectedTemplate);\n        // }\n    } else {\n        c.paths.template.dir = doResolve(c.buildConfig.currentTemplate);\n        // c.paths.template.dir = path.join(c.paths.project.nodeModulesDir, c.buildConfig.currentTemplate);\n    }\n\n    c.paths.template.configTemplate = path.join(\n        c.paths.template.dir,\n        RENATIVE_CONFIG_TEMPLATE_NAME\n    );\n\n    if (!fs.existsSync(c.paths.template.configTemplate)) {\n        logWarning(\n            `Template file ${chalk.white(\n                c.paths.template.configTemplate\n            )} does not exist. check your ${chalk.white(\n                c.paths.template.dir\n            )}. skipping`\n        );\n        return true;\n    }\n\n    logDebug(\n        `_applyTemplate:${c.runtime.selectedTemplate}:${c.paths.template.dir}`\n    );\n\n    c.paths.template.appConfigsDir = path.join(\n        c.paths.template.dir,\n        'appConfigs'\n    );\n    c.paths.template.projectConfigDir = path.join(\n        c.paths.template.dir,\n        'projectConfig'\n    );\n    c.runtime.currentTemplate = c.files.project.config.currentTemplate;\n    if (!c.runtime.currentTemplate) {\n        c.runtime.currentTemplate = Object.keys(\n            c.files.project.config.templates\n        )[0];\n        c.runtime.requiresForcedTemplateApply = true;\n    }\n\n    await setAppConfig(c, c.runtime.appId);\n    generateLocalConfig(c, !!c.runtime.selectedTemplate);\n\n    return true;\n};\n\nconst _configureSrc = c => new Promise((resolve) => {\n    // Check src\n    logDebug('configureProject:check src');\n    if (!fs.existsSync(c.paths.project.srcDir)) {\n        logInfo(\n            `Looks like your src folder ${chalk.white(\n                c.paths.project.srcDir\n            )} is missing! Let's create one for you.`\n        );\n        copyFolderContentsRecursiveSync(\n            path.join(c.paths.template.dir, 'src'),\n            c.paths.project.srcDir\n        );\n    }\n    resolve();\n});\n\nconst _configureAppConfigs = async (c) => {\n    // Check appConfigs\n    logDebug('configureProject:check appConfigs');\n    //\n    if (!fs.existsSync(c.paths.project.appConfigsDir)) {\n        logInfo(\n            `Looks like your appConfig folder ${chalk.white(\n                c.paths.project.appConfigsDir\n            )} is missing! ReNative will create one from template.`\n        );\n\n        // TODO: GET CORRECT PROJECT TEMPLATE\n        copyFolderContentsRecursiveSync(\n            c.paths.template.appConfigsDir,\n            c.paths.project.appConfigsDir\n        );\n\n        const appConfigIds = listAppConfigsFoldersSync(c, true);\n\n        // Update App Title to match package.json\n        try {\n            const supPlats = c.files.project?.config?.defaults?.supportedPlatforms;\n            appConfigIds.forEach((v) => {\n                const appConfigPath = path.join(\n                    c.paths.project.appConfigsDir,\n                    v,\n                    RENATIVE_CONFIG_NAME\n                );\n                const appConfig = readObjectSync(appConfigPath);\n                if (appConfig) {\n                    appConfig.common = appConfig.common || {};\n                    if (!c.runtime.isWrapper) {\n                        appConfig.common.title = c.files.project.config?.defaults?.title;\n                        appConfig.common.id = c.files.project.config?.defaults?.id;\n                    }\n\n                    if (supPlats) {\n                        Object.keys(appConfig.platforms).forEach((pk) => {\n                            if (!supPlats.includes(pk)) {\n                                delete appConfig.platforms[pk];\n                            }\n                        });\n                    }\n\n                    _writeObjectSync(c, appConfigPath, appConfig);\n                }\n            });\n\n            await updateConfig(c, true);\n        } catch (e) {\n            logError(e);\n        }\n    }\n};\n\nconst _configureProjectConfig = c => new Promise((resolve) => {\n    // Check projectConfigs\n    logDebug('configureProject:check projectConfigs');\n    if (!fs.existsSync(c.paths.project.projectConfig.dir)) {\n        logInfo(\n            `Looks like your projectConfig folder ${chalk.white(\n                c.paths.project.projectConfig.dir\n            )} is missing! Let's create one for you.`\n        );\n        copyFolderContentsRecursiveSync(\n            c.paths.template.projectConfigDir,\n            c.paths.project.projectConfig.dir\n        );\n    }\n    resolve();\n});\n\nconst _configureRenativeConfig = async (c) => {\n    // renative.json\n    const templateConfig = readObjectSync(c.paths.template.configTemplate);\n    logDebug('configureProject:check renative.json');\n\n    //     const missingPlugins = {};\n    //     const supPlats = c.files.project?.config?.defaults?.supportedPlatforms;\n    //     if (supPlats) {\n    //         supPlats.forEach((pk) => {\n    //             const selectedEngine = getEngineByPlatform(c, pk);\n    //             if (selectedEngine?.plugins) {\n    //                 const ePlugins = Object.keys(selectedEngine.plugins);\n    //\n    //                 if (ePlugins?.length) {\n    //                     ePlugins.forEach((pluginKey) => {\n    //                         if (!c.buildConfig?.plugins?.[pluginKey]) {\n    //                             missingPlugins[pluginKey] = { key: pluginKey, plugin: selectedEngine.plugins[pluginKey], engine: selectedEngine.id };\n    //                         }\n    //                     });\n    //                 }\n    //             }\n    //         });\n    //     }\n    //\n    //     const missingPluginsArr = Object.values(missingPlugins);\n    //     const involvedEngines = {};\n    //     if (missingPluginsArr.length) {\n    //         c.runtime.requiresForcedTemplateApply = true;\n    //\n    //         missingPluginsArr.forEach(({ key, plugin, engine }) => {\n    //             templateConfig.plugins[key] = plugin;\n    //             involvedEngines[engine] = true;\n    //         });\n    //\n    //         logInfo(`Adding following plugins required by ${chalk.white(Object.keys(involvedEngines).join(', '))} engines:\n    // ${chalk.white(missingPluginsArr.map(v => v.key).join(', '))}`);\n    //     }\n\n    if (!c.runtime.isWrapper) {\n        if (\n            c.runtime.selectedTemplate\n            || c.runtime.requiresForcedTemplateApply\n            || c.files.project.config.isNew\n        ) {\n            logWarning(\n                `Looks like your ${\n                    c.paths.project.config\n                } need to be updated with ${c.paths.template.configTemplate}`\n            );\n            const mergedObj = mergeObjects(\n                c,\n                c.files.project.config,\n                templateConfig,\n                false,\n                true\n            );\n            mergedObj.currentTemplate = c.runtime.currentTemplate;\n            mergedObj.isNew = null;\n            delete mergedObj.isNew;\n            c.files.project.config = mergedObj;\n            _writeObjectSync(c, c.paths.project.config, mergedObj);\n        }\n    } else {\n        // if (templateConfig.plugins.renative) {\n        //     templateConfig.plugins.renative = getLocalRenativePlugin();\n        // }\n        templateConfig.plugins.renative = {\n            webpack: {\n                modulePaths: [\n                    {\n                        projectPath: '../../packages/renative'\n                    }\n                ],\n                moduleAliases: {\n                    renative: {\n                        projectPath: '../../packages/renative'\n                    }\n                }\n            }\n        };\n\n        _writeObjectSync(c, c.paths.project.configLocal, templateConfig);\n    }\n    return true;\n};\n\nconst _parseSupportedPlatforms = async (c, callback) => {\n    if (!c.buildConfig.platforms) {\n        await parseRenativeConfigs(c);\n    }\n    const p = Object.keys(c.buildConfig.platforms);\n    const pLen = p.length;\n    const supportedPlatforms = c.buildConfig.defaults?.supportedPlatforms;\n    for (let i = 0; i < pLen; i++) {\n        const k = p[i];\n\n        const plat = c.buildConfig.platforms[k];\n        const platKeysNum = plat !== undefined ? Object.keys(plat).length : 0;\n\n        if ((supportedPlatforms && supportedPlatforms.includes(k)) || !supportedPlatforms) {\n            callback(k, plat);\n        } else if (platKeysNum > 1) {\n            // Every platform comes always at least with engine prop so let's check for more\n            logWarning(\n                `Extra platform ${chalk.white(\n                    k\n                )} will be ignored because it's not configured in your ${chalk.white(\n                    './renative.json: { defaults.supportedPlatforms }'\n                )} object.`\n            );\n        }\n    }\n    return true;\n};\n\nexport const configureEntryPoints = async (c) => {\n    logTask('configureEntryPoints');\n    // Check entry\n    // TODO: RN bundle command fails if entry files are not at root\n    // logDebug('configureProject:check entry');\n    // if (!fs.existsSync(c.paths.entryDir)) {\n    //     logWarning(`Looks like your entry folder ${chalk.white(c.paths.entryDir)} is missing! Let's create one for you.`);\n    copyFolderContentsRecursiveSync(\n        path.join(c.paths.rnv.dir, 'entry'),\n        c.paths.entryDir\n    );\n    // }\n\n    try {\n        if (!fs.existsSync(c.paths.appConfig.config)) {\n            logWarning(\n                `c.paths.appConfig.config at path: ${\n                    c.paths.appConfig.config\n                } does not exist. ReNative will regenerate renative.local.json`\n            );\n            return true;\n        }\n        await _parseSupportedPlatforms(c, (platform, plat) => {\n            const source = path.join(\n                c.paths.template.dir,\n                `${plat.entryFile}.js`\n            );\n            const backupSource = path.join(\n                c.paths.rnv.projectTemplate.dir,\n                'entry',\n                `${plat.entryFile}.js`\n            );\n            const dest = path.join(c.paths.project.dir, `${plat.entryFile}.js`);\n            if (!fs.existsSync(dest)) {\n                if (!plat.entryFile) {\n                    logWarning(\n                        `You missing entryFile key for ${chalk.white(\n                            platform\n                        )} platform in your ${chalk.white(\n                            c.paths.appConfig.config\n                        )}.`\n                    );\n                } else if (!fs.existsSync(source)) {\n                    logInfo(\n                        `You missing entry file ${chalk.white(\n                            source\n                        )} in your template. ReNative Will use default backup entry from ${chalk.white(\n                            backupSource\n                        )}!`\n                    );\n                    copyFileSync(backupSource, dest);\n                } else {\n                    logInfo(\n                        `You missing entry file ${chalk.white(\n                            plat.entryFile\n                        )} in your project. let's create one for you!`\n                    );\n                    copyFileSync(source, dest);\n                }\n            }\n        });\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    return true;\n};\n\nconst _configureMetroConfigs = async (c, platform) => {\n    const configDir = path.join(c.paths.project.dir, 'configs');\n    if (!fs.existsSync(configDir)) {\n        mkdirSync(configDir);\n    }\n    const dest = path.join(configDir, `metro.config.${platform}.js`);\n    if (!fs.existsSync(dest)) {\n        writeFileSync(\n            dest,\n            `const { EXTENSIONS } = require('rnv/dist/constants');\nconst config = require('../metro.config');\n\nconfig.resolver.sourceExts = EXTENSIONS.${platform};\nmodule.exports = config;\n`\n        );\n    }\n};\n\nconst _writeObjectSync = (c, p, s) => {\n    writeFileSync(p, s);\n    generateBuildConfig(c);\n};\n\nexport const getTemplateOptions = c => generateOptions(\n    c.buildConfig.projectTemplates,\n    false,\n    null,\n    (i, obj, mapping, defaultVal) => {\n        const exists = c.buildConfig.templates?.[defaultVal];\n        const installed = exists ? chalk.yellow(' (installed)') : '';\n        return ` [${chalk.grey(i + 1)}]> ${chalk.bold(\n            defaultVal\n        )}${installed} \\n`;\n    }\n);\n\nexport const getInstalledTemplateOptions = (c) => {\n    if (c.buildConfig.templates) {\n        return generateOptions(c.buildConfig.templates);\n    }\n    logError(\"You don't have any local templates installed\", false, true);\n    return [];\n};\n\nexport const rnvTemplateList = c => new Promise((resolve) => {\n    logTask('rnvTemplateList');\n    const opts = getTemplateOptions(c);\n    logToSummary(`Templates:\\n\\n${opts.asString}`);\n    resolve();\n});\n\nexport const rnvTemplateAdd = async (c) => {\n    logTask('rnvTemplateAdd');\n\n    const opts = getTemplateOptions(c);\n\n    const { template } = await inquirer.prompt({\n        type: 'list',\n        message: 'Pick which template to install',\n        name: 'template',\n        choices: opts.keysAsArray\n    });\n\n    addTemplate(c, template);\n};\n\nexport const applyTemplate = async (c, selectedTemplate) => {\n    logTask(\n        `applyTemplate:${c.buildConfig.currentTemplate}=>${selectedTemplate}:`\n    );\n    c.runtime.selectedTemplate = selectedTemplate;\n\n    if (!c.buildConfig.currentTemplate) {\n        logWarning(\"You don't have any current template selected\");\n        const opts = getInstalledTemplateOptions(c);\n\n        const { template } = await inquirer.prompt({\n            type: 'list',\n            name: 'template',\n            message: 'Pick which template to apply',\n            choices: opts.keysAsArray\n        });\n\n        c.buildConfig.currentTemplate = template;\n        c.files.project.config.currentTemplate = template;\n        _writeObjectSync(c, c.paths.project.config, c.files.project.config);\n    }\n\n    await _applyTemplate(c);\n    await _configureSrc(c);\n    await _configureAppConfigs(c);\n    await _configureProjectConfig(c);\n    await _configureRenativeConfig(c);\n    await configureEntryPoints(c);\n\n    // TODO: will move this to engine\n    const engine = getEngineByPlatform(c, c.platform);\n    if (engine?.requiresMetroConfig) {\n        await _configureMetroConfigs(c, c.platform);\n    }\n};\n\nexport const rnvTemplateApply = async (c) => {\n    logTask(`rnvTemplateApply:${c.program.template}`);\n\n    if (c.program.template) {\n        return applyTemplate(c, c.program.template);\n    }\n    const opts = getInstalledTemplateOptions(c);\n\n    const { template } = await inquirer.prompt({\n        type: 'list',\n        message: 'Pick which template to install',\n        name: 'template',\n        choices: opts.keysAsArray\n    });\n\n    applyTemplate(c, template);\n};\n"],"file":"index.js"}