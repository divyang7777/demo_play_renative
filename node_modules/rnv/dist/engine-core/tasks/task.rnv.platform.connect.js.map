{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.platform.connect.js"],"names":["taskRnvPlatformConnect","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_PLATFORM_CONNECT","files","project","config","paths","platformTemplatesDirs","platform","selectedPlatforms","inquirer","prompt","name","message","type","choices","map","choice","disabled","isConnected","connectedPlatforms","length","forEach","Object","keys","deletePlatformFolder","pathsToRemove","push","path","join","white","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"+WAAA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA,+C;;;AAGO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AAClC,oBAAQ,wBAAR,EADkC;;AAG5B,+BAAYF,CAAZ,CAAeG,iCAAf,CAAuCC,gCAAvC,CAA8DF,UAA9D,CAH4B;;AAK7BF,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6BC,qBALA;AAM9B,yBAAa,uDAAb,EAN8B;;;;;AAW9BT,CAAC,CAACU,QAX4B;AAY9BC,iBAAiB,CAAG,CAACX,CAAC,CAACU,QAAH,CAApB,CAZ8B;;AAcOE,kBAASC,MAAT,CAAgB;AACjDC,IAAI,CAAE,oBAD2C;AAEjDC,OAAO;AACL,uIAH+C;AAIjDC,IAAI,CAAE,UAJ2C;AAKjDC,OAAO,CAAE,6CAAwBjB,CAAxB,EAA2BkB,GAA3B,CAA+B,SAAAC,MAAM;AACvCA,MADuC;AAE1CC,QAAQ,CAAED,MAAM,CAACE,WAFyB,IAArC,CALwC,CAAhB,CAdP,8CActBC,kBAdsB,uBActBA,kBAdsB;;;AAwB9BX,iBAAiB,CAAGW,kBAApB,CAxB8B;;;;AA4BlC,GAAIX,iBAAiB,CAACY,MAAtB,CAA8B;AAC1BZ,iBAAiB,CAACa,OAAlB,CAA0B,SAACd,QAAD,CAAc;AACpC,0BAAIV,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6BC,qBAAjC,eAAI,sBAAqDC,QAArD,CAAJ,CAAoE;AAChE,MAAOV,CAAAA,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6BC,qBAA7B,CAAmDC,QAAnD,CAAP;AACH;;AAED,GAAI,CAACe,MAAM,CAACC,IAAP,CAAY1B,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6BC,qBAAzC,EAAgEc,MAArE,CAA6E;AACzE,MAAOvB,CAAAA,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6BC,qBAApC;AACH;;AAED,6BAAcT,CAAC,CAACQ,KAAF,CAAQF,OAAR,CAAgBC,MAA9B,CAAsCP,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAtD;AACH,CAVD;AAWH,CAxCiC;;AA0CKK,kBAASC,MAAT,CAAgB;AACnDC,IAAI,CAAE,sBAD6C;AAEnDE,IAAI,CAAE,SAF6C;AAGnDD,OAAO;AACH,oEAJ+C,CAAhB,CA1CL,+CA0C1BY,oBA1C0B,wBA0C1BA,oBA1C0B;;;AAiD9BA,oBAjD8B;AAkDxBC,aAlDwB,CAkDR,EAlDQ;AAmD9BjB,iBAAiB,CAACa,OAAlB,CAA0B,SAACd,QAAD,CAAc;AACpCkB,aAAa,CAACC,IAAd;AACIC,cAAKC,IAAL;AACI/B,CAAC,CAACQ,KAAF,CAAQF,OAAR,CAAgBG,qBAAhB,CAAsCC,QAAtC,CADJ;AAEIA,QAFJ,CADJ;;;AAMH,CAPD,EAnD8B;;;;AA8DxB,0BAAWkB,aAAX,CA9DwB;;;AAiElC;AACO,oBAAQI,KAAR;AACCrB,iBAAiB,CAACoB,IAAlB,CAAuB,GAAvB,CADD,CADP,+EAjEkC,sEAA/B,C;;;;;AAwEQ;AACXE,WAAW,CAAE,uCADF;AAEXC,EAAE,CAAEnC,sBAFO;AAGXoC,IAAI,CAAE/B,gCAHK;AAIXgC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import path from 'path';\nimport inquirer from 'inquirer';\n\nimport { chalk, logTask, logSuccess, logToSummary } from '../../core/systemManager/logger';\nimport {\n    writeFileSync,\n    removeDirs\n} from '../../core/systemManager/fileutils';\nimport { generatePlatformChoices } from '../../core/platformManager';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_PROJECT_CONFIGURE, TASK_PLATFORM_CONNECT, PARAMS } from '../../core/constants';\n\n\nexport const taskRnvPlatformConnect = async (c, parentTask, originTask) => {\n    logTask('taskRnvPlatformConnect');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_PLATFORM_CONNECT, originTask);\n\n    if (!c.files.project.config.paths.platformTemplatesDirs) {\n        logToSummary('All supported platforms are connected. nothing to do.');\n        return;\n    }\n\n    let selectedPlatforms;\n    if (c.platform) {\n        selectedPlatforms = [c.platform];\n    } else {\n        const { connectedPlatforms } = await inquirer.prompt({\n            name: 'connectedPlatforms',\n            message:\n              'This will point platformTemplates folders from your local project to ReNative managed one. Select platforms you would like to connect',\n            type: 'checkbox',\n            choices: generatePlatformChoices(c).map(choice => ({\n                ...choice,\n                disabled: choice.isConnected\n            }))\n        });\n        selectedPlatforms = connectedPlatforms;\n    }\n\n\n    if (selectedPlatforms.length) {\n        selectedPlatforms.forEach((platform) => {\n            if (c.files.project.config.paths.platformTemplatesDirs?.[platform]) {\n                delete c.files.project.config.paths.platformTemplatesDirs[platform];\n            }\n\n            if (!Object.keys(c.files.project.config.paths.platformTemplatesDirs).length) {\n                delete c.files.project.config.paths.platformTemplatesDirs; // also cleanup the empty object\n            }\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    const { deletePlatformFolder } = await inquirer.prompt({\n        name: 'deletePlatformFolder',\n        type: 'confirm',\n        message:\n            'Would you also like to delete the previously used platform folder?'\n    });\n\n    if (deletePlatformFolder) {\n        const pathsToRemove = [];\n        selectedPlatforms.forEach((platform) => {\n            pathsToRemove.push(\n                path.join(\n                    c.paths.project.platformTemplatesDirs[platform],\n                    platform\n                )\n            );\n        });\n\n        // TODO: Remove shared folders as well\n\n        await removeDirs(pathsToRemove);\n    }\n\n    logSuccess(\n        `${chalk().white(\n            selectedPlatforms.join(',')\n        )} now using ReNative platformTemplates located associated platform engines.`\n    );\n};\n\nexport default {\n    description: 'Connect platform template back to rnv',\n    fn: taskRnvPlatformConnect,\n    task: TASK_PLATFORM_CONNECT,\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.platform.connect.js"}