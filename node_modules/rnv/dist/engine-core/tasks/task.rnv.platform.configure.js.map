{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.platform.configure.js"],"names":["taskRnvPlatformConfigure","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_PLATFORM_CONFIGURE","program","only","TASK_INSTALL","hasBuild","paths","project","builds","dir","reset","resetHard","runtime","disableReset","white","platform","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"mRAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO,GAAMA,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AACpC,oBAAQ,0BAAR,CAAoC,EAApC,EADoC;;AAG9B,+BAAYF,CAAZ,CAAeG,iCAAf,CAAuCC,kCAAvC,CAAgEF,UAAhE,CAH8B;;AAK9B,yCAAoBF,CAApB,CAL8B;AAM9B,yCAAuBA,CAAvB,CAN8B;AAO9B,yBAASA,CAAT,CAP8B;AAQ9B,2CAAyBA,CAAzB,CAR8B;;AAUhCA,CAAC,CAACK,OAAF,CAAUC,IAAV,EAAkB,CAAC,CAACL,UAVY,2DAUO,IAVP;;AAY9B,+BAAYD,CAAZ,CAAeO,uBAAf,CAA6BH,kCAA7B,CAAsDF,UAAtD,CAZ8B;;AAc9BM,QAd8B,CAcnB,4BAAaR,CAAC,CAACS,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,GAApC,CAdmB;AAepC,oBAAQ,EAAR,mDAA8DJ,QAA9D,EAfoC;;AAiBhC,CAACR,CAAC,CAACK,OAAF,CAAUQ,KAAV,EAAmBb,CAAC,CAACK,OAAF,CAAUS,SAA9B,GAA4C,CAACd,CAAC,CAACe,OAAF,CAAUC,YAjBvB;AAkBhC;AACkB,oBAAQC,KAAR,CAAcjB,CAAC,CAACK,OAAF,CAAUQ,KAAV,CAAkB,IAAlB,CAAyB,IAAvC,CADlB,iBAC6E,oBAAQI,KAAR,CAAc,yBAAajB,CAAb,CAAgBA,CAAC,CAACkB,QAAlB,CAAd,CAD7E,uBAlBgC;;AAqB1B,wCAAmBlB,CAAnB,CAAsBA,CAAC,CAACkB,QAAxB,CArB0B;;;AAwB9B,yCAAoBlB,CAApB,CAAuBA,CAAC,CAACkB,QAAzB,CAxB8B;AAyB9B,8CAA2BlB,CAA3B,CAzB8B;;AA2B7B,IA3B6B,wEAAjC,C;;;AA8BQ;AACXmB,WAAW,CAAE,EADF;AAEXC,EAAE,CAAErB,wBAFO;AAGXsB,IAAI,CAAE,oBAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import { chalk, logTask, logInfo } from '../../core/systemManager/logger';\nimport { fsExistsSync } from '../../core/systemManager/fileutils';\nimport { getAppFolder } from '../../core/common';\nimport { isBuildSchemeSupported } from '../../core/configManager/schemeParser';\nimport { isPlatformSupported, cleanPlatformBuild, createPlatformBuild } from '../../core/platformManager';\nimport { injectPlatformDependencies } from '../../core/configManager/packageParser';\nimport { configureRuntimeDefaults } from '../../core/configManager/configParser';\nimport { executeTask } from '../../core/engineManager';\nimport { PARAMS, TASK_PLATFORM_CONFIGURE, TASK_PROJECT_CONFIGURE, TASK_INSTALL } from '../../core/constants';\n\nimport { checkSdk } from '../../core/sdkManager';\n\nexport const taskRnvPlatformConfigure = async (c, parentTask, originTask) => {\n    logTask('taskRnvPlatformConfigure', '');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_PLATFORM_CONFIGURE, originTask);\n\n    await isPlatformSupported(c);\n    await isBuildSchemeSupported(c);\n    await checkSdk(c);\n    await configureRuntimeDefaults(c);\n\n    if (c.program.only && !!parentTask) return true;\n\n    await executeTask(c, TASK_INSTALL, TASK_PLATFORM_CONFIGURE, originTask);\n\n    const hasBuild = fsExistsSync(c.paths.project.builds.dir);\n    logTask('', `taskRnvPlatformConfigure hasBuildFolderPresent:${hasBuild}`);\n\n    if ((c.program.reset || c.program.resetHard) && !c.runtime.disableReset) {\n        logInfo(\n            `You passed ${chalk().white(c.program.reset ? '-r' : '-R')} argument. \"${chalk().white(getAppFolder(c, c.platform))}\" CLEANING...DONE`\n        );\n        await cleanPlatformBuild(c, c.platform);\n    }\n\n    await createPlatformBuild(c, c.platform);\n    await injectPlatformDependencies(c);\n    // await _runCopyPlatforms(c);\n    return true;\n};\n\nexport default {\n    description: '',\n    fn: taskRnvPlatformConfigure,\n    task: 'platform configure',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.platform.configure.js"}