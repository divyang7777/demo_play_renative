{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.crypto.installCerts.js"],"names":["taskRnvCryptoInstallCerts","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_CRYPTO_INSTALL_CERTS","platform","kChain","program","keychain","list","paths","workspace","project","dir","cerArr","filter","v","endsWith","Promise","all","map","description","fn","task","params","PARAMS","withBase","platforms","skipPlatforms"],"mappings":"oRAAA;;;;;AAKA;;;AAGA;AACA;AACA;;;AAGO,GAAMA,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AACrC,oBAAQ,2BAAR,EADqC;;AAG/B,+BAAYF,CAAZ,CAAeG,iCAAf,CAAuCC,oCAAvC,CAAkEF,UAAlE,CAH+B;;AAKjCF,CAAC,CAACK,QAAF,GAAe,KALkB;AAMjC,oDAAwCL,CAAC,CAACK,QAA1C,mBANiC;AAO1B,IAP0B;;AAS/BC,MAT+B,CAStBN,CAAC,CAACO,OAAF,CAAUC,QAAV,EAAsB,oBATA;;AAW/BC,IAX+B,CAWxB,+BAAgBT,CAAC,CAACU,KAAF,CAAQC,SAAR,CAAkBC,OAAlB,CAA0BC,GAA1C,CAXwB;AAY/BC,MAZ+B,CAYtBL,IAAI,CAACM,MAAL,CAAY,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,QAAF,CAAW,MAAX,CAAJ,EAAb,CAZsB;;;AAejCC,OAAO,CAACC,GAAR;AACIL,MAAM,CAACM,GAAP,CAAW,SAAAJ,CAAC,QAAI,uBAAahB,CAAb,oBAAmCgB,CAAnC,QAA2CV,MAA3C,OAAJ,EAAZ,CADJ,EAfiC;;;AAmBjC,oCAnBiC;AAoB1B,IApB0B,4EAAlC,C;;;;AAwBQ;AACXe,WAAW,CAAE,EADF;AAEXC,EAAE,CAAEvB,yBAFO;AAGXwB,IAAI,CAAEnB,oCAHK;AAIXoB,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ,C","sourcesContent":["import {\n    logWarning,\n    logError,\n    logTask\n} from '../../core/systemManager/logger';\nimport {\n    getFileListSync,\n} from '../../core/systemManager/fileutils';\nimport { executeAsync } from '../../core/systemManager/exec';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_CRYPTO_INSTALL_CERTS, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\n\n\nexport const taskRnvCryptoInstallCerts = async (c, parentTask, originTask) => {\n    logTask('taskRnvCryptoInstallCerts');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_CRYPTO_INSTALL_CERTS, originTask);\n\n    if (c.platform !== 'ios') {\n        logError(`_installTempCerts: platform ${c.platform} not supported`);\n        return true;\n    }\n    const kChain = c.program.keychain || 'ios-build.keychain';\n\n    const list = getFileListSync(c.paths.workspace.project.dir);\n    const cerArr = list.filter(v => v.endsWith('.cer'));\n\n    try {\n        Promise.all(\n            cerArr.map(v => executeAsync(c, `security import ${v} -k ${kChain} -A`))\n        );\n    } catch (e) {\n        logWarning(e);\n        return true;\n    }\n};\n\nexport default {\n    description: '',\n    fn: taskRnvCryptoInstallCerts,\n    task: TASK_CRYPTO_INSTALL_CERTS,\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipPlatforms: true,\n};\n"],"file":"task.rnv.crypto.installCerts.js"}