{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.target.list.js"],"names":["taskRnvTargetList","c","parentTask","originTask","TASK_WORKSPACE_CONFIGURE","TASK_TARGET_LAUNCH","platform","ANDROID","ANDROID_TV","ANDROID_WEAR","IOS","TVOS","TIZEN","WEBOS","Promise","reject","white","bold","description","fn","task","params","PARAMS","withBase","platforms","isGlobalScope"],"mappings":"4QAAA;AACA;AACA;;;AAGA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;;;AAGO,GAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AAC7B,oBAAQ,mBAAR,EAD6B;;AAGvB,yCAAoBF,CAApB,CAHuB;AAIvB,+BAAYA,CAAZ,CAAeG,mCAAf,CAAyCC,6BAAzC,CAA6DF,UAA7D,CAJuB;;AAMrBG,QANqB,CAMRL,CANQ,CAMrBK,QANqB;;AAQvB,yBAASL,CAAT,CARuB;;AAUrBK,QAVqB;AAWpBC,kBAXoB;AAYpBC,qBAZoB;AAapBC,uBAboB;;AAepBC,cAfoB;AAgBpBC,eAhBoB;;AAkBpBC,gBAlBoB;;AAoBpBC,gBApBoB,qDAcd,sCAAmBZ,CAAnB,CAAsBK,QAAtB,CAdc,0CAiBd,qCAAiBL,CAAjB,CAjBc,0CAmBd,+BAAiBA,CAAjB,CAAoBK,QAApB,CAnBc;AAqBd,+BAAiBL,CAAjB,CArBc;;AAuBda,OAAO,CAACC,MAAR;AACuC,oBAAQC,KAAR,CAAcC,IAAd;AACtCX,QADsC,CADvC,iCAvBc,wEAA1B,C;;;;;;AA+BQ;AACXY,WAAW,CAAE,8DADF;AAEXC,EAAE,CAAEnB,iBAFO;AAGXoB,IAAI,CAAE,aAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ,C","sourcesContent":["import { isPlatformSupported } from '../../core/platformManager';\nimport { chalk, logTask } from '../../core/systemManager/logger';\nimport {\n    listAndroidTargets,\n} from '../../sdk-android/deviceManager';\nimport { checkSdk } from '../../core/sdkManager';\nimport { IOS,\n    ANDROID,\n    TVOS,\n    TIZEN,\n    WEBOS,\n    ANDROID_TV,\n    ANDROID_WEAR,\n    TASK_WORKSPACE_CONFIGURE, TASK_TARGET_LAUNCH,\n    PARAMS } from '../../core/constants';\nimport { listTizenTargets } from '../../sdk-tizen';\nimport { listWebOSTargets } from '../../sdk-webos';\nimport { listAppleDevices } from '../../sdk-xcode/deviceManager';\nimport { executeTask } from '../../core/engineManager';\n\n\nexport const taskRnvTargetList = async (c, parentTask, originTask) => {\n    logTask('taskRnvTargetList');\n\n    await isPlatformSupported(c);\n    await executeTask(c, TASK_WORKSPACE_CONFIGURE, TASK_TARGET_LAUNCH, originTask);\n\n    const { platform } = c;\n\n    await checkSdk(c);\n\n    switch (platform) {\n        case ANDROID:\n        case ANDROID_TV:\n        case ANDROID_WEAR:\n            return listAndroidTargets(c, platform);\n        case IOS:\n        case TVOS:\n            return listAppleDevices(c);\n        case TIZEN:\n            return listTizenTargets(c, platform);\n        case WEBOS:\n            return listWebOSTargets(c);\n        default:\n            return Promise.reject(\n                `\"target list\" command does not support ${chalk().white.bold(\n                    platform\n                )} platform yet. Working on it!`\n            );\n    }\n};\n\nexport default {\n    description: 'List all available devices / emulators for specific platform',\n    fn: taskRnvTargetList,\n    task: 'target list',\n    params: PARAMS.withBase(),\n    platforms: [],\n    isGlobalScope: true\n};\n"],"file":"task.rnv.target.list.js"}