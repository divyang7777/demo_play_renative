{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.platform.eject.js"],"names":["taskRnvPlatformEject","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_PLATFORM_EJECT","platform","selectedPlatforms","inquirer","prompt","name","message","type","choices","map","choice","disabled","isConnected","ejectedPlatforms","length","forEach","engine","destDir","path","join","paths","project","dir","ejectPlatform","files","config","platformTemplatesDirs","white","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"6WAAA;AACA;AACA;AACA;AACA;AACA;AACA,uD;;AAEO,GAAMA,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AAChC,oBAAQ,sBAAR,EADgC;;AAG1B,+BAAYF,CAAZ,CAAeG,iCAAf,CAAuCC,8BAAvC,CAA4DF,UAA5D,CAH0B;;AAK5BF,CAAC,CAACK,QAL0B;AAM5BC,iBAAiB,CAAG,CAACN,CAAC,CAACK,QAAH,CAApB,CAN4B;;AAQOE,kBAASC,MAAT,CAAgB;AAC/CC,IAAI,CAAE,kBADyC;AAE/CC,OAAO;AACL,oJAH6C;AAI/CC,IAAI,CAAE,UAJyC;AAK/CC,OAAO,CAAE,6CAAwBZ,CAAxB,EAA2Ba,GAA3B,CAA+B,SAAAC,MAAM;AACvCA,MADuC;AAE1CC,QAAQ,CAAE,CAACD,MAAM,CAACE,WAFwB,IAArC,CALsC,CAAhB,CARP,6CAQpBC,gBARoB,uBAQpBA,gBARoB;;;AAkB5BX,iBAAiB,CAAGW,gBAApB,CAlB4B;;;;AAsBhC,GAAIX,iBAAiB,CAACY,MAAtB,CAA8B;AAC1BZ,iBAAiB,CAACa,OAAlB,CAA0B,SAACd,QAAD,CAAc;AACpC,GAAMe,CAAAA,MAAM,CAAG,6CAA0BpB,CAA1B,CAA6BK,QAA7B,CAAf;AACA,GAAMgB,CAAAA,OAAO,CAAGC,cAAKC,IAAL,CAAUvB,CAAC,CAACwB,KAAF,CAAQC,OAAR,CAAgBC,GAA1B,CAA+B,mBAA/B,CAAoDrB,QAApD,CAAhB;;AAEAe,MAAM,CAACO,aAAP,CAAqB3B,CAArB,CAAwBK,QAAxB,CAAkCgB,OAAlC;;AAEArB,CAAC,CAAC4B,KAAF,CAAQH,OAAR,CAAgBI,MAAhB,CAAuBL,KAAvB;AACKM,qBADL,CAC6B9B,CAAC,CAAC4B,KAAF,CAAQH,OAAR,CAAgBI,MAAhB,CAAuBL,KAAvB,CAA6BM,qBAA7B,EAAsD,EADnF;AAEA9B,CAAC,CAAC4B,KAAF,CAAQH,OAAR,CAAgBI,MAAhB,CAAuBL,KAAvB,CAA6BM,qBAA7B;AACIzB,QADJ;AAES,mBAFT;AAGA,6BAAcL,CAAC,CAACwB,KAAF,CAAQC,OAAR,CAAgBI,MAA9B,CAAsC7B,CAAC,CAAC4B,KAAF,CAAQH,OAAR,CAAgBI,MAAtD;AACH,CAZD;;AAcA;AACO,oBAAQE,KAAR;AACCzB,iBAAiB,CAACiB,IAAlB,CAAuB,GAAvB,CADD,CADP;AAG2C,oBAAQQ,KAAR;AACnC/B,CAAC,CAAC4B,KAAF,CAAQH,OAAR,CAAgBI,MAAhB,CAAuBL,KAAvB,CAA6BM,qBAA7B,CAAmDxB,iBAAiB,CAAC,CAAD,CAApE,CADmC,CAH3C;;;AAOH,CAtBD,IAsBO;AACH;AAC2B,oBAAQyB,KAAR,CAAc,OAAd,CAD3B;AAEH,CA/C+B,sEAA7B,C;;;AAkDQ;AACXC,WAAW,CAAE,6CADF;AAEXC,EAAE,CAAElC,oBAFO;AAGXmC,IAAI,CAAE,gBAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import path from 'path';\nimport inquirer from 'inquirer';\nimport { chalk, logTask, logSuccess, logError } from '../../core/systemManager/logger';\nimport { writeFileSync } from '../../core/systemManager/fileutils';\nimport { TASK_PLATFORM_EJECT, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\nimport { generatePlatformChoices } from '../../core/platformManager';\nimport { executeTask, getEngineRunnerByPlatform } from '../../core/engineManager';\n\nexport const taskRnvPlatformEject = async (c, parentTask, originTask) => {\n    logTask('taskRnvPlatformEject');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_PLATFORM_EJECT, originTask);\n    let selectedPlatforms;\n    if (c.platform) {\n        selectedPlatforms = [c.platform];\n    } else {\n        const { ejectedPlatforms } = await inquirer.prompt({\n            name: 'ejectedPlatforms',\n            message:\n              'This will copy platformTemplates folders from ReNative managed directly to your project Select platforms you would like to connect (use SPACE key)',\n            type: 'checkbox',\n            choices: generatePlatformChoices(c).map(choice => ({\n                ...choice,\n                disabled: !choice.isConnected\n            }))\n        });\n        selectedPlatforms = ejectedPlatforms;\n    }\n\n\n    if (selectedPlatforms.length) {\n        selectedPlatforms.forEach((platform) => {\n            const engine = getEngineRunnerByPlatform(c, platform);\n            const destDir = path.join(c.paths.project.dir, 'platformTemplates', platform);\n\n            engine.ejectPlatform(c, platform, destDir);\n\n            c.files.project.config.paths\n                .platformTemplatesDirs = c.files.project.config.paths.platformTemplatesDirs || {};\n            c.files.project.config.paths.platformTemplatesDirs[\n                platform\n            ] = `./${'platformTemplates'}`;\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n\n        logSuccess(\n            `${chalk().white(\n                selectedPlatforms.join(',')\n            )} platform templates are located in ${chalk().white(\n                c.files.project.config.paths.platformTemplatesDirs[selectedPlatforms[0]]\n            )} now. You can edit them directly!`\n        );\n    } else {\n        logError(`You haven't selected any platform to eject.\nTIP: You can select options with ${chalk().white('SPACE')} key before pressing ENTER!`);\n    }\n};\n\nexport default {\n    description: 'Copy all platform files directly to project',\n    fn: taskRnvPlatformEject,\n    task: 'platform eject',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.platform.eject.js"}