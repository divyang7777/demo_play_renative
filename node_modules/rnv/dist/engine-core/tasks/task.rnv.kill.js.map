{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.kill.js"],"names":["taskRnvKill","c","parentTask","originTask","usedPorts","results","paths","project","configExists","TASK_APP_CONFIGURE","platArray","Object","values","runtime","supportedPlatforms","ports","buildConfig","defaults","SUPPORTED_PLATFORMS","keys","PLATFORMS","forEach","k","defaultPort","i","length","plat","port","platform","push","Promise","all","usedPortsArr","isInUse","type","message","warningMessage","map","v","white","join","confirm","killPromise","description","fn","task","TASK_KILL","params","PARAMS","withBase","platforms","isGlobalScope"],"mappings":"sQAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AACvB,oBAAQ,aAAR;;AAEMC,SAHiB,CAGL,EAHK;;AAKjBC,OALiB,CAKP,EALO;;;AAQjB,2CAAyBJ,CAAzB,CARiB;;AAUnBA,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,YAVG;AAWb,+BAAYP,CAAZ,CAAeQ,6BAAf,CAAmCP,UAAnC,CAA+CC,UAA/C,CAXa;AAYb,2CAAyBF,CAAzB,CAZa;AAanBS,SAAS,CAAGC,MAAM,CAACC,MAAP,CAAcX,CAAC,CAACY,OAAF,CAAUC,kBAAxB,CAAZ;AACAC,KAAK,CAAG,iBAAAd,CAAC,CAACe,WAAF,qDAAeC,QAAf,qCAAyBF,KAAzB,GAAkC,EAA1C,CAdmB;;AAgBnB,uBAAW,6EAAX;AACAL,SAAS,CAAGQ,8BAAZ;AACAH,KAAK,CAAG,EAAR;AACAJ,MAAM,CAACQ,IAAP,CAAYC,oBAAZ,EAAuBC,OAAvB,CAA+B,SAACC,CAAD,CAAO;AAClCP,KAAK,CAACO,CAAD,CAAL,CAAWF,qBAAUE,CAAV,EAAaC,WAAxB;AACH,CAFD,EAnBmB;;;AAwBvB,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGd,SAAS,CAACe,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C;AACjCE,IADiC,CAC1BhB,SAAS,CAACc,CAAD,CADiB;AAEjCG,IAFiC,SAE1BZ,KAF0B,eAE1B,OAAQW,IAAI,CAACE,QAAb,CAF0B;AAGvCF,IAAI,CAACC,IAAL,CAAYA,IAAZ;AACAtB,OAAO,CAACwB,IAAR,CAAa,2BAAe5B,CAAf,CAAkByB,IAAI,CAACE,QAAvB,CAAiCD,IAAjC,CAAb;AACH,CA7BsB;;AA+BIG,OAAO,CAACC,GAAR,CAAY1B,OAAZ,CA/BJ,UA+BjB2B,YA/BiB;AAgCvBA,YAAY,CAACX,OAAb,CAAqB,SAACY,OAAD,CAAUT,CAAV,CAAgB;AACjC,GAAIS,OAAJ,CAAa;AACT7B,SAAS,CAACyB,IAAV,CAAenB,SAAS,CAACc,CAAD,CAAxB;AACH;AACJ,CAJD,EAhCuB;;;AAuCnBpB,SAAS,CAACqB,MAvCS;AAwCO,2BAAe;AACrCS,IAAI,CAAE,SAD+B;AAErCC,OAAO,CAAE,2DAF4B;AAGrCC,cAAc;AACxBhC,SAAS,CAACiC,GAAV,CAAc,SAAAC,CAAC,QAAI,oBAAQC,KAAR,MAAmBD,CAAC,CAACX,IAArB,MAA8BW,CAAC,CAACV,QAAhC,KAAJ,EAAf,EAAiEY,IAAjE,CAAsE,IAAtE,CAJ+C,CAAf,CAxCP,8CAwCXC,OAxCW,uBAwCXA,OAxCW;;AA8CfA,OA9Ce;AA+CTC,WA/CS,CA+CK,EA/CL;AAgDftC,SAAS,CAACiB,OAAV,CAAkB,SAACiB,CAAD,CAAO;AACrBI,WAAW,CAACb,IAAZ,CAAiB,sBAASS,CAAC,CAACX,IAAX,CAAjB;AACH,CAFD,EAhDe;AAmDTG,OAAO,CAACC,GAAR,CAAY3B,SAAZ,CAnDS;AAoDf,uBAAW,kBAAX,EApDe;;;AAuDhB,IAvDgB,wEAApB,C;;;AA0DQ;AACXuC,WAAW,CAAE,iDADF;AAEXC,EAAE,CAAE5C,WAFO;AAGX6C,IAAI,CAAEC,oBAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ,C","sourcesContent":["import killPort from 'kill-port';\nimport { inquirerPrompt } from '../../cli/prompt';\nimport { checkPortInUse } from '../../core/common';\nimport { executeTask } from '../../core/engineManager';\nimport { chalk, logTask, logSuccess, logWarning } from '../../core/systemManager/logger';\nimport { configureRuntimeDefaults } from '../../core/configManager/configParser';\n\nimport { PARAMS, TASK_KILL, TASK_APP_CONFIGURE, PLATFORMS, SUPPORTED_PLATFORMS } from '../../core/constants';\n\nexport const taskRnvKill = async (c, parentTask, originTask) => {\n    logTask('taskRnvKill');\n\n    const usedPorts = [];\n    let platArray;\n    const results = [];\n    let ports;\n\n    await configureRuntimeDefaults(c);\n\n    if (c.paths.project.configExists) {\n        await executeTask(c, TASK_APP_CONFIGURE, parentTask, originTask);\n        await configureRuntimeDefaults(c);\n        platArray = Object.values(c.runtime.supportedPlatforms);\n        ports = c.buildConfig?.defaults?.ports || {};\n    } else {\n        logWarning('This folder is not a ReNative project!. only DEFAULT ports will be checked.');\n        platArray = SUPPORTED_PLATFORMS;\n        ports = {};\n        Object.keys(PLATFORMS).forEach((k) => {\n            ports[k] = PLATFORMS[k].defaultPort;\n        });\n    }\n\n    for (let i = 0; i < platArray.length; i++) {\n        const plat = platArray[i];\n        const port = ports?.[plat.platform];\n        plat.port = port;\n        results.push(checkPortInUse(c, plat.platform, port));\n    }\n\n    const usedPortsArr = await Promise.all(results);\n    usedPortsArr.forEach((isInUse, i) => {\n        if (isInUse) {\n            usedPorts.push(platArray[i]);\n        }\n    });\n\n\n    if (usedPorts.length) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: 'Processes attached to the ports will be killed. Continue?',\n            warningMessage: `Found active ports:\n${usedPorts.map(v => chalk().white(`> ${v.port} (${v.platform})`)).join('\\n')}`\n        });\n        if (confirm) {\n            const killPromise = [];\n            usedPorts.forEach((v) => {\n                killPromise.push(killPort(v.port));\n            });\n            await Promise.all(usedPorts);\n            logSuccess('Processes KILLED');\n        }\n    }\n    return true;\n};\n\nexport default {\n    description: 'Kills all the processes related to this project',\n    fn: taskRnvKill,\n    task: TASK_KILL,\n    params: PARAMS.withBase(),\n    platforms: [],\n    isGlobalScope: true\n};\n"],"file":"task.rnv.kill.js"}