{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.crypto.encrypt.js"],"names":["iocane","require","readdirAsync","fsReaddir","generateRandomKey","length","Array","fill","map","x","Math","floor","random","join","_checkAndConfigureCrypto","c","source","files","project","package","name","config","crypto","type","message","default","location","encrypt","dest","decrypt","paths","sourceFolder","path","workspace","dir","white","appConfigsDir","appConfigsDirs","forEach","item","appConfigDir","envVar","key","program","process","env","keyGenerated","yellow","confirm","Promise","reject","red","taskRnvCryptoEncrypt","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_CRYPTO_ENCRYPT","destRaw","tsWorkspacePath","destTemp","replace","timestamp","Date","getTime","destFolder","tar","gzip","file","cwd","createSession","use","data","appConfigBase","description","fn","task","params","PARAMS","withBase","platforms","skipPlatforms"],"mappings":"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","sourcesContent":["import path from 'path';\nimport tar from 'tar';\nimport { promisify } from 'util';\nimport {\n    chalk,\n    logWarning,\n    logTask,\n    logSuccess,\n    logInfo\n} from '../../core/systemManager/logger';\nimport {\n    getRealPath,\n    removeFilesSync,\n    mkdirSync,\n    writeFileSync,\n    fsWriteFileSync,\n    fsExistsSync,\n    fsReadFileSync,\n    fsReaddir\n} from '../../core/systemManager/fileutils';\nimport { inquirerPrompt } from '../../cli/prompt';\nimport { getEnvVar, getEnvExportCmd } from '../../core/systemManager/crypto';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_CRYPTO_ENCRYPT, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\n\n\nconst iocane = require('iocane');\n\nconst readdirAsync = promisify(fsReaddir);\n\nconst generateRandomKey = length => Array(length)\n    .fill(\n        '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%^&*'\n    )\n    .map(x => x[Math.floor(Math.random() * x.length)])\n    .join('');\n\nconst _checkAndConfigureCrypto = async (c) => {\n    // handle missing config\n    const source = `./${c.files.project.package.name}`;\n\n    if (c.files.project.config && !c.files.project.config.crypto) {\n        const { location } = await inquirerPrompt({\n            type: 'input',\n            name: 'location',\n            message:\n                'Where would you like your secrets to be residing? (path relative to root, without leading or trailing slash. Ex. `myPrivateConfig/encrypt`)',\n            default: 'secrets'\n        });\n        c.files.project.config.crypto = {\n            encrypt: {\n                dest: `PROJECT_HOME/${location}/privateConfigs.enc`\n            },\n            decrypt: {\n                source: `PROJECT_HOME/${location}/privateConfigs.enc`\n            }\n        };\n        writeFileSync(c.paths.project.config, c.files.project.config);\n    }\n\n    // check if src folder actually exists\n    const sourceFolder = path.join(c.paths.workspace.dir, source);\n    if (!fsExistsSync(sourceFolder)) {\n        logInfo(\n            `It seems you are running encrypt for the first time. Directory ${chalk().white(\n                sourceFolder\n            )} does not exist yet.\nRNV will create it for you, make sure you add whatever you want encrypted in it and then run the command again`\n        );\n\n        mkdirSync(sourceFolder);\n        mkdirSync(path.join(sourceFolder, 'certs'));\n        writeFileSync(path.join(sourceFolder, 'renative.private.json'), {});\n\n        const appConfigsDirs = await readdirAsync(c.paths.project.appConfigsDir);\n\n        appConfigsDirs.forEach((item) => {\n            const appConfigDir = path.join(sourceFolder, item);\n            mkdirSync(appConfigDir);\n            mkdirSync(path.join(appConfigDir, 'certs'));\n            writeFileSync(path.join(appConfigDir, 'renative.private.json'), {});\n        });\n\n        // writeFileSync(path.join(sourceFolder), c.files.project.config);\n        await inquirerPrompt({\n            type: 'confirm',\n            message: 'Once ready, Continue?'\n        });\n\n        // if (confirm) return true;\n    }\n\n    const envVar = getEnvVar(c);\n    let key = c.program.key || c.process.env[envVar];\n    let keyGenerated = false;\n    if (!key) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `You haven't passed a key with --key or set an env variable named ${chalk().yellow(\n                envVar\n            )} for the encryption key. Would you like to generate one?`\n        });\n        if (confirm) {\n            key = generateRandomKey(20);\n            keyGenerated = true;\n        } else {\n            return Promise.reject(`encrypt: You must pass ${chalk().white(\n                '--key'\n            )} or have env var defined:\n\n${getEnvExportCmd(envVar, 'REPLACE_WITH_ENV_VARIABLE')}\n\n`);\n        }\n        if (keyGenerated) {\n            logSuccess(`The files were encrypted with key ${chalk().red(\n                key\n            )}. Make sure you keep it safe! Pass it with --key on decryption or set it as following env variable:\n\n${getEnvExportCmd(envVar, key)}\n\n`);\n            c.process.env[envVar] = key;\n        }\n    }\n};\n\nexport const taskRnvCryptoEncrypt = async (c, parentTask, originTask) => {\n    logTask('taskRnvCryptoEncrypt');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_CRYPTO_ENCRYPT, originTask);\n\n    const source = `./${c.files.project.package.name}`;\n\n    await _checkAndConfigureCrypto(c);\n\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n    const tsWorkspacePath = path.join(\n        c.paths.workspace.dir,\n        c.files.project.package.name,\n        'timestamp'\n    );\n    const envVar = getEnvVar(c);\n    const key = c.program.key || c.process.env[envVar];\n\n    if (destRaw) {\n        const dest = `${getRealPath(c, destRaw, 'encrypt.dest')}`;\n        const destTemp = `${path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name.replace('/', '-')\n        )}.tgz`;\n        const timestamp = new Date().getTime();\n\n        // check if dest folder actually exists\n        const destFolder = path.join(dest, '../../core/');\n        !fsExistsSync(destFolder) && mkdirSync(destFolder);\n\n        await tar.c(\n            {\n                gzip: true,\n                file: destTemp,\n                cwd: c.paths.workspace.dir\n            },\n            [source]\n        );\n\n\n        const data = await iocane.createSession()\n            .use('cbc')\n            .encrypt(fsReadFileSync(destTemp), key);\n\n        fsWriteFileSync(dest, data);\n\n        // await executeAsync(\n        //     c,\n        //     `${_getOpenSllPath(\n        //         c\n        //     )} enc -aes-256-cbc -md md5 -salt -in ${destTemp} -out ${dest} -k ${key}`,\n        //     { privateParams: [key] }\n        // );\n        removeFilesSync([destTemp]);\n        fsWriteFileSync(`${dest}.timestamp`, timestamp);\n        fsWriteFileSync(`${tsWorkspacePath}`, timestamp);\n        logSuccess(`Files succesfully encrypted into ${dest}`);\n    } else {\n        logWarning(\n            `You don't have {{ crypto.encrypt.dest }} specificed in ${chalk().white(\n                c.paths.appConfigBase\n            )}`\n        );\n    }\n};\n\nexport default {\n    description: 'Encrypts secure files from ~/<wokspace>/<project>/.. to project',\n    fn: taskRnvCryptoEncrypt,\n    task: TASK_CRYPTO_ENCRYPT,\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipPlatforms: true,\n};\n"],"file":"task.rnv.crypto.encrypt.js"}