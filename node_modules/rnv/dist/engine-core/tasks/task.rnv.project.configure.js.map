{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.project.configure.js"],"names":["taskRnvProjectConfigure","c","parentTask","originTask","paths","project","builds","dir","TASK_WORKSPACE_CONFIGURE","TASK_PROJECT_CONFIGURE","program","only","TASK_APP_CONFIGURE","TASK_INSTALL","TASK_TEMPLATE_APPLY","runtime","requiresBootstrap","taskInstance","task","resetHard","disableReset","white","description","fn","params","PARAMS","withBase","platforms"],"mappings":"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","sourcesContent":["import { configurePlugins, overrideTemplatePlugins, resolvePluginDependants } from '../../core/pluginManager';\nimport { chalk, logTask, logInfo } from '../../core/systemManager/logger';\nimport { parseRenativeConfigs, fixRenativeConfigsSync,\n    checkIsRenativeProject, configureRuntimeDefaults, generateRuntimeConfig } from '../../core/configManager/configParser';\nimport { applyTemplate, checkIfTemplateConfigured, configureEntryPoints, configureTemplateFiles, isTemplateInstalled } from '../../core/templateManager';\nimport { fsExistsSync, fsMkdirSync } from '../../core/systemManager/fileutils';\nimport { checkCrypto } from '../../core/systemManager/crypto';\nimport { checkAndMigrateProject } from '../../core/projectManager/migrator';\nimport { TASK_INSTALL, TASK_PROJECT_CONFIGURE, TASK_TEMPLATE_APPLY, TASK_APP_CONFIGURE, TASK_WORKSPACE_CONFIGURE, PARAMS } from '../../core/constants';\nimport { checkAndCreateProjectPackage, copyRuntimeAssets, cleanPlaformAssets } from '../../core/projectManager/projectParser';\nimport { executeTask, initializeTask, findSuitableTask } from '../../core/engineManager';\n\n\nexport const taskRnvProjectConfigure = async (c, parentTask, originTask) => {\n    logTask('taskRnvProjectConfigure');\n\n    if (c.paths.project.builds.dir && !fsExistsSync(c.paths.project.builds.dir)) {\n        logInfo(`Creating folder ${c.paths.project.builds.dir} ...DONE`);\n        fsMkdirSync(c.paths.project.builds.dir);\n    }\n    await checkAndMigrateProject(c);\n    await parseRenativeConfigs(c);\n    await checkIsRenativeProject(c);\n    await checkAndCreateProjectPackage(c);\n    await executeTask(c, TASK_WORKSPACE_CONFIGURE, TASK_PROJECT_CONFIGURE, originTask);\n\n    if (c.program.only && !!parentTask) {\n        await configureRuntimeDefaults(c);\n        await executeTask(c, TASK_APP_CONFIGURE, TASK_PROJECT_CONFIGURE, originTask);\n        await generateRuntimeConfig(c);\n        return true;\n    }\n\n    await checkIfTemplateConfigured(c);\n    await executeTask(c, TASK_INSTALL, TASK_PROJECT_CONFIGURE, originTask);\n    await checkCrypto(c, parentTask, originTask);\n    await configureRuntimeDefaults(c);\n\n    if (originTask !== TASK_TEMPLATE_APPLY) {\n        if (c.runtime.requiresBootstrap || !isTemplateInstalled(c)) {\n            await applyTemplate(c);\n            // We'll have to install the template first and reset current engine\n            logInfo('Your template has been bootstraped. Command reset is required. RESTRATING...DONE');\n\n            const taskInstance = await findSuitableTask(c);\n            c.runtime.requiresBootstrap = false;\n            return initializeTask(c, taskInstance.task);\n        }\n        await applyTemplate(c);\n        await configureRuntimeDefaults(c);\n        await executeTask(c, TASK_INSTALL, TASK_PROJECT_CONFIGURE, originTask);\n        await executeTask(c, TASK_APP_CONFIGURE, TASK_PROJECT_CONFIGURE, originTask);\n        // IMPORTANT: configurePlugins must run after appConfig present to ensure merge of all configs/plugins\n        await resolvePluginDependants(c);\n        await configurePlugins(c);\n        await configureRuntimeDefaults(c);\n        if (c.program.resetHard && !c.runtime.disableReset) {\n            logInfo(\n                `You passed ${chalk().white('-R')} argument. \"${chalk().white('./platformAssets')}\" will be cleaned up first`\n            );\n\n            await cleanPlaformAssets(c);\n        }\n        await copyRuntimeAssets(c);\n        await configureTemplateFiles(c);\n        await fixRenativeConfigsSync(c);\n        await configureEntryPoints(c);\n        await generateRuntimeConfig(c);\n        await overrideTemplatePlugins(c);\n    }\n\n    return true;\n};\n\nexport default {\n    description: 'Configure current project',\n    fn: taskRnvProjectConfigure,\n    task: TASK_PROJECT_CONFIGURE,\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.project.configure.js"}