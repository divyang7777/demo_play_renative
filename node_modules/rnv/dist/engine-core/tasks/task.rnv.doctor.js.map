{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.doctor.js"],"names":["configTargets","taskRnvDoctor","c","parentTask","originTask","TASK_APP_CONFIGURE","configPaths","forEach","target","tPath","paths","Array","isArray","push","errMsg","hasErrors","cPath","cObj","valid","ajv","yellow","errors","err","grey","dataPath","message","Object","keys","params","map","k","red","join","green","length","description","fn","task","TASK_DOCTOR","PARAMS","withBase","platforms","isGlobalScope"],"mappings":"wcAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA,GAAMA,CAAAA,aAAa,CAAG;AAClB,kBADkB;AAElB,0BAFkB;AAGlB,6BAHkB;AAIlB,gBAJkB;AAKlB,mBALkB,CAAtB;;;AAQO,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AACzB,oBAAQ,eAAR,EADyB;;;AAInB,2CAAyBF,CAAzB,CAJmB;AAKnB,+BAAYA,CAAZ,CAAeG,6BAAf,CAAmCF,UAAnC,CAA+CC,UAA/C,CALmB;AAMnB,2CAAyBF,CAAzB,CANmB;;AAQnBI,WARmB,CAQL,EARK;;AAUzBN,aAAa,CAACO,OAAd,CAAsB,SAACC,MAAD,CAAY;AAC9B,GAAMC,CAAAA,KAAK,CAAG,oBAAKP,CAAC,CAACQ,KAAP,CAAcF,MAAd,CAAd;;AAEA,GAAIC,KAAJ,CAAW;AACP,GAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,CAA0B;AACtBH,WAAW,CAACO,IAAZ,OAAAP,WAAW,iCAASG,KAAT,EAAX;AACH,CAFD,IAEO;AACHH,WAAW,CAACO,IAAZ,CAAiBJ,KAAjB;AACH;AACJ;AACJ,CAVD;;AAYIK,MAtBqB,CAsBZ,0CAtBY;AAuBrBC,SAvBqB,CAuBT,KAvBS;AAwBzBT,WAAW,CAACC,OAAZ,CAAoB,SAACS,KAAD,CAAW;AAC3B,GAAI,4BAAaA,KAAb,CAAJ,CAAyB;AACrB,GAAMC,CAAAA,IAAI,CAAG,8BAAeD,KAAf,CAAb,CADqB;;AAGA,6CAA2BC,IAA3B,CAHA,6EAGdC,KAHc,2BAGPC,GAHO;AAIrB,GAAI,CAACD,KAAL,CAAY;AACRH,SAAS,CAAG,IAAZ;;AAEAD,MAAM,EAAI,oBAAQM,MAAR;;AAENJ,KAFM,iBAAV;AAGAG,GAAG,CAACE,MAAJ,CAAWd,OAAX,CAAmB,SAACe,GAAD,CAAS;AACxBR,MAAM,EAAI,oBAAQM,MAAR;AACN,oBAAQG,IAAR,CAAaD,GAAG,CAACE,QAAJ,GAAiB,EAAjB,CAAsB,GAAtB,CAA4BF,GAAG,CAACE,QAA7C,CADM,MACqDF,GAAG,CAACG,OADzD;AAENC,MAAM,CAACC,IAAP,CAAYL,GAAG,CAACM,MAAhB,EAAwBC,GAAxB,CAA4B,SAAAC,CAAC,cAAU,oBAAQC,GAAR,CAAYT,GAAG,CAACM,MAAJ,CAAWE,CAAX,CAAZ,CAAV,EAA7B,EAAqEE,IAArE,CAA0E,IAA1E,CAFM,MAAV;AAGH,CAJD;AAKH;AACJ;AACJ,CAlBD;;AAoBA,GAAI,CAACjB,SAAL,CAAgB;AACZD,MAAM,EAAI,oBAAQmB,KAAR,WAAwB3B,WAAW,CAAC4B,MAApC,UAAV;AACH;;;;;;;AAOD,yBAAapB,MAAb,EArDyB,sEAAtB,C;;;AAwDQ;AACXqB,WAAW,CAAE,mDADF;AAEXC,EAAE,CAAEnC,aAFO;AAGXoC,IAAI,CAAEC,sBAHK;AAIXV,MAAM,CAAEW,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ,C","sourcesContent":["import lGet from 'lodash.get';\nimport { chalk, logTask, logToSummary } from '../../core/systemManager/logger';\nimport { PARAMS, TASK_DOCTOR, TASK_APP_CONFIGURE } from '../../core/constants';\nimport { executeTask } from '../../core/engineManager';\nimport { configureRuntimeDefaults } from '../../core/configManager/configParser';\nimport { readObjectSync, fsExistsSync } from '../../core/systemManager/fileutils';\nimport {\n    validateRenativeJsonSchema,\n    // validateRuntimeObjectSchema\n} from '../../core/schemaManager/schemaParser';\n\nconst configTargets = [\n    'workspace.config',\n    'workspace.project.config',\n    'workspace.appConfig.configs',\n    'project.config',\n    'appConfig.configs'\n];\n\nexport const taskRnvDoctor = async (c, parentTask, originTask) => {\n    logTask('taskRnvDoctor');\n\n\n    await configureRuntimeDefaults(c);\n    await executeTask(c, TASK_APP_CONFIGURE, parentTask, originTask);\n    await configureRuntimeDefaults(c);\n\n    const configPaths = [];\n\n    configTargets.forEach((target) => {\n        const tPath = lGet(c.paths, target);\n\n        if (tPath) {\n            if (Array.isArray(tPath)) {\n                configPaths.push(...tPath);\n            } else {\n                configPaths.push(tPath);\n            }\n        }\n    });\n\n    let errMsg = 'RENATIVE JSON SCHEMA VALIDITY CHECK:\\n\\n';\n    let hasErrors = false;\n    configPaths.forEach((cPath) => {\n        if (fsExistsSync(cPath)) {\n            const cObj = readObjectSync(cPath);\n\n            const [valid, ajv] = validateRenativeJsonSchema(cObj);\n            if (!valid) {\n                hasErrors = true;\n                // console.log('ERROR', ajv.errors);\n                errMsg += chalk().yellow(`\\nInvalid schema in ${\n                    // cPath}. ISSUES: ${JSON.stringify(ajv.errors, null, 2)}\\n`);\n                    cPath}. ISSUES:\\n\\n`);\n                ajv.errors.forEach((err) => {\n                    errMsg += chalk().yellow(`${\n                        chalk().grey(err.dataPath === '' ? '/' : err.dataPath)}: ${err.message} ${\n                        Object.keys(err.params).map(k => `=> ${chalk().red(err.params[k])}`).join('\\n')}\\n`);\n                });\n            }\n        }\n    });\n\n    if (!hasErrors) {\n        errMsg += chalk().green(`PASSED ${configPaths.length} files`);\n    }\n\n    // const [valid, ajv] = validateRuntimeObjectSchema(c);\n    // if (!valid) {\n    //     console.log('ERROR', ajv.errors);\n    // }\n\n    logToSummary(errMsg);\n};\n\nexport default {\n    description: 'Checks validity and config health of your project',\n    fn: taskRnvDoctor,\n    task: TASK_DOCTOR,\n    params: PARAMS.withBase(),\n    platforms: [],\n    isGlobalScope: true\n};\n"],"file":"task.rnv.doctor.js"}