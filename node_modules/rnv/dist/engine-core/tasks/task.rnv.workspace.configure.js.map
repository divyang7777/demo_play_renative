{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.workspace.configure.js"],"names":["taskRnvWorkspaceConfigure","c","paths","workspace","dir","config","RENATIVE_CONFIG_NAME","oldGlobalConfigPath","path","join","rnv","files","JSON","parse","toString","appConfigsPath","white","project","appConfigsDir","defaultTargets","undefined","defaultConfig","newConfig","stringify","description","fn","task","params","PARAMS","withBase","platforms","skipPlatforms","isGlobalScope"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { RENATIVE_CONFIG_NAME, PARAMS } from '../../core/constants';\nimport {\n    copyFileSync,\n    mkdirSync,\n    fsWriteFileSync,\n    fsExistsSync,\n    fsReadFileSync\n} from '../../core/systemManager/fileutils';\nimport {\n    chalk,\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo\n} from '../../core/systemManager/logger';\n\nexport const taskRnvWorkspaceConfigure = async (c) => {\n    logTask('taskRnvWorkspaceConfigure');\n\n    // Check globalConfig Dir\n    if (fsExistsSync(c.paths.workspace.dir)) {\n        logDebug(`${c.paths.workspace.dir} folder exists!`);\n    } else {\n        logInfo(\n            `${c.paths.workspace.dir} folder missing! Creating one for you...`\n        );\n        mkdirSync(c.paths.workspace.dir);\n    }\n\n    // Check globalConfig\n    if (fsExistsSync(c.paths.workspace.config)) {\n        logDebug(\n            `${c.paths.workspace.dir}/${RENATIVE_CONFIG_NAME} file exists!`\n        );\n    } else {\n        const oldGlobalConfigPath = path.join(\n            c.paths.workspace.dir,\n            'config.json'\n        );\n        if (fsExistsSync(oldGlobalConfigPath)) {\n            logWarning(\n                'Found old version of your config. will copy it to new renative.json config'\n            );\n            copyFileSync(oldGlobalConfigPath, c.paths.workspace.config);\n        } else {\n            logInfo(\n                `${\n                    c.paths.workspace.dir\n                }/${RENATIVE_CONFIG_NAME} file missing! Creating one for you...`\n            );\n            copyFileSync(\n                path.join(\n                    c.paths.rnv.dir,\n                    'supportFiles',\n                    'global-config-template.json'\n                ),\n                c.paths.workspace.config\n            );\n        }\n    }\n\n    if (fsExistsSync(c.paths.workspace.config)) {\n        c.files.workspace.config = JSON.parse(\n            fsReadFileSync(c.paths.workspace.config).toString()\n        );\n\n        if (c.files.workspace.config?.appConfigsPath) {\n            if (!fsExistsSync(c.files.workspace.config.appConfigsPath)) {\n                logWarning(\n                    `Your custom global appConfig is pointing to ${chalk().white(\n                        c.files.workspace.config.appConfigsPath\n                    )} which doesn't exist! Make sure you create one in that location`\n                );\n            } else {\n                logInfo(\n                    `Found custom appConfing location pointing to ${chalk().white(\n                        c.files.workspace.config.appConfigsPath\n                    )}. ReNativewill now swith to that location!`\n                );\n                c.paths.project.appConfigsDir = c.files.workspace.config.appConfigsPath;\n            }\n        }\n\n        // Check config sanity\n        if (c.files.workspace.config.defaultTargets === undefined) {\n            logWarning(\n                `You're missing defaultTargets in your config ${chalk().white(\n                    c.paths.workspace.config\n                )}. Let's add them!`\n            );\n            const defaultConfig = JSON.parse(\n                fsReadFileSync(\n                    path.join(\n                        c.paths.rnv.dir,\n                        'supportFiles',\n                        'global-config-template.json'\n                    )\n                ).toString()\n            );\n            const newConfig = {\n                ...c.files.workspace.config,\n                defaultTargets: defaultConfig.defaultTargets\n            };\n            fsWriteFileSync(\n                c.paths.workspace.config,\n                JSON.stringify(newConfig, null, 2)\n            );\n        }\n    }\n\n    return true;\n};\n\nexport default {\n    description: '',\n    fn: taskRnvWorkspaceConfigure,\n    task: 'workspace configure',\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipPlatforms: true,\n    isGlobalScope: true\n};\n"],"file":"task.rnv.workspace.configure.js"}