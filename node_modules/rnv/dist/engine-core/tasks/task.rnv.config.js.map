{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.config.js"],"names":["taskRnvConfig","c","key","value","rows","Object","keys","configSchema","forEach","k","push","Config","listConfigValue","concat","setConfigValue","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"qRAAA;;AAEA;AACA;AACA;AACA;;AAEO,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAO;AAChC,oBAAQ,eAAR,EADgC;;AAGT,4BAAgBA,CAAhB,CAHS,mEAGvBC,GAHuB,sBAGlBC,KAHkB;AAIhC,GAAID,GAAG,GAAK,MAAZ,CAAoB;AAChB,GAAME,CAAAA,IAAI,CAAG,EAAb;AACAC,MAAM,CAACC,IAAP,CAAYC,uBAAZ,EAA0BC,OAA1B,CAAkC,SAAAC,CAAC,QAAIL,CAAAA,IAAI,CAACM,IAAL,CAAUC,gBAAOC,eAAP,CAAuBH,CAAvB,CAAV,CAAJ,EAAnC;;AAEA,oCAAW,UAAGI,MAAH,YAAaT,IAAb,CAAX;AACA,MAAO,KAAP;AACH;;;AAGD,GAAI,CAACF,GAAL,CAAU;;AAEN,uBAAW,yBAAX;AACA,MAAO,KAAP;AACH;AACD,GAAI,CAACK,wBAAaL,GAAb,CAAL,CAAwB;AACpB,yCAA6BA,GAA7B;AACA,MAAO,KAAP;AACH;;AAED,GAAI,CAACC,KAAL,CAAY;;AAER,oCAAWQ,gBAAOC,eAAP,CAAuBV,GAAvB,CAAX;AACH,CAHD,IAGO,IAAIS,gBAAOG,cAAP,CAAsBZ,GAAtB,CAA2BC,KAA3B,CAAJ,CAAuC,CAAE,oCAAWQ,gBAAOC,eAAP,CAAuBV,GAAvB,CAAX,EAA0C;;AAE1F,MAAO,KAAP;AACH,CA7BM,C;;AA+BQ;AACXa,WAAW,CAAE,6BADF;AAEXC,EAAE,CAAEhB,aAFO;AAGXiB,IAAI,CAAE,QAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import { printTable } from 'console-table-printer';\n\nimport { logWarning, logTask } from '../../core/systemManager/logger';\nimport { configSchema, PARAMS } from '../../core/constants';\nimport Config from '../../core/configManager/config';\nimport { getCliArguments } from '../../core/common';\n\nexport const taskRnvConfig = (c) => {\n    logTask('taskRnvConfig');\n\n    const [, key, value] = getCliArguments(c); // first arg is config so it's useless\n    if (key === 'list') {\n        const rows = [];\n        Object.keys(configSchema).forEach(k => rows.push(Config.listConfigValue(k)));\n\n        printTable([].concat(...rows));\n        return true;\n    }\n\n    // validate args\n    if (!key) {\n        // @todo add inquirer with list of options\n        logWarning('Please specify a config');\n        return true;\n    }\n    if (!configSchema[key]) {\n        logWarning(`Unknown config ${key}`);\n        return true;\n    }\n\n    if (!value) {\n        // list the value\n        printTable(Config.listConfigValue(key));\n    } else if (Config.setConfigValue(key, value)) { printTable(Config.listConfigValue(key)); }\n\n    return true;\n};\n\nexport default {\n    description: 'Edit or display RNV configs',\n    fn: taskRnvConfig,\n    task: 'config',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.config.js"}