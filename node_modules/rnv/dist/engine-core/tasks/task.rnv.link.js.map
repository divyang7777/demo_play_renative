{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.link.js"],"names":["taskRnvLink","c","paths","project","npmLinkPolyfill","l","JSON","parse","toString","Object","keys","forEach","key","source","path","resolve","nm","join","dest","description","fn","task","params","PARAMS","withBase","platforms","skipPlatforms"],"mappings":"sQAAA;AACA;AACA;AACA;AACA;;;;AAIO,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAOC,CAAP;AACvB,oBAAQ,aAAR;;AAEA,GAAI,4BAAaA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,eAA7B,CAAJ,CAAmD;AACzCC,CADyC,CACrCC,IAAI,CAACC,KAAL;AACN,8BAAeN,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,eAA/B,EAAgDI,QAAhD,EADM,CADqC;;AAI/CC,MAAM,CAACC,IAAP,CAAYL,CAAZ,EAAeM,OAAf,CAAuB,SAACC,GAAD,CAAS;AAC5B,GAAMC,CAAAA,MAAM,CAAGC,cAAKC,OAAL,CAAaV,CAAC,CAACO,GAAD,CAAd,CAAf;AACA,GAAMI,CAAAA,EAAE,CAAGF,cAAKG,IAAL,CAAUJ,MAAV,CAAkB,cAAlB,CAAX;AACA,GAAMK,CAAAA,IAAI,CAAG,uBAAUN,GAAV,CAAb;AACA,GAAI,4BAAaC,MAAb,CAAJ,CAA0B;AACtB,+CAAgCA,MAAhC,CAAwCK,IAAxC,CAA8C,KAA9C,CAAqD,CAACF,EAAD,CAArD;AACH,CAFD,IAEO;AACH,kCAAsBH,MAAtB;AACH;AACJ,CATD;AAUH,CAdD,IAcO;AACH;AACOZ,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,eADvB;;AAGH,CArBsB;AAsBhB,IAtBgB,uEAApB,C;;;AAyBQ;AACXe,WAAW,CAAE,EADF;AAEXC,EAAE,CAAEpB,WAFO;AAGXqB,IAAI,CAAE,MAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ,C","sourcesContent":["import path from 'path';\nimport { doResolve } from '../../core/resolve';\nimport { logWarning, logTask } from '../../core/systemManager/logger';\nimport { PARAMS } from '../../core/constants';\nimport {\n    copyFolderContentsRecursiveSync, fsExistsSync, fsReadFileSync\n} from '../../core/systemManager/fileutils';\n\nexport const taskRnvLink = async (c) => {\n    logTask('taskRnvLink');\n\n    if (fsExistsSync(c.paths.project.npmLinkPolyfill)) {\n        const l = JSON.parse(\n            fsReadFileSync(c.paths.project.npmLinkPolyfill).toString()\n        );\n        Object.keys(l).forEach((key) => {\n            const source = path.resolve(l[key]);\n            const nm = path.join(source, 'node_modules');\n            const dest = doResolve(key);\n            if (fsExistsSync(source)) {\n                copyFolderContentsRecursiveSync(source, dest, false, [nm]);\n            } else {\n                logWarning(`Source: ${source} doesn't exists!`);\n            }\n        });\n    } else {\n        logWarning(\n            `${c.paths.project.npmLinkPolyfill} file not found. nothing to link!`\n        );\n    }\n    return true;\n};\n\nexport default {\n    description: '',\n    fn: taskRnvLink,\n    task: 'link',\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipPlatforms: true,\n};\n"],"file":"task.rnv.link.js"}