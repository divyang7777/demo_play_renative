{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.template.apply.js"],"names":["taskRnvTemplateApply","c","parentTask","originTask","program","template","TASK_PROJECT_CONFIGURE","TASK_TEMPLATE_APPLY","appConfigID","TASK_APP_CONFIGURE","opts","inquirer","prompt","type","message","name","choices","keysAsArray","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"+QAAA;AACA;AACA;AACA;AACA;;AAEO,GAAMA,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AAChC,oBAAQ,sBAAR,cAA6CF,CAAC,CAACG,OAAF,CAAUC,QAAvD,EADgC;;AAG1B,+BAAYJ,CAAZ,CAAeK,iCAAf,CAAuCC,8BAAvC,CAA4DJ,UAA5D,CAH0B;;AAK5BF,CAAC,CAACG,OAAF,CAAUC,QALkB;AAMtB,mCAAcJ,CAAd,CAAiBA,CAAC,CAACG,OAAF,CAAUC,QAA3B,CANsB;AAOxBJ,CAAC,CAACG,OAAF,CAAUI,WAPc;AAQlB,+BAAYP,CAAZ,CAAeQ,6BAAf,CAAmCF,8BAAnC,CAAwDJ,UAAxD,CARkB;;;AAWrB,IAXqB;;AAa1BO,IAb0B,CAanB,iDAA4BT,CAA5B,CAbmB;;AAeLU,kBAASC,MAAT,CAAgB;AACvCC,IAAI,CAAE,MADiC;AAEvCC,OAAO,CAAE,gCAF8B;AAGvCC,IAAI,CAAE,UAHiC;AAIvCC,OAAO,CAAEN,IAAI,CAACO,WAJyB,CAAhB,CAfK,8CAexBZ,QAfwB,uBAexBA,QAfwB;;;AAsB1B,mCAAcJ,CAAd,CAAiBI,QAAjB,CAtB0B;AAuB5BJ,CAAC,CAACG,OAAF,CAAUI,WAvBkB;AAwBtB,+BAAYP,CAAZ,CAAeQ,6BAAf,CAAmCF,8BAAnC,CAAwDJ,UAAxD,CAxBsB;;AA0BzB,IA1ByB,wEAA7B,C;;;AA6BQ;AACXe,WAAW,CAAE,oCADF;AAEXC,EAAE,CAAEnB,oBAFO;AAGXoB,IAAI,CAAE,gBAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import inquirer from 'inquirer';\nimport { logTask } from '../../core/systemManager/logger';\nimport { applyTemplate, getInstalledTemplateOptions } from '../../core/templateManager';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_TEMPLATE_APPLY, TASK_PROJECT_CONFIGURE, TASK_APP_CONFIGURE, PARAMS } from '../../core/constants';\n\nexport const taskRnvTemplateApply = async (c, parentTask, originTask) => {\n    logTask('taskRnvTemplateApply', `template: ${c.program.template}`);\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_TEMPLATE_APPLY, originTask);\n\n    if (c.program.template) {\n        await applyTemplate(c, c.program.template);\n        if (c.program.appConfigID) {\n            await executeTask(c, TASK_APP_CONFIGURE, TASK_TEMPLATE_APPLY, originTask);\n        }\n\n        return true;\n    }\n    const opts = getInstalledTemplateOptions(c);\n\n    const { template } = await inquirer.prompt({\n        type: 'list',\n        message: 'Pick which template to install',\n        name: 'template',\n        choices: opts.keysAsArray\n    });\n\n    await applyTemplate(c, template);\n    if (c.program.appConfigID) {\n        await executeTask(c, TASK_APP_CONFIGURE, TASK_TEMPLATE_APPLY, originTask);\n    }\n    return true;\n};\n\nexport default {\n    description: 'Reset project to specific template',\n    fn: taskRnvTemplateApply,\n    task: 'template apply',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.template.apply.js"}