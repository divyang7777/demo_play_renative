{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.crypto.decrypt.js"],"names":["iocane","require","_unzipAndCopy","c","shouldCleanFolder","destTemp","wsPath","ts","destFolder","tar","x","file","cwd","paths","workspace","dir","path","join","files","project","package","name","taskRnvCryptoDecrypt","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_CRYPTO_DECRYPT","sourceRaw","config","crypto","decrypt","source","replace","envVar","isCryptoReset","command","program","reset","ci","options","type","choices","message","white","option","confirm","key","process","env","Promise","reject","createSession","use","data","includes","err","green","yellow","stack","appConfigBase","description","fn","task","params","PARAMS","withBase","platforms","skipPlatforms"],"mappings":"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","sourcesContent":["import path from 'path';\nimport tar from 'tar';\nimport {\n    chalk,\n    logWarning,\n    logTask,\n    logSuccess,\n} from '../../core/systemManager/logger';\nimport {\n    getRealPath,\n    removeFilesSync,\n    copyFileSync,\n    fsWriteFileSync,\n    cleanFolder,\n    fsExistsSync,\n    fsReadFileSync\n} from '../../core/systemManager/fileutils';\nimport { inquirerPrompt } from '../../cli/prompt';\nimport { getEnvVar, getEnvExportCmd } from '../../core/systemManager/crypto';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_CRYPTO_DECRYPT, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\n\n\nconst iocane = require('iocane');\n\nconst _unzipAndCopy = async (\n    c,\n    shouldCleanFolder,\n    destTemp,\n    wsPath,\n    ts,\n    destFolder\n) => {\n    if (shouldCleanFolder) {\n        await cleanFolder(wsPath);\n    }\n\n    await tar.x({\n        file: destTemp,\n        cwd: c.paths.workspace.dir\n    });\n\n    removeFilesSync([destTemp]);\n    if (fsExistsSync(ts)) {\n        copyFileSync(\n            ts,\n            path.join(\n                c.paths.workspace.dir,\n                c.files.project.package.name,\n                'timestamp'\n            )\n        );\n    }\n    logSuccess(`Files succesfully extracted into ${destFolder}`);\n};\n\nexport const taskRnvCryptoDecrypt = async (c, parentTask, originTask) => {\n    logTask('taskRnvCryptoDecrypt');\n\n    if (!parentTask) {\n        await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_CRYPTO_DECRYPT, originTask);\n    }\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n\n    if (sourceRaw) {\n        const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n        const ts = `${source}.timestamp`;\n        const destFolder = path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name\n        );\n        const destTemp = `${path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name.replace('/', '-')\n        )}.tgz`;\n        const envVar = getEnvVar(c);\n        let shouldCleanFolder = false;\n        const wsPath = path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name\n        );\n        const isCryptoReset = c.command === 'crypto' && c.program.reset === true;\n\n        if (c.program.ci !== true && !isCryptoReset) {\n            const options = [\n                'Yes - override (recommended)',\n                'Yes - merge',\n                'Skip'\n            ];\n            const { option } = await inquirerPrompt({\n                name: 'option',\n                type: 'list',\n                choices: options,\n                message: `How to decrypt to ${chalk().white(destFolder)} ?`\n            });\n            if (option === options[0]) {\n                shouldCleanFolder = true;\n            } else if (option === options[2]) {\n                return true;\n            }\n        } else {\n            shouldCleanFolder = true;\n        }\n\n        if (fsExistsSync(destTemp)) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message: `Found existing decrypted file at ${chalk().white(\n                    destTemp\n                )}. want to use it and skip decrypt ?`\n            });\n            if (confirm) {\n                await _unzipAndCopy(\n                    c,\n                    shouldCleanFolder,\n                    destTemp,\n                    wsPath,\n                    ts,\n                    destFolder\n                );\n                return true;\n            }\n        }\n\n        const key = c.program.key || c.process.env[envVar];\n        if (!key) {\n            return Promise.reject(`encrypt: You must pass ${chalk().white(\n                '--key'\n            )} or have env var defined:\n\n${getEnvExportCmd(envVar, 'REPLACE_WITH_ENV_VARIABLE')}\n\n`);\n        }\n        if (!fsExistsSync(source)) {\n            return Promise.reject(\n                `Can't decrypt. ${chalk().white(source)} is missing!`\n            );\n        }\n\n        let data;\n        try {\n            data = await iocane.createSession()\n                .use('cbc')\n                .decrypt(fsReadFileSync(source), key);\n        } catch (e) {\n            if (e?.message?.includes) {\n                if (e.message.includes('Signature mismatch')) {\n                    const err = `You're trying to decode crypto file encoded with previous version of crypto.\nthis change was introduced in \"rnv@0.29.0\"\n\n${e}\n\n      ${chalk().green('SUGGESTION:')}\n\n      ${chalk().yellow('STEP 1:')}\n      run: ${chalk().white('rnv crypto encrypt')} locally at least once and commit the result back to your repository\n\n      ${chalk().yellow('STEP 2:')}\n      you should be able to use: ${chalk().white('rnv crypto decrypt')} properly now\n\n      ${chalk().yellow('IF ALL HOPE IS LOST:')}\n      Raise new issue and copy this SUMMARY box output at:\n      ${chalk().white('https://github.com/pavjacko/renative/issues')}\n      and we will try to help!\n\n      `;\n\n                    return Promise.reject(err);\n                } if (e.message.includes('Authentication failed')) {\n                    return Promise.reject(`It seems like you provided invalid decryption key.\n\n${e.stack}\n\n${chalk().green('SUGGESTION:')}\n\n${chalk().yellow('STEP 1:')}\ncheck if your ENV VAR is correct: ${getEnvExportCmd(envVar, '***********')}\nor if someone did not encrypt ${chalk().white(source)} with a different key\n\n${chalk().yellow('STEP 2:')}\nrun crypto decrypt again\n\n${chalk().yellow('IF ALL HOPE IS LOST:')}\nRaise new issue and copy this SUMMARY box output at:\n${chalk().white('https://github.com/pavjacko/renative/issues')}\nand we will try to help!\n\n`);\n                }\n            }\n\n            return Promise.reject(e);\n        }\n\n\n        fsWriteFileSync(destTemp, data);\n\n        //         try {\n        //             await executeAsync(\n        //                 c,\n        //                 `${_getOpenSllPath(\n        //                     c\n        //                 )} enc -aes-256-cbc -md md5 -d -in ${source} -out ${destTemp} -k ${key}`,\n        //                 { privateParams: [key] }\n        //             );\n        //         } catch (e) {\n        //             const cmd1 = chalk().white(\n        //                 `openssl enc -aes-256-cbc -md md5 -d -in ${source} -out ${destTemp} -k $${envVar}`\n        //             );\n        //             return Promise.reject(`${e}\n\n        // ${chalk().green('SUGGESTION:')}\n\n        // ${chalk().yellow('STEP 1:')}\n        // ${cmd1}\n\n        // ${chalk().yellow('STEP 2:')}\n        // ${chalk().white(\n        //         'run your previous command again and choose to skip openssl once asked'\n        //     )}`);\n        //         }\n\n        await _unzipAndCopy(\n            c,\n            shouldCleanFolder,\n            destTemp,\n            wsPath,\n            ts,\n            destFolder\n        );\n    } else {\n        logWarning(\n            `You don't have {{ crypto.encrypt.dest }} specificed in ${chalk().white(\n                c.paths.appConfigBase\n            )}`\n        );\n        return true;\n    }\n};\n\nexport default {\n    description: 'Decrypt encrypted project files into local ~/<wokspace>/<project>/..',\n    fn: taskRnvCryptoDecrypt,\n    task: TASK_CRYPTO_DECRYPT,\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipPlatforms: true,\n};\n"],"file":"task.rnv.crypto.decrypt.js"}