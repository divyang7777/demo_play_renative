{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.hooks.list.js"],"names":["taskRnvHooksList","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_HOOKS_LIST","buildHooks","hookOpts","hooksAsString","asString","buildPipes","pipeOpts","Promise","reject","description","fn","task","params","PARAMS","withBase","platforms","skipAppConfig","skipPlatforms"],"mappings":"2QAAA;AACA;AACA;AACA;AACA;;;AAGO,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAOC,CAAP,CAAUC,UAAV,CAAsBC,UAAtB;AAC5B,oBAAQ,kBAAR,EAD4B;;AAGtB,+BAAYF,CAAZ,CAAeG,iCAAf,CAAuCC,0BAAvC,CAAwDF,UAAxD,CAHsB;;AAKtB,2BAAWF,CAAX,CALsB;;AAOxBA,CAAC,CAACK,UAPsB;AAQlBC,QARkB,CAQP,4BAAgBN,CAAC,CAACK,UAAlB,CARO;AASpBE,aAToB,MASC,QATD,MAScD,QAAQ,CAACE,QATvB;;AAWxB,GAAIR,CAAC,CAACS,UAAN,CAAkB;AACRC,QADQ,CACG,4BAAgBV,CAAC,CAACS,UAAlB,CADH;AAEdF,aAAa,OAAS,QAAT,MAAsBG,QAAQ,CAACF,QAA5C;AACH;AACD,yBAAaD,aAAb,EAfwB;AAgBjB,IAhBiB;;AAkBrBI,OAAO,CAACC,MAAR,CAAe,kCAAf,CAlBqB,wEAAzB,C;;;AAqBQ;AACXC,WAAW,CAAE,iCADF;AAEXC,EAAE,CAAEf,gBAFO;AAGXgB,IAAI,CAAEX,0BAHK;AAIXY,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA;AAMXC,aAAa,CAAE,IANJ;AAOXC,aAAa,CAAE,IAPJ,C","sourcesContent":["import { logToSummary, logTask } from '../../core/systemManager/logger';\nimport { generateOptions } from '../../cli/prompt';\nimport { buildHooks } from '../../core/projectManager/buildHooks';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_HOOKS_LIST, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\n\n\nexport const taskRnvHooksList = async (c, parentTask, originTask) => {\n    logTask('taskRnvHooksList');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_HOOKS_LIST, originTask);\n\n    await buildHooks(c);\n\n    if (c.buildHooks) {\n        const hookOpts = generateOptions(c.buildHooks);\n        let hooksAsString = `\\n${'Hooks:'}\\n${hookOpts.asString}`;\n\n        if (c.buildPipes) {\n            const pipeOpts = generateOptions(c.buildPipes);\n            hooksAsString += `\\n${'Pipes:'}\\n${pipeOpts.asString}`;\n        }\n        logToSummary(hooksAsString);\n        return true;\n    }\n    return Promise.reject('Your buildHooks object is empty!');\n};\n\nexport default {\n    description: 'Get list of all available hooks',\n    fn: taskRnvHooksList,\n    task: TASK_HOOKS_LIST,\n    params: PARAMS.withBase(),\n    platforms: [],\n    skipAppConfig: true,\n    skipPlatforms: true\n};\n"],"file":"task.rnv.hooks.list.js"}