{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.template.add.js"],"names":["_writeObjectSync","c","p","s","_addTemplate","template","files","project","config","templates","version","paths","taskRnvTemplateAdd","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_TEMPLATE_ADD","opts","inquirer","prompt","type","message","name","choices","keysAsArray","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"kSAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAa;AAClC,6BAAcD,CAAd,CAAiBC,CAAjB;AACA,sCAAoBF,CAApB;AACH,CAHD;;AAKO,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACH,CAAD,CAAII,QAAJ,CAAiB;AACzC,oBAAQ,aAAR;;AAEAJ,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAmCR,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,SAAvB,EAAoC,EAAvE;;AAEA,GAAI,CAACR,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiCJ,QAAjC,CAAL,CAAiD;AAC7CJ,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiCJ,QAAjC,EAA6C;AACzCK,OAAO,CAAE,QADgC,CAA7C;;AAGH;;AAEDV,gBAAgB,CAACC,CAAD,CAAIA,CAAC,CAACU,KAAF,CAAQJ,OAAR,CAAgBC,MAApB,CAA4BP,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgBC,MAA5C,CAAhB;AACH,CAZM,C;;AAcA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAOX,CAAP,CAAUY,UAAV,CAAsBC,UAAtB;AAC9B,oBAAQ,oBAAR,EAD8B;;AAGxB,+BAAYb,CAAZ,CAAec,iCAAf,CAAuCC,4BAAvC,CAA0DF,UAA1D,CAHwB;;AAKxBG,IALwB,CAKjB,wCAAmBhB,CAAnB,CALiB;;AAOHiB,kBAASC,MAAT,CAAgB;AACvCC,IAAI,CAAE,MADiC;AAEvCC,OAAO,CAAE,gCAF8B;AAGvCC,IAAI,CAAE,UAHiC;AAIvCC,OAAO,CAAEN,IAAI,CAACO,WAJyB,CAAhB,CAPG,6CAOtBnB,QAPsB,uBAOtBA,QAPsB;;;AAc9BD,YAAY,CAACH,CAAD,CAAII,QAAJ,CAAZ,CAd8B,qEAA3B,C;;;AAiBQ;AACXoB,WAAW,CAAE,4CADF;AAEXC,EAAE,CAAEd,kBAFO;AAGXe,IAAI,CAAE,cAHK;AAIXC,MAAM,CAAEC,kBAAOC,QAAP,EAJG;AAKXC,SAAS,CAAE,EALA,C","sourcesContent":["import inquirer from 'inquirer';\nimport { writeFileSync } from '../../core/systemManager/fileutils';\nimport { logTask } from '../../core/systemManager/logger';\nimport { generateBuildConfig } from '../../core/configManager/configParser';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_PROJECT_CONFIGURE, TASK_TEMPLATE_ADD, PARAMS } from '../../core/constants';\n\nimport { getTemplateOptions } from '../../core/templateManager';\n\nconst _writeObjectSync = (c, p, s) => {\n    writeFileSync(p, s);\n    generateBuildConfig(c);\n};\n\nexport const _addTemplate = (c, template) => {\n    logTask('addTemplate');\n\n    c.files.project.config.templates = c.files.project.config.templates || {};\n\n    if (!c.files.project.config.templates[template]) {\n        c.files.project.config.templates[template] = {\n            version: 'latest'\n        };\n    }\n\n    _writeObjectSync(c, c.paths.project.config, c.files.project.config);\n};\n\nexport const taskRnvTemplateAdd = async (c, parentTask, originTask) => {\n    logTask('taskRnvTemplateAdd');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_TEMPLATE_ADD, originTask);\n\n    const opts = getTemplateOptions(c);\n\n    const { template } = await inquirer.prompt({\n        type: 'list',\n        message: 'Pick which template to install',\n        name: 'template',\n        choices: opts.keysAsArray\n    });\n\n    _addTemplate(c, template);\n};\n\nexport default {\n    description: 'Install additional template to the project',\n    fn: taskRnvTemplateAdd,\n    task: 'template add',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.template.add.js"}