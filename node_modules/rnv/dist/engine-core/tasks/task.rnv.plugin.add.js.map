{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.plugin.add.js"],"names":["taskRnvPluginAdd","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_PLUGIN_ADD","runtime","isWrapper","Promise","reject","selPluginKey","program","rawArgs","o","selPlugin","allPlugins","selectedPlugins","installMessage","inquirer","prompt","name","type","message","choices","asArray","pageSize","plugin","push","white","green","version","questionPlugins","Object","keys","forEach","key","props","files","project","config","plugins","pluginKeys","i","length","pluginKey","pluginProps","finalProps","i2","propValue","spinner","join","start","paths","TASK_INSTALL","succeed","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"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","sourcesContent":["import inquirer from 'inquirer';\nimport ora from 'ora';\nimport { writeRenativeConfigFile } from '../../core/configManager/configParser';\nimport { TASK_INSTALL, TASK_PLUGIN_ADD, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\nimport {\n    chalk,\n    logSuccess,\n    logTask\n} from '../../core/systemManager/logger';\nimport { getPluginList, resolvePluginDependants } from '../../core/pluginManager';\nimport { executeTask } from '../../core/engineManager';\n\n\n/* eslint-disable no-await-in-loop */\nexport const taskRnvPluginAdd = async (c, parentTask, originTask) => {\n    logTask('taskRnvPluginAdd');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_PLUGIN_ADD, originTask);\n\n    if (c.runtime.isWrapper) {\n        return Promise.reject('Adding plugins in wrapper project is not supported.');\n    }\n\n    const selPluginKey = c.program.rawArgs[4];\n\n    const o = getPluginList(c);\n\n    const selPlugin = selPluginKey && o.allPlugins[selPluginKey];\n    const selectedPlugins = {};\n    const installMessage = [];\n\n    if (!selPlugin) {\n        const { plugin } = await inquirer.prompt({\n            name: 'plugin',\n            type: 'rawlist',\n            message: 'Select the plugins you want to add',\n            choices: o.asArray,\n            pageSize: 50\n        });\n\n        selectedPlugins[plugin] = o.allPlugins[plugin];\n        installMessage.push(\n            `${chalk().white(plugin)} v(${chalk().green(\n                o.allPlugins[plugin].version\n            )})`\n        );\n    } else {\n        selectedPlugins[selPluginKey] = selPlugin;\n        installMessage.push(\n            `${chalk().white(selPluginKey)} v(${chalk().green(selPlugin.version)})`\n        );\n    }\n\n    const questionPlugins = {};\n\n    Object.keys(selectedPlugins).forEach((key) => {\n        // c.buildConfig.plugins[key] = 'source:rnv';\n        const plugin = selectedPlugins[key];\n        if (plugin.props) questionPlugins[key] = plugin;\n\n        c.files.project.config.plugins[key] = 'source:rnv';\n\n        // c.buildConfig.plugins[key] = selectedPlugins[key];\n    });\n\n    const pluginKeys = Object.keys(questionPlugins);\n    for (let i = 0; i < pluginKeys.length; i++) {\n        const pluginKey = pluginKeys[i];\n        const plugin = questionPlugins[pluginKey];\n        const pluginProps = Object.keys(plugin.props);\n        const finalProps = {};\n        for (let i2 = 0; i2 < pluginProps.length; i2++) {\n            const { propValue } = await inquirer.prompt({\n                name: 'propValue',\n                type: 'input',\n                message: `${pluginKey}: Add value for ${\n                    pluginProps[i2]\n                } (You can do this later in ./renative.json file)`\n            });\n            finalProps[pluginProps[i2]] = propValue;\n        }\n        c.files.project.config.plugins[pluginKey] = {};\n        c.files.project.config.plugins[pluginKey].props = finalProps;\n    }\n\n    const spinner = ora(`Installing: ${installMessage.join(', ')}`).start();\n\n    writeRenativeConfigFile(c, c.paths.project.config, c.files.project.config);\n\n    await resolvePluginDependants(c);\n\n    await executeTask(c, TASK_INSTALL, TASK_PLUGIN_ADD, originTask);\n\n    spinner.succeed('All plugins installed!');\n    logSuccess('Plugins installed successfully!');\n    return true;\n};\n\nexport default {\n    description: 'Add selected plugin to the project',\n    fn: taskRnvPluginAdd,\n    task: 'plugin add',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.plugin.add.js"}