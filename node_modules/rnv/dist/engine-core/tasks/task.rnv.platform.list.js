var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.taskRnvPlatformList=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _logger=require("../../core/systemManager/logger");

var _platformManager=require("../../core/platformManager");
var _engineManager=require("../../core/engineManager");
var _constants=require("../../core/constants");

var taskRnvPlatformList=function taskRnvPlatformList(c,parentTask,originTask){var opts;return _regenerator.default.async(function taskRnvPlatformList$(_context){while(1){switch(_context.prev=_context.next){case 0:
(0,_logger.logTask)('taskRnvPlatformList');_context.next=3;return _regenerator.default.awrap(

(0,_engineManager.executeTask)(c,_constants.TASK_PROJECT_CONFIGURE,_constants.TASK_PLATFORM_LIST,originTask));case 3:

opts=(0,_platformManager.generatePlatformChoices)(c).map(function(v,i){return" ["+(0,_logger.chalk)().white(i+1)+"]> "+v.name;});
(0,_logger.logToSummary)("Platforms:\n\n"+opts.join('\n'));return _context.abrupt("return",
true);case 6:case"end":return _context.stop();}}},null,null,null,Promise);};exports.taskRnvPlatformList=taskRnvPlatformList;var _default=


{
description:'List all available platforms',
fn:taskRnvPlatformList,
task:'platform list',
params:_constants.PARAMS.withBase(),
platforms:[],
skipPlatforms:true};exports.default=_default;
//# sourceMappingURL=task.rnv.platform.list.js.map