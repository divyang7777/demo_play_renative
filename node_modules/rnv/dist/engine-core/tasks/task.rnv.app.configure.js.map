{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.app.configure.js"],"names":["readdirAsync","fsReaddir","_loadAppConfigIDfromDir","dir","appConfigsDir","grey","filePath","path","join","renativeConf","JSON","parse","id","e","_askUserAboutConfigs","c","basePath","program","ci","Error","inquirer","prompt","type","name","message","choices","value","Separator","choice","conf","fileContents","matchAppConfigID","appConfigID","appConfigsDirs","buildConfig","paths","project","i","filter","folder","isDirectory","appConfigDirContents","appConfigs","map","ids","dirs","Promise","all","_conf","confId","includes","push","foundConfig","cfg","length","_findAndSwitchAppConfigDir","appConfigsDirNames","white","_setAppId","pageSize","logMessage","appId","currentAppConfigId","files","configLocal","_meta","runtime","appDir","builds","platform","taskRnvAppConfigure","forEach","dirName","hasAppConfig","reject","aid","description","fn","task","TASK_APP_CONFIGURE","params","PARAMS","withBase","withConfigure","platforms"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { promisify } from 'util';\nimport inquirer from 'inquirer';\nimport { parseRenativeConfigs, listAppConfigsFoldersSync } from '../../core/configManager/configParser';\nimport { TASK_APP_CONFIGURE, PARAMS } from '../../core/constants';\nimport {\n    writeFileSync,\n    fsExistsSync,\n    fsReaddir,\n    fsReadFileSync,\n    fsRenameSync,\n    fsStatSync,\n} from '../../core/systemManager/fileutils';\nimport {\n    chalk,\n    logError,\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo,\n    logAppInfo,\n} from '../../core/systemManager/logger';\nimport { inquirerPrompt } from '../../cli/prompt';\n\nconst readdirAsync = promisify(fsReaddir);\n\n\nconst _loadAppConfigIDfromDir = (dir, appConfigsDir) => {\n    logDebug(`_loadAppConfigIDfromDir:${dir}:${appConfigsDir}`, chalk().grey);\n    const filePath = path.join(appConfigsDir, dir, 'renative.json');\n    if (fsExistsSync(filePath)) {\n        try {\n            const renativeConf = JSON.parse(fsReadFileSync(filePath));\n            return { dir, id: renativeConf.id };\n        } catch (e) {\n            logError(`File ${filePath} is MALFORMED:\\n${e}`);\n        }\n    }\n    return { dir, id: null };\n};\n\nconst _askUserAboutConfigs = async (c, dir, id, basePath) => {\n    logTask('_askUserAboutConfigs');\n    logWarning(\n        `AppConfig error - It seems you have a mismatch between appConfig folder name (${\n            dir\n        }) and the id defined in renative.json (${id}). They must match.`\n    );\n    if (c.program.ci === true) {\n        throw new Error(\n            'You cannot continue if you set --ci flag. please fix above error first'\n        );\n    }\n    const { choice } = await inquirer.prompt({\n        type: 'list',\n        name: 'choice',\n        message: 'You must choose what you want to keep',\n        choices: [\n            {\n                name: `Keep ID from renative.json (${id}) and rename the folder (${dir} -> ${id})`,\n                value: 'keepID'\n            },\n            {\n                name: `Keep folder name (${dir}) and rename the ID from renative.json (${id} -> ${dir})`,\n                value: 'keepFolder'\n            },\n            new inquirer.Separator(),\n            {\n                name: \"I'll do it manually\",\n                value: 'manually'\n            }\n        ]\n    });\n\n    if (choice === 'manually') {\n        throw new Error('Please do the changes and rerun the command');\n    }\n\n    const conf = { id, dir };\n\n    if (choice === 'keepID') {\n        conf.dir = path.join(basePath, id);\n        fsRenameSync(path.join(basePath, dir), conf.dir);\n    }\n\n    if (choice === 'keepFolder') {\n        const filePath = path.join(basePath, dir, 'renative.json');\n        const fileContents = JSON.parse(fsReadFileSync(filePath));\n        fileContents.id = dir;\n        conf.id = dir;\n\n        writeFileSync(filePath, fileContents);\n    }\n\n    return conf;\n};\n\n/* eslint-disable no-await-in-loop */\nconst matchAppConfigID = async (c, appConfigID) => {\n    logTask('matchAppConfigID', `appId:${appConfigID}`);\n\n    if (!appConfigID) return false;\n\n    const appConfigsDirs = c.buildConfig?.paths?.appConfigsDirs || [\n        c.paths.project?.appConfigsDir\n    ];\n\n\n    for (let i = 0; i < appConfigsDirs.length; i++) {\n        const appConfigsDir = appConfigsDirs[i];\n        if (fsExistsSync(appConfigsDir)) {\n            const appConfigDirContents = await (await readdirAsync(\n                appConfigsDir\n            )).filter(folder => fsStatSync(path.join(appConfigsDir, folder)).isDirectory());\n\n            const appConfigs = appConfigDirContents\n                .map(dir => _loadAppConfigIDfromDir(dir, appConfigsDir))\n                .filter(conf => conf.id !== null);\n            // find duplicates\n            const ids = [];\n            const dirs = [];\n            let confId;\n            await Promise.all(\n                appConfigs.map(async (_conf) => {\n                    let conf = _conf;\n                    confId = conf.id;\n                    const { dir } = conf;\n                    // find mismatches\n                    if (confId !== dir) {\n                        conf = await _askUserAboutConfigs(\n                            c,\n                            conf.dir,\n                            conf.id,\n                            appConfigsDir\n                        );\n                    }\n                    confId = conf.id;\n                    if (ids.includes(confId)) {\n                        throw new Error(\n                            `AppConfig error - You have 2 duplicate app configs with ID ${\n                                confId\n                            }. Keep in mind that ID is case insensitive.\nPlease edit one of them in /appConfigs/<folder>/renative.json`\n                        );\n                    }\n                    ids.push(confId);\n                    if (dirs.includes(dir)) {\n                        throw new Error(\n                            `AppConfig error - You have 2 duplicate app config folders named ${\n                                dir\n                            }. Keep in mind that folder names are case insensitive.\nPlease rename one /appConfigs/<folder>`\n                        );\n                    }\n                    dirs.push(dir);\n                })\n            );\n\n            const foundConfig = appConfigs.filter(\n                cfg => cfg.id === appConfigID || cfg.dir === appConfigID\n            );\n            if (foundConfig.length) return foundConfig[0].id;\n        }\n    }\n    return false;\n};\n\nconst _findAndSwitchAppConfigDir = async (c) => {\n    logTask('_findAndSwitchAppConfigDir');\n    const { appConfigsDirNames } = c.paths.project;\n    if (appConfigsDirNames.length) {\n        if (appConfigsDirNames.length === 1) {\n            // we have only one, skip the question\n            logInfo(\n                `Found only one app config available. Will use ${chalk().white(\n                    appConfigsDirNames[0]\n                )}`\n            );\n            _setAppId(c, appConfigsDirNames[0]);\n            return true;\n        }\n\n        const { conf } = await inquirerPrompt({\n            name: 'conf',\n            type: 'list',\n            message: 'Which one would you like to pick?',\n            choices: appConfigsDirNames,\n            pageSize: 50,\n            logMessage: 'ReNative found multiple existing appConfigs'\n        });\n\n        if (conf) {\n            _setAppId(c, conf);\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst _setAppId = (c, appId) => {\n    const currentAppConfigId = c.files.project?.configLocal?._meta?.currentAppConfigId;\n\n    logTask('_setAppId', `appId:${appId} runtime.appId:${c.runtime.appId} _meta.appId:${currentAppConfigId}`);\n    c.runtime.appId = appId || c.runtime.appId || currentAppConfigId;\n    c.runtime.appDir = path.join(c.paths.project.builds.dir, `${c.runtime.appId}_${c.platform}`);\n};\n\nexport const taskRnvAppConfigure = async (c) => {\n    logTask('taskRnvAppConfigure');\n\n    c.paths.project.appConfigsDirNames = listAppConfigsFoldersSync(c, true);\n    c.paths.project.appConfigsDirNames.forEach((dirName) => {\n        c.paths.project.appConfigsDirs.push(path.join(c.paths.project.appConfigsDir, dirName));\n    });\n\n    // Reset appId if appConfig no longer exists but renative.local.json still has reference to it\n    if (!c.paths.project.appConfigsDirNames.includes(c.runtime.appId)) {\n        c.runtime.appId = null;\n    }\n\n\n    if (c.program.appConfigID === true || (!c.program.appConfigID && !c.runtime.appId)) {\n        const hasAppConfig = await _findAndSwitchAppConfigDir(c);\n        if (!hasAppConfig) {\n            // await executeTask(c, TASK_APP_CREATE, TASK_APP_CONFIGURE);\n            return Promise.reject('No app configs found for this project');\n        }\n    } else if (c.program.appConfigID) {\n        const aid = await matchAppConfigID(c, c.program.appConfigID);\n        if (!aid) {\n            logWarning(`Cannot find app config ${chalk().white(c.program.appConfigID)}`);\n            const hasAppConfig = await _findAndSwitchAppConfigDir(c);\n            if (!hasAppConfig) {\n                // await executeTask(c, TASK_APP_CREATE, TASK_APP_CONFIGURE);\n                return Promise.reject('No app configs found for this project');\n            }\n        }\n        _setAppId(c, aid);\n    }\n\n    await parseRenativeConfigs(c);\n    logAppInfo(c);\n\n    return true;\n};\n\nexport default {\n    description: 'Configure project with specific appConfig',\n    fn: taskRnvAppConfigure,\n    task: TASK_APP_CONFIGURE,\n    params: PARAMS.withBase(PARAMS.withConfigure()),\n    platforms: [],\n};\n"],"file":"task.rnv.app.configure.js"}