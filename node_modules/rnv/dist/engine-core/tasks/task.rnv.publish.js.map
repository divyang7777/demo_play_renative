{"version":3,"sources":["../../../src/engine-core/tasks/task.rnv.publish.js"],"names":["includesPre","version","includes","taskRnvPublish","c","parentTask","originTask","TASK_PROJECT_CONFIGURE","TASK_PUBLISH","Config","checkRequiredPackage","pkgJson","files","project","package","existingPath","paths","git","tagName","requireCleanWorkingDir","npm","publish","hooks","skipRootPublish","rootPublishCommand","args","getConfig","program","rawArgs","slice","maybeVersion","secondArg","prereleaseMark","splice","semver","valid","dir","execCommonOpts","interactive","env","process","cwd","ci","publishMode","rootPublishIfNecessary","Error","releaseIt","join","catch","e","Promise","resolve","reject","then","description","fn","task","params","PARAMS","withBase","platforms"],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport Config from '../../core/configManager/config';\nimport { executeAsync } from '../../core/systemManager/exec';\nimport { logWarning, logTask } from '../../core/systemManager/logger';\nimport { writeFileSync } from '../../core/systemManager/fileutils';\nimport { executeTask } from '../../core/engineManager';\nimport { TASK_PUBLISH, TASK_PROJECT_CONFIGURE, PARAMS } from '../../core/constants';\n\n\nconst includesPre = (version) => {\n    if (version.includes('alpha')) return 'alpha';\n    if (version.includes('beta')) return 'beta';\n    if (version.includes('rc')) return 'rc';\n    return false;\n};\n\n\n/*\n *\n * Usage\n * rnv publish\n * rnv publish patch|minor|major\n * rnv publish patch|minor|major alpha|beta|rc\n * rnv publish 1.0.0\n * rnv publish 1.0.0-alpha.1\n * rnv publish ... --dry-run\n *\n * Basically the same as release-it documentation. The only difference is that you don't need to specify --preRelease=beta\n * if you are publishing a beta/alpha/rc. That is done automatically by checking if the second arg is alpha, beta, rc.\n *\n */\nexport const taskRnvPublish = async (c, parentTask, originTask) => {\n    logTask('taskRnvPublish');\n\n    await executeTask(c, TASK_PROJECT_CONFIGURE, TASK_PUBLISH, originTask);\n\n    // make sure release-it is installed\n    await Config.checkRequiredPackage(c,\n        'release-it',\n        '12.4.3',\n        'devDependencies');\n    // make sure required object is present in package.json\n    const pkgJson = c.files.project.package;\n    const existingPath = c.paths.project.package;\n\n    if (!pkgJson['release-it']) {\n        pkgJson['release-it'] = {\n            git: {\n                // eslint-disable-next-line no-template-curly-in-string\n                tagName: 'v${version}',\n                requireCleanWorkingDir: false\n            },\n            npm: {\n                publish: false\n            },\n            hooks: {\n                // eslint-disable-next-line no-template-curly-in-string\n                'before:git': 'npx rnv pkg version ${version}'\n            }\n        };\n        writeFileSync(existingPath, pkgJson);\n    }\n\n    // backwards compatibility and user change friendly\n    if (!pkgJson['release-it']?.hooks?.['before:git']) {\n        if (!pkgJson['release-it'].hooks) {\n            pkgJson['release-it'].hooks = {};\n        }\n        // eslint-disable-next-line no-template-curly-in-string\n        pkgJson['release-it'].hooks['before:git'] = 'npx rnv pkg version ${version}';\n        writeFileSync(existingPath, pkgJson);\n    }\n\n    if (!pkgJson['release-it'].publish) {\n        pkgJson['release-it'].publish = 'local';\n        pkgJson['release-it'].skipRootPublish = true;\n        pkgJson['release-it'].rootPublishCommand = 'npx rnv deploy -p ios -s debug';\n        writeFileSync(existingPath, pkgJson);\n    }\n\n    let args = [...Config.getConfig().program.rawArgs];\n    args = args.slice(3);\n\n    const maybeVersion = args[0];\n    const secondArg = args[1];\n    let prereleaseMark = '';\n\n    // for handling `rnv publish patch alpha`\n    if (['alpha', 'beta', 'rc'].includes(secondArg)) {\n        args.splice(1, 1); // remove it so it won't interfere with release-it\n        prereleaseMark = `--preRelease=${secondArg}`;\n    }\n\n    // for handling `rnv publish 1.0.0-alpha.1`\n    if (semver.valid(maybeVersion) && includesPre(maybeVersion)) {\n        prereleaseMark = `--preRelease=${includesPre(maybeVersion)}`;\n    }\n\n    const { dir } = Config.getConfig().paths.project;\n    const execCommonOpts = { interactive: true, env: process.env, cwd: dir };\n    const { ci } = Config.getConfig().program;\n    const publishMode = pkgJson['release-it'].publish || 'local';\n    const { skipRootPublish, rootPublishCommand } = pkgJson['release-it'];\n\n    const rootPublishIfNecessary = async () => {\n        await executeAsync('npx rnv pkg publish', execCommonOpts);\n        if (!skipRootPublish) {\n            if (!rootPublishCommand) {\n                throw new Error(\n                    \"You don't have a rootPublishCommand specified in package.json\"\n                );\n            }\n            return executeAsync(rootPublishCommand, execCommonOpts);\n        }\n    };\n\n    const releaseIt = () => executeAsync(\n        `npx release-it ${args.join(' ')} ${prereleaseMark}`,\n        execCommonOpts\n    )\n        .catch((e) => {\n            if (e.includes('SIGINT')) return Promise.resolve();\n            if (e.includes('--no-git.requireUpstream')) {\n                return Promise.reject(\n                    new Error(\n                        'Seems like you have no upstream configured for current branch. Run `git push -u <origin> <your_branch>` to fix it then try again.'\n                    )\n                );\n            }\n            return Promise.reject(e);\n        })\n        .then(rootPublishIfNecessary);\n\n    // we have a ci flag, checking if the project is configured for ci releases to do a bumpless deploy\n    if (ci) {\n        if (publishMode !== 'ci') {\n            return logWarning(\n                'You are running publish with --ci flag but this project is set for local deployments. Check package.json release-it.publish property'\n            );\n        }\n        return rootPublishIfNecessary();\n    }\n\n    return releaseIt();\n};\n\nexport default {\n    description: '',\n    fn: taskRnvPublish,\n    task: 'publish',\n    params: PARAMS.withBase(),\n    platforms: [],\n};\n"],"file":"task.rnv.publish.js"}