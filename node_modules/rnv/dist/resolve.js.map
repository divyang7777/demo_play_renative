{"version":3,"sources":["../src/resolve.js"],"names":["doResolve","aPath","mandatory","options","basedir","process","cwd","startsWith","_withPathFix","_doResolveFSPath","forceForwardPaths","_doResolveExternalPackage","err","p","replace","doResolvePath","fallbackBase","pathArr","split","shift","cleanPath","join","realPath","path","isScopedPackagePath","includes","Error","_getPackagePathParts","parts","match","Array","isArray","slice","fileRelPath","fs","existsSync","packageBase","packageSuffix","resolvedPath","resolve","sync","packageFilter","pkg","main","extensions","concat","keepSuffix","e"],"mappings":"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","sourcesContent":["import resolve from 'resolve';\nimport fs from 'fs';\nimport path from 'path';\n/**\n * An attempt at drying out filesystem references to [external packages](https://tinyurl.com/mao2dy6).\n *\n * We access external packages for a number of reasons:\n *  - to simply resolve a non-scoped package's (absolute) path on disk. e.g. '/var/project/node_modules/react-native'\n *  - to resolve a scoped package's (absolute) path on disk. e.g. '/var/project/node_modules/@aScope/react-native'\n *  - to resolve an individual file/dir's (absolute) path on disk. e.g. '/var/project/node_modules/react-native/blur/android' (note this is a normally illegal package reference)\n *  - to resolve an individual file (absolute) path on disk by FS relative reference. e.g. '/var/project/node_modules/react-native/relPath'\n *\n * ** Please note that we do not support [subpackage paths](https://tinyurl.com/vub6c7t). All suffixed paths (e.g. 'react-native/SUFFIX_PATH', '@aScope/react-native/SUFFIX_PATH')\n * will be treated as a filepath from root of resolved package (i.e. will ignore subdirectory package.json)\n *\n * @param {*} aPath - package name. e.g. 'file:../rel/path', 'react-native', 'react-native/android', '@react-native-community/masked-view/android'\n * @param {*} mandatory - whether it throws\n * @param {*} options - docs - https://tinyurl.com/r9sfpf7 && {keepSuffix: boolean}\n */\nexport const doResolve = (aPath, mandatory = true, options = {}) => {\n    options.basedir = options.basedir ?? process.cwd();\n    try {\n        if (aPath.startsWith('file:')) {\n            return _withPathFix(_doResolveFSPath(aPath, options), options?.forceForwardPaths);\n        }\n        return _withPathFix(_doResolveExternalPackage(aPath, options), options?.forceForwardPaths);\n    } catch (err) {\n        // perhaps do some warning logging here..\n        if (mandatory) throw err;\n    }\n};\n\nconst _withPathFix = (p, forceForwardPaths) => {\n    if (p && forceForwardPaths) {\n        return p.replace(/\\\\/g, '/');\n    }\n    return p;\n};\n\nexport const doResolvePath = (aPath, mandatory = true, options = {}, fallbackBase = '') => {\n    options.basedir = options.basedir ?? process.cwd();\n\n    try {\n        const pathArr = aPath.split('/');\n        // Take care of scenario when someone wrote: \"/node_modules/..\" instead of \"node_modules/...\"\n        if (pathArr[0] === '') {\n            pathArr.shift();\n        }\n        if (pathArr[0] === 'node_modules') {\n            pathArr.shift();\n        }\n        if (pathArr[0] === 'packages') {\n            pathArr.shift();\n        }\n        const cleanPath = pathArr.join('/');\n        if (pathArr[0].startsWith('@')) {\n            pathArr.shift();\n        }\n        pathArr.shift();\n        const realPath = doResolve(cleanPath, mandatory, options);\n        if (realPath) {\n            return _withPathFix(path.join(realPath, ...pathArr), options?.forceForwardPaths);\n        }\n        return _withPathFix(path.join(fallbackBase, aPath), options?.forceForwardPaths);\n    } catch (err) {\n        if (mandatory) throw err;\n    }\n};\n\nexport const isScopedPackagePath = (aPath) => {\n    if (aPath.startsWith('@')) {\n        if (!aPath.includes('/')) {\n            throw new Error(\n                `Scoped packages must include subpackage portion e.g. '@aScope/subpackage'. Supplied path: ${aPath}`\n            );\n        }\n        return true;\n    }\n};\n\nconst _getPackagePathParts = (aPath) => {\n    let parts = [];\n    if (isScopedPackagePath(aPath)) {\n        parts = aPath.match(/^([^/]+\\/[^/]+)(?:\\/?(.*))/);\n    } else {\n        parts = aPath.match(/^([^/]+)\\/?(.*)/);\n    }\n    if (!Array.isArray(parts)) {\n        throw new Error(`Unsuitable path for resolving: ${aPath}`);\n    }\n    return parts.slice(1);\n};\n\n/**\n * We support path linking using 'file:' protocol (not part of official node resolution alg.)\n */\nconst _doResolveFSPath = (aPath, options) => {\n    const fileRelPath = `${\n        options.basedir ? `${options.basedir}/`.replace(/.*\\/+$/, '/') : ''\n    }${aPath.replace('file:', '')}`;\n    if (!fs.existsSync(fileRelPath)) {\n        throw new Error(\n            `Explicit filepath ${aPath} does not resolve to dir or file`\n        );\n    }\n    return fileRelPath;\n};\n\n/**\n * @see 'LOAD_NODE_MODULES' of node resolution alg. - https://tinyurl.com/pgz6f33\n */\nconst _doResolveExternalPackage = (aPath, options) => {\n    const [packageBase, packageSuffix] = _getPackagePathParts(aPath);\n\n    try {\n        const resolvedPath = resolve\n            .sync(packageBase, {\n                packageFilter: (pkg) => {\n                    pkg.main = 'package.json';\n                    return pkg;\n                },\n                ...options,\n                extensions: ['.js', '.json'].concat(options.extensions ?? [])\n            })\n            .replace(/(\\\\|\\/)package.json$/, '');\n        return options.keepSuffix ?? false\n            ? `${resolvedPath}/${packageSuffix}`\n            : resolvedPath;\n    } catch (e) {\n        return null;\n    }\n};\n"],"file":"resolve.js"}