{"version":3,"sources":["../../src/systemTools/crypto.js"],"names":["iocane","require","readdirAsync","fs","readdir","getEnvVar","c","p1","paths","workspace","dir","split","pop","replace","p2","files","project","package","name","envVar","toUpperCase","rnvCryptoUpdateProfile","generateRandomKey","length","Array","fill","map","x","Math","floor","random","join","_getEnvExportCmd","key","isSystemWin","chalk","white","_checkAndConfigureCrypto","source","config","crypto","type","message","default","location","encrypt","dest","decrypt","sourceFolder","path","existsSync","appConfigsDir","configDirs","forEach","item","appConfigDir","confirm","program","process","env","keyGenerated","yellow","Promise","reject","red","rnvCryptoEncrypt","destRaw","tsWorkspacePath","destTemp","timestamp","Date","getTime","destFolder","tar","gzip","file","cwd","createSession","use","readFileSync","data","projectConfig","_unzipAndCopy","shouldCleanFolder","wsPath","ts","rnvCryptoDecrypt","sourceRaw","isCryptoReset","command","reset","ci","options","choices","option","includes","err","green","stack","rnvCryptoInstallProfiles","resolve","platform","ppFolder","home","list","mobileprovisionArr","filter","v","endsWith","e","rnvCryptoInstallCerts","kChain","keychain","cerArr","all","then","catch","rnvCryptoUpdateProfiles","IOS","TVOS","_updateProfiles","runtime","appId","grey","acList","reduce","previousPromise","_updateProfile","checkCrypto","tsProjectPath","tsWorkspace","tsProject","parseInt","toString"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport tar from 'tar';\nimport chalk from 'chalk';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport {\n    logWarning,\n    logError,\n    logTask,\n    logDebug,\n    logSuccess,\n    logInfo\n} from './logger';\nimport { isSystemWin } from '../utils';\nimport {\n    listAppConfigsFoldersSync,\n    setAppConfig\n} from '../configTools/configParser';\nimport { IOS, TVOS } from '../constants';\nimport {\n    getRealPath,\n    removeFilesSync,\n    getFileListSync,\n    copyFileSync,\n    mkdirSync,\n    writeFileSync,\n    fsWriteFileSync,\n    cleanFolder\n} from './fileutils';\nimport { executeAsync } from './exec';\nimport { updateProfile } from '../platformTools/apple/fastlane';\nimport { inquirerPrompt } from './prompt';\n\nconst iocane = require('iocane');\n\nconst readdirAsync = promisify(fs.readdir);\n\nconst getEnvVar = (c) => {\n    const p1 = c.paths.workspace.dir\n        .split('/')\n        .pop()\n        .replace('.', '');\n    const p2 = c.files.project.package.name\n        .replace('@', '')\n        .replace('/', '_')\n        .replace(/-/g, '_');\n    const envVar = `CRYPTO_${p1}_${p2}`.toUpperCase();\n    logDebug('encrypt looking for env var:', envVar);\n    return envVar;\n};\n\nexport const rnvCryptoUpdateProfile = async (c) => {\n    await updateProfile(c);\n};\n\nconst generateRandomKey = length => Array(length)\n    .fill(\n        '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%^&*'\n    )\n    .map(x => x[Math.floor(Math.random() * x.length)])\n    .join('');\n\nconst _getEnvExportCmd = (envVar, key) => {\n    if (isSystemWin) {\n        return `${chalk.white(`setx ${envVar} \"${key}\"`)}`;\n    }\n    return `${chalk.white(`export ${envVar}=\"${key}\"`)}`;\n};\n\nconst _checkAndConfigureCrypto = async (c) => {\n    // handle missing config\n    const source = `./${c.files.project.package.name}`;\n\n    if (c.files.project.config && !c.files.project.config.crypto) {\n        const { location } = await inquirerPrompt({\n            type: 'input',\n            name: 'location',\n            message:\n                'Where would you like your secrets to be residing? (path relative to root, without leading or trailing slash. Ex. `myPrivateConfig/encrypt`)',\n            default: 'secrets'\n        });\n        c.files.project.config.crypto = {\n            encrypt: {\n                dest: `PROJECT_HOME/${location}/privateConfigs.enc`\n            },\n            decrypt: {\n                source: `PROJECT_HOME/${location}/privateConfigs.enc`\n            }\n        };\n        writeFileSync(c.paths.project.config, c.files.project.config);\n    }\n\n    // check if src folder actually exists\n    const sourceFolder = path.join(c.paths.workspace.dir, source);\n    if (!fs.existsSync(sourceFolder)) {\n        logInfo(\n            `It seems you are running encrypt for the first time. Directory ${chalk.white(\n                sourceFolder\n            )} does not exist yet.\nRNV will create it for you, make sure you add whatever you want encrypted in it and then run the command again`\n        );\n\n        mkdirSync(sourceFolder);\n        mkdirSync(path.join(sourceFolder, 'certs'));\n        writeFileSync(path.join(sourceFolder, 'renative.private.json'), {});\n\n        const configDirs = await readdirAsync(c.paths.project.appConfigsDir);\n\n        configDirs.forEach((item) => {\n            const appConfigDir = path.join(sourceFolder, item);\n            mkdirSync(appConfigDir);\n            mkdirSync(path.join(appConfigDir, 'certs'));\n            writeFileSync(path.join(appConfigDir, 'renative.private.json'), {});\n        });\n\n        // writeFileSync(path.join(sourceFolder), c.files.project.config);\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: 'Once ready, Continue?'\n        });\n\n        if (confirm) return true;\n    }\n\n    const envVar = getEnvVar(c);\n    let key = c.program.key || c.process.env[envVar];\n    let keyGenerated = false;\n    if (!key) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `You haven't passed a key with --key or set an env variable named ${chalk.yellow(\n                envVar\n            )} for the encryption key. Would you like to generate one?`\n        });\n        if (confirm) {\n            key = generateRandomKey(20);\n            keyGenerated = true;\n        } else {\n            return Promise.reject(`encrypt: You must pass ${chalk.white(\n                '--key'\n            )} or have env var defined:\n\n${_getEnvExportCmd(envVar, 'REPLACE_WITH_ENV_VARIABLE')}\n\n`);\n        }\n        if (keyGenerated) {\n            logSuccess(`The files were encrypted with key ${chalk.red(\n                key\n            )}. Make sure you keep it safe! Pass it with --key on decryption or set it as following env variable:\n\n${_getEnvExportCmd(envVar, key)}\n\n`);\n            c.process.env[envVar] = key;\n        }\n    }\n};\n\nexport const rnvCryptoEncrypt = async (c) => {\n    logTask('rnvCryptoEncrypt');\n\n    const source = `./${c.files.project.package.name}`;\n\n    await _checkAndConfigureCrypto(c);\n\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n    const tsWorkspacePath = path.join(\n        c.paths.workspace.dir,\n        c.files.project.package.name,\n        'timestamp'\n    );\n    const envVar = getEnvVar(c);\n    const key = c.program.key || c.process.env[envVar];\n\n    if (destRaw) {\n        const dest = `${getRealPath(c, destRaw, 'encrypt.dest')}`;\n        const destTemp = `${path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name.replace('/', '-')\n        )}.tgz`;\n        const timestamp = new Date().getTime();\n\n        // check if dest folder actually exists\n        const destFolder = path.join(dest, '../');\n        !fs.existsSync(destFolder) && mkdirSync(destFolder);\n\n        await tar.c(\n            {\n                gzip: true,\n                file: destTemp,\n                cwd: c.paths.workspace.dir\n            },\n            [source]\n        );\n\n\n        const data = await iocane.createSession()\n            .use('cbc')\n            .encrypt(fs.readFileSync(destTemp), key);\n\n        fsWriteFileSync(dest, data);\n\n        // await executeAsync(\n        //     c,\n        //     `${_getOpenSllPath(\n        //         c\n        //     )} enc -aes-256-cbc -md md5 -salt -in ${destTemp} -out ${dest} -k ${key}`,\n        //     { privateParams: [key] }\n        // );\n        removeFilesSync([destTemp]);\n        fsWriteFileSync(`${dest}.timestamp`, timestamp);\n        fsWriteFileSync(`${tsWorkspacePath}`, timestamp);\n        logSuccess(`Files succesfully encrypted into ${dest}`);\n    } else {\n        logWarning(\n            `You don't have {{ crypto.encrypt.dest }} specificed in ${chalk.white(\n                c.paths.projectConfig\n            )}`\n        );\n    }\n};\n\nconst _unzipAndCopy = async (\n    c,\n    shouldCleanFolder,\n    destTemp,\n    wsPath,\n    ts,\n    destFolder\n) => {\n    if (shouldCleanFolder) {\n        await cleanFolder(wsPath);\n    }\n\n    await tar.x({\n        file: destTemp,\n        cwd: c.paths.workspace.dir\n    });\n\n    removeFilesSync([destTemp]);\n    if (fs.existsSync(ts)) {\n        copyFileSync(\n            ts,\n            path.join(\n                c.paths.workspace.dir,\n                c.files.project.package.name,\n                'timestamp'\n            )\n        );\n    }\n    logSuccess(`Files succesfully extracted into ${destFolder}`);\n};\n\nexport const rnvCryptoDecrypt = async (c) => {\n    logTask('rnvCryptoDecrypt');\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n\n    if (sourceRaw) {\n        const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n        const ts = `${source}.timestamp`;\n        const destFolder = path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name\n        );\n        const destTemp = `${path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name.replace('/', '-')\n        )}.tgz`;\n        const envVar = getEnvVar(c);\n        let shouldCleanFolder = false;\n        const wsPath = path.join(\n            c.paths.workspace.dir,\n            c.files.project.package.name\n        );\n        const isCryptoReset = c.command === 'crypto' && c.program.reset === true;\n\n        if (c.program.ci !== true && !isCryptoReset) {\n            const options = [\n                'Yes - override (recommended)',\n                'Yes - merge',\n                'Skip'\n            ];\n            const { option } = await inquirerPrompt({\n                name: 'option',\n                type: 'list',\n                choices: options,\n                message: `How to decrypt to ${chalk.white(destFolder)} ?`\n            });\n            if (option === options[0]) {\n                shouldCleanFolder = true;\n            } else if (option === options[2]) {\n                return true;\n            }\n        } else {\n            shouldCleanFolder = true;\n        }\n\n        if (fs.existsSync(destTemp)) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message: `Found existing decrypted file at ${chalk.white(\n                    destTemp\n                )}. want to use it and skip decrypt ?`\n            });\n            if (confirm) {\n                await _unzipAndCopy(\n                    c,\n                    shouldCleanFolder,\n                    destTemp,\n                    wsPath,\n                    ts,\n                    destFolder\n                );\n                return true;\n            }\n        }\n\n        const key = c.program.key || c.process.env[envVar];\n        if (!key) {\n            return Promise.reject(`encrypt: You must pass ${chalk.white(\n                '--key'\n            )} or have env var defined:\n\n${_getEnvExportCmd(envVar, 'REPLACE_WITH_ENV_VARIABLE')}\n\n`);\n        }\n        if (!fs.existsSync(source)) {\n            return Promise.reject(\n                `Can't decrypt. ${chalk.white(source)} is missing!`\n            );\n        }\n\n        let data;\n        try {\n            data = await iocane.createSession()\n                .use('cbc')\n                .decrypt(fs.readFileSync(source), key);\n        } catch (e) {\n            if (e?.message?.includes) {\n                if (e.message.includes('Signature mismatch')) {\n                    const err = `Looks like you're trying to decode crypto file encoded with previous version of crypto.\nthis change was introduced in \"rnv@0.29.0\"\n\n${e}\n\n      ${chalk.green('SUGGESTION:')}\n\n      ${chalk.yellow('STEP 1:')}\n      run: ${chalk.white('rnv crypto encrypt')} locally at least once and commit the result back to your repository\n\n      ${chalk.yellow('STEP 2:')}\n      you should be able to use: ${chalk.white('rnv crypto decrypt')} properly now\n\n      ${chalk.yellow('IF ALL HOPE IS LOST:')}\n      Raise new issue and copy this SUMMARY box output at:\n      ${chalk.white('https://github.com/pavjacko/renative/issues')}\n      and we will try to help!\n\n      `;\n\n                    return Promise.reject(err);\n                } if (e.message.includes('Authentication failed')) {\n                    return Promise.reject(`It seems like you provided invalid decryption key.\n\n${e.stack}\n\n${chalk.green('SUGGESTION:')}\n\n${chalk.yellow('STEP 1:')}\ncheck if your ENV VAR is correct: ${_getEnvExportCmd(envVar, '***********')}\nor if someone did not encrypt ${chalk.white(source)} with a different key\n\n${chalk.yellow('STEP 2:')}\nrun crypto decrypt again\n\n${chalk.yellow('IF ALL HOPE IS LOST:')}\nRaise new issue and copy this SUMMARY box output at:\n${chalk.white('https://github.com/pavjacko/renative/issues')}\nand we will try to help!\n\n`);\n                }\n            }\n\n            return Promise.reject(e);\n        }\n\n\n        fsWriteFileSync(destTemp, data);\n\n        //         try {\n        //             await executeAsync(\n        //                 c,\n        //                 `${_getOpenSllPath(\n        //                     c\n        //                 )} enc -aes-256-cbc -md md5 -d -in ${source} -out ${destTemp} -k ${key}`,\n        //                 { privateParams: [key] }\n        //             );\n        //         } catch (e) {\n        //             const cmd1 = chalk.white(\n        //                 `openssl enc -aes-256-cbc -md md5 -d -in ${source} -out ${destTemp} -k $${envVar}`\n        //             );\n        //             return Promise.reject(`${e}\n\n        // ${chalk.green('SUGGESTION:')}\n\n        // ${chalk.yellow('STEP 1:')}\n        // ${cmd1}\n\n        // ${chalk.yellow('STEP 2:')}\n        // ${chalk.white(\n        //         'run your previous command again and choose to skip openssl once asked'\n        //     )}`);\n        //         }\n\n        await _unzipAndCopy(\n            c,\n            shouldCleanFolder,\n            destTemp,\n            wsPath,\n            ts,\n            destFolder\n        );\n    } else {\n        logWarning(\n            `You don't have {{ crypto.encrypt.dest }} specificed in ${chalk.white(\n                c.paths.projectConfig\n            )}`\n        );\n        return true;\n    }\n};\n\n// const _getOpenSllPath = (c) => {\n//     const {\n//         process: { platform }\n//     } = c;\n//     let defaultOpenssl = 'openssl';\n//     // if (platform === 'linux') defaultOpenssl = path.join(c.paths.rnv.dir, 'bin/openssl-linux');\n//     if (isSystemMac) { defaultOpenssl = path.join(c.paths.rnv.dir, 'bin/openssl-osx'); }\n//     // if (fs.existsSync(defaultOpenssl)) {\n//     //     return defaultOpenssl;\n//     // }\n//     // logWarning(`${defaultOpenssl} is missing. will use default one`);\n\n//     return defaultOpenssl;\n// };\n\nexport const rnvCryptoInstallProfiles = c => new Promise((resolve) => {\n    logTask('rnvCryptoInstallProfiles');\n    if (c.platform !== 'ios') {\n        logError(\n            `rnvCryptoInstallProfiles: platform ${c.platform} not supported`\n        );\n        resolve();\n        return;\n    }\n\n    const ppFolder = path.join(\n        c.paths.home.dir,\n        'Library/MobileDevice/Provisioning Profiles'\n    );\n\n    if (!fs.existsSync(ppFolder)) {\n        logWarning(`folder ${ppFolder} does not exist!`);\n        mkdirSync(ppFolder);\n    }\n\n    const list = getFileListSync(c.paths.workspace.project.dir);\n    const mobileprovisionArr = list.filter(v => v.endsWith('.mobileprovision'));\n\n    try {\n        mobileprovisionArr.forEach((v) => {\n            logDebug(`rnvCryptoInstallProfiles: Installing: ${v}`);\n            copyFileSync(v, ppFolder);\n        });\n    } catch (e) {\n        logError(e);\n    }\n\n    resolve();\n});\n\nexport const rnvCryptoInstallCerts = c => new Promise((resolve) => {\n    logTask('rnvCryptoInstallCerts');\n\n    if (c.platform !== 'ios') {\n        logError(`_installTempCerts: platform ${c.platform} not supported`);\n        resolve();\n        return;\n    }\n    const kChain = c.program.keychain || 'ios-build.keychain';\n\n    const list = getFileListSync(c.paths.workspace.project.dir);\n    const cerArr = list.filter(v => v.endsWith('.cer'));\n\n    Promise.all(\n        cerArr.map(v => executeAsync(c, `security import ${v} -k ${kChain} -A`))\n    )\n        .then(() => resolve())\n        .catch((e) => {\n            logWarning(e);\n            resolve();\n        });\n});\n\nexport const rnvCryptoUpdateProfiles = async (c) => {\n    logTask('rnvCryptoUpdateProfiles');\n    switch (c.platform) {\n        case IOS:\n        case TVOS:\n            await _updateProfiles(c);\n            await setAppConfig(c, c.runtime?.appId);\n            break;\n        default:\n            return true;\n    }\n    return Promise.reject(\n        `updateProfiles: Platform ${c.platform} not supported`\n    );\n};\n\nconst _updateProfiles = (c) => {\n    logTask('_updateProfiles', chalk.grey);\n    const acList = listAppConfigsFoldersSync(c, true);\n\n    return acList.reduce(\n        (previousPromise, v) => previousPromise.then(() => _updateProfile(c, v)),\n        Promise.resolve()\n    );\n};\n\nconst _updateProfile = (c, v) => new Promise((resolve, reject) => {\n    logTask(`_updateProfile:${v}`, chalk.grey);\n    updateProfile(c, v)\n        .then(() => resolve())\n        .catch(e => reject(e));\n});\n\nexport const checkCrypto = async (c) => {\n    logTask('checkCrypto');\n\n    if (c.program.ci) return;\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n\n    if (destRaw) {\n        if (sourceRaw && destRaw) {\n            const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n            const tsProjectPath = `${source}.timestamp`;\n            const wsPath = path.join(\n                c.paths.workspace.dir,\n                c.files.project.package.name\n            );\n            const tsWorkspacePath = path.join(wsPath, 'timestamp');\n            if (!fs.existsSync(source)) {\n                logWarning(\n                    \"This project uses encrypted files but you don't have them installed\"\n                );\n            } else {\n                let tsWorkspace = 0;\n                let tsProject = 0;\n                if (fs.existsSync(tsWorkspacePath)) {\n                    tsWorkspace = parseInt(\n                        fs.readFileSync(tsWorkspacePath).toString(),\n                        10\n                    );\n                }\n\n                if (fs.existsSync(tsProjectPath)) {\n                    tsProject = parseInt(\n                        fs.readFileSync(tsProjectPath).toString(),\n                        10\n                    );\n                }\n\n                if (tsProject > tsWorkspace) {\n                    logWarning(`Your ${tsWorkspacePath} is out of date.\nproject timestamp: ${chalk.grey(`${tsProject} - ${new Date(tsProject)}`)}\nworkspace timestamp: ${chalk.grey(`${tsWorkspace} - ${new Date(tsWorkspace)}`)}\nyou should run decrypt`);\n                    await rnvCryptoDecrypt(c);\n                    return;\n                }\n\n                if (tsProject < tsWorkspace) {\n                    logWarning(\n                        `Your ${tsWorkspacePath} is newer than your project one.`\n                    );\n                }\n            }\n        }\n    }\n};\n"],"file":"crypto.js"}