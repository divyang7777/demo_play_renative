{"version":3,"sources":["../../src/systemTools/cleaner.js"],"names":["rnvClean","c","skipQuestionParam","skipQuestion","program","ci","pathsToRemove","immediateNodeModuleDir","path","join","paths","project","dir","pkgLock","fs","existsSync","push","msg","chalk","red","packagesFolder","readdirSync","forEach","pth","pth2","pth3","buildDirs","builds","assets","answers","modules","cache","nothingToClean","length","inquirer","prompt","name","type","message","confirm","confirmBuilds","confirmCache","Promise","resolve"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\n\nimport { removeDirs } from './fileutils';\nimport { logTask, logToSummary, logDebug } from './logger';\nimport { executeAsync } from './exec';\n\nconst rnvClean = async (c, skipQuestionParam = false) => {\n    logTask('rnvClean');\n    const skipQuestion = c.program.ci ? true : skipQuestionParam;\n    const pathsToRemove = [];\n    const immediateNodeModuleDir = path.join(\n        c.paths.project.dir,\n        'node_modules'\n    );\n    const pkgLock = path.join(c.paths.project.dir, 'package-lock.json');\n    if (fs.existsSync(immediateNodeModuleDir)) { pathsToRemove.push(immediateNodeModuleDir); }\n    if (fs.existsSync(pkgLock)) pathsToRemove.push(pkgLock);\n    let msg = chalk.red(`${pkgLock}\\n${immediateNodeModuleDir}`);\n    const packagesFolder = path.join(c.paths.project.dir, 'packages');\n    if (fs.existsSync(packagesFolder)) {\n        fs.readdirSync(packagesFolder).forEach((dir) => {\n            if (dir === '.DS_Store') {\n                const pth = path.join(packagesFolder, dir);\n\n                if (fs.existsSync(pth)) {\n                    pathsToRemove.push(pth);\n                    msg += chalk.red(`${pth}\\n`);\n                }\n            } else {\n                const pth2 = path.join(packagesFolder, dir, 'node_modules');\n                if (fs.existsSync(pth2)) {\n                    pathsToRemove.push(pth2);\n                    msg += chalk.red(`${pth2}\\n`);\n                }\n\n                const pth3 = path.join(\n                    packagesFolder,\n                    dir,\n                    'package-lock.json'\n                );\n                if (fs.existsSync(pth3)) {\n                    pathsToRemove.push(pth3);\n                    msg += chalk.red(`${pth3}\\n`);\n                }\n            }\n        });\n    }\n\n    const buildDirs = [];\n    if (fs.existsSync(c.paths.project.builds.dir)) { buildDirs.push(c.paths.project.builds.dir); }\n    if (fs.existsSync(c.paths.project.assets.dir)) { buildDirs.push(c.paths.project.assets.dir); }\n\n    const answers = {\n        modules: false,\n        builds: false,\n        cache: false,\n        nothingToClean: !skipQuestion\n    };\n\n    if (pathsToRemove.length) {\n        if (!skipQuestion) {\n            const { confirm } = await inquirer.prompt({\n                name: 'confirm',\n                type: 'confirm',\n                message: `Do you want to remove node_module related files/folders? \\n${msg}`\n            });\n            answers.modules = confirm;\n            if (confirm) answers.nothingToClean = false;\n        } else {\n            answers.modules = true;\n        }\n    }\n\n    if (buildDirs.length) {\n        if (!skipQuestion) {\n            const { confirmBuilds } = await inquirer.prompt({\n                name: 'confirmBuilds',\n                type: 'confirm',\n                message: `Do you want to clean your platformBuilds and platformAssets? \\n${chalk.red(\n                    buildDirs.join('\\n')\n                )}`\n            });\n            answers.builds = confirmBuilds;\n            if (confirmBuilds) answers.nothingToClean = false;\n        } else {\n            answers.builds = true;\n        }\n    }\n\n    if (!skipQuestion) {\n        const { confirmCache } = await inquirer.prompt({\n            name: 'confirmCache',\n            type: 'confirm',\n            message: 'Do you want to clean your npm/bundler cache?'\n        });\n        answers.cache = confirmCache;\n        if (confirmCache) answers.nothingToClean = false;\n    } else {\n        answers.cache = true;\n    }\n\n    if (answers.nothingToClean) {\n        logToSummary('Nothing to clean');\n        return Promise.resolve();\n    }\n\n    if (answers.modules) {\n        await removeDirs(pathsToRemove);\n    }\n    if (answers.builds) {\n        await removeDirs(buildDirs);\n    }\n    if (answers.cache) {\n        try {\n            await executeAsync(c, 'watchman watch-del-all');\n        } catch (e) {\n            logDebug('watchman not installed. skipping');\n        }\n\n        await executeAsync(\n            c,\n            'rm -rf $TMPDIR/metro-* && rm -rf $TMPDIR/react-* && rm -rf $TMPDIR/haste-*'\n        );\n    }\n};\n\nexport { rnvClean };\n"],"file":"cleaner.js"}