{"version":3,"sources":["../../src/systemTools/exec.js"],"names":["require","exec","execSync","_execute","c","command","opts","defaultOpts","stdio","localDir","path","resolve","preferLocal","all","maxErrorLength","program","mono","interactive","silent","shell","mergedOpts","cleanCommand","interval","intervalTimer","timer","privateMask","cleanRawCmd","rawCommand","args","Array","isArray","join","logMessage","privateParams","ignoreErrors","spinner","text","start","setInterval","child","execa","MAX_OUTPUT_LENGTH","printLastLine","buffer","Buffer","from","toString","trim","lastLine","split","pop","substring","length","info","stdout","pipe","process","on","then","res","off","succeed","clearInterval","catch","err","fail","errMessage","parseErrorMessage","stack","stderr","message","Promise","reject","execCLI","cli","p","fs","existsSync","buildConfig","sdks","chalk","white","paths","workspace","config","executeAsync","_c","_cmd","_opts","cmd","Config","getConfig","includes","platform","replace","executeTelnet","port","output","nc2","NClient","addr","runtime","localhost","parseInt","connect","send","data","resp","close","e","toSearch","arr","errFound","filter","v","search","map","str","extractedError","isUsingWindows","fileNotExists","commandName","callback","constants","F_OK","fileNotExistsSync","localExecutable","X_OK","localExecutableSync","commandExistsUnix","cleanedCommandName","isFile","error","commandExistsWindows","test","commandExistsUnixSync","commandExistsWindowsSync","cleanInput","_s","s","isPathName","dirname","basename","commandExists","commandExistsSync","cleanNodeModules","dirs","reduce","acc","dir","match","_all","aPackage","aPath","resolved","push","npmInstall","failOnError","isYarnInstalled","yarnLockPath","projectPath","npmLockPath","type","name","choices","default","packageManager","grey","plats","files","project","defaults","supportedPlatforms","ANDROID","ANDROID_TV","ANDROID_WEAR","openCommand"],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mC;;AAE2BA,OAAO,CAAC,eAAD,C,CAA1BC,I,UAAAA,I,CAAMC,Q,UAAAA,Q;;;;;;;;;;;;;;;;;;;;AAoBd,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAAIC,OAAJ,CAA2B,wGAAdC,CAAAA,IAAc,2DAAP,EAAO;AACxC,GAAMC,CAAAA,WAAW,CAAG;AAChBC,KAAK,CAAE,MADS;AAEhBC,QAAQ,CAAEC,cAAKC,OAAL,CAAa,qBAAb,CAFM;AAGhBC,WAAW,CAAE,IAHG;AAIhBC,GAAG,CAAE,IAJW;AAKhBC,cAAc,aAAEV,CAAC,CAACW,OAAJ,eAAE,WAAWD,cALX;AAMhBE,IAAI,cAAEZ,CAAC,CAACW,OAAJ,eAAE,YAAWC,IAND,CAApB;;;AASA,GAAIV,IAAI,CAACW,WAAT,CAAsB;AAClBV,WAAW,CAACW,MAAZ,CAAqB,IAArB;AACAX,WAAW,CAACC,KAAZ,CAAoB,SAApB;AACAD,WAAW,CAACY,KAAZ,CAAoB,IAApB;AACH;;AAED,GAAMC,CAAAA,UAAU,gCAAQb,WAAR,EAAwBD,IAAxB,CAAhB;;AAEA,GAAIe,CAAAA,YAAY,CAAGhB,OAAnB;AACA,GAAIiB,CAAAA,QAAJ;AACA,GAAMC,CAAAA,aAAa,CAAG,KAAtB;AACA,GAAIC,CAAAA,KAAK,CAAGD,aAAZ;AACA,GAAME,CAAAA,WAAW,CAAG,SAApB;AACA,GAAMC,CAAAA,WAAW,CAAG,mBAAApB,IAAI,CAACqB,UAAL,gCAAiBC,IAAjB,GAAyB,EAA7C;AACA,GAAIC,KAAK,CAACC,OAAN,CAAczB,OAAd,CAAJ,CAA4BgB,YAAY,CAAGhB,OAAO,CAAC0B,IAAR,CAAa,GAAb,CAAf;;AAE5BV,YAAY,EAAIK,WAAW,CAACK,IAAZ,CAAiB,GAAjB,CAAhB;AACA,GAAIC,CAAAA,UAAU,CAAGX,YAAjB,CA3BwC;AA4BhCY,aA5BgC,CA4Bdb,UA5Bc,CA4BhCa,aA5BgC;AA6BxC,GAAIA,aAAa,EAAIJ,KAAK,CAACC,OAAN,CAAcG,aAAd,CAArB,CAAmD;AAC/CD,UAAU,CAAG;AACT3B,OADS;AAET4B,aAFS;AAGTR,WAHS,CAAb;;AAKH;;AAED,kCAAsBO,UAAtB,EArCwC;AAsChCd,MAtCgC,CAsCeE,UAtCf,CAsChCF,MAtCgC,CAsCxBF,IAtCwB,CAsCeI,UAtCf,CAsCxBJ,IAtCwB,CAsClBF,cAtCkB,CAsCeM,UAtCf,CAsClBN,cAtCkB,CAsCFoB,YAtCE,CAsCed,UAtCf,CAsCFc,YAtCE;AAuCxC,GAAMC,CAAAA,OAAO,CAAG,CAACjB,MAAD,EAAW,CAACF,IAAZ,EAAoB,iBAAI,CAAEoB,IAAI,eAAgBJ,UAAtB,CAAJ,EAA0CK,KAA1C,EAApC;;AAEA,GAAIrB,IAAJ,CAAU;AACNM,QAAQ,CAAGgB,WAAW,CAAC,UAAM;AACzB,iCAAqBN,UAArB,OAAqCR,KAAK,CAAG,IAA7C;AACAA,KAAK,EAAID,aAAT;AACH,CAHqB,CAGnBA,aAHmB,CAAtB;AAIH;AACD,GAAIgB,CAAAA,KAAJ;AACA,GAAIjC,IAAI,CAACqB,UAAT,CAAqB;AACTC,IADS,CACAtB,IAAI,CAACqB,UADL,CACTC,IADS;AAEjBW,KAAK,CAAG,mBAAMlC,OAAN,CAAeuB,IAAf,CAAqBR,UAArB,CAAR;AACH,CAHD,IAGO;AACHmB,KAAK,CAAGC,eAAMnC,OAAN,CAAcgB,YAAd,CAA4BD,UAA5B,CAAR;AACH;;AAED,GAAMqB,CAAAA,iBAAiB,CAAG,GAA1B;;AAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAY;AAC9B,GAAMP,CAAAA,IAAI,CAAGQ,MAAM,CAACC,IAAP,CAAYF,MAAZ;AACRG,QADQ;AAERC,IAFQ,EAAb;AAGA,GAAMC,CAAAA,QAAQ,CAAGZ,IAAI,CAACa,KAAL,CAAW,IAAX,EAAiBC,GAAjB,EAAjB;AACAf,OAAO,CAACC,IAAR,CAAe;AACXY,QAAQ,CAACG,SAAT,CAAmB,CAAnB,CAAsBV,iBAAtB,CADW;AAEXR,aAFW;AAGXR,WAHW,CAAf;;AAKA,GAAIuB,QAAQ,CAACI,MAAT,GAAoBX,iBAAxB,CAA2CN,OAAO,CAACC,IAAR,EAAgB,OAAhB;AAC9C,CAXD;;AAaA,GAAI,cAAAhC,CAAC,CAACW,OAAF,2BAAWsC,IAAX,YAAmBd,KAAnB,8BAAmB,OAAOe,MAA1B,eAAmB,cAAeC,IAAlC,CAAJ,CAA4C;AACxChB,KAAK,CAACe,MAAN,CAAaC,IAAb,CAAkBC,OAAO,CAACF,MAA1B;AACH,CAFD,IAEO,IAAInB,OAAO,YAAII,KAAJ,+BAAI,QAAOe,MAAX,eAAI,eAAeG,EAAnB,CAAX,CAAkC;AACrClB,KAAK,CAACe,MAAN,CAAaG,EAAb,CAAgB,MAAhB,CAAwBf,aAAxB;AACH;;AAED,MAAOH,CAAAA,KAAK;AACPmB,IADE,CACG,SAACC,GAAD,CAAS;AACX,YAAIpB,KAAJ,+BAAI,QAAOe,MAAX,eAAI,eAAeM,GAAnB,CAAwB;AACpBzB,OAAO,EAAII,KAAK,CAACe,MAAN,CAAaM,GAAb,CAAiB,MAAjB,CAAyBlB,aAAzB,CAAX;AACH;;AAED,CAACxB,MAAD,EAAW,CAACF,IAAZ,EAAoBmB,OAAO,CAAC0B,OAAR,eAA8B7B,UAA9B,CAApB;AACA;AACI,oCAAyB2B,GAAG,CAAC9C,GAA7B,CAAkCoB,aAAlC,CAAiDR,WAAjD,CADJ;;AAGAH,QAAQ,EAAIwC,aAAa,CAACxC,QAAD,CAAzB;;AAEA,MAAOqC,CAAAA,GAAG,CAACL,MAAX;AACH,CAbE;AAcFS,KAdE,CAcI,SAACC,GAAD,CAAS;AACZ,YAAIzB,KAAJ,+BAAI,QAAOe,MAAX,eAAI,eAAeM,GAAnB,CAAwB;AACpBzB,OAAO,EAAII,KAAK,CAACe,MAAN,CAAaM,GAAb,CAAiB,MAAjB,CAAyBlB,aAAzB,CAAX;AACH;;AAED,GAAI,CAACxB,MAAD,EAAW,CAACF,IAAZ,EAAoB,CAACkB,YAAzB,CAAuC,CAAEC,OAAO,CAAC8B,IAAR,YAAwBjC,UAAxB,EAAwC;;AAEjF;AACI,oCAAyBgC,GAAG,CAACnD,GAA7B,CAAkCoB,aAAlC,CAAiDR,WAAjD,CADJ;;AAGAH,QAAQ,EAAIwC,aAAa,CAACxC,QAAD,CAAzB;;AAEA,GAAIY,YAAY,EAAI,CAAChB,MAAjB,EAA2B,CAACF,IAAhC,CAAsC;AAClCmB,OAAO,CAAC0B,OAAR,eAA8B7B,UAA9B;AACA,MAAO,KAAP;AACH;AACD,GAAIkC,CAAAA,UAAU,CAAGC,iBAAiB,CAACH,GAAG,CAACnD,GAAL,CAAUC,cAAV,CAAjB;AACVkD,GAAG,CAACI,KADM;AAEVJ,GAAG,CAACK,MAFM;AAGVL,GAAG,CAACM,OAHX;AAIAJ,UAAU,CAAG;AACTA,UADS;AAETjC,aAFS;AAGTR,WAHS,CAAb;;;AAMA,MAAO8C,CAAAA,OAAO,CAACC,MAAR;AACaxC,UADb,gCACsDkC,UADtD,CAAP;;AAGH,CA3CE,CAAP;AA4CH,CAxHD;;;;;;;;;;;;;AAqIA,GAAMO,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACrE,CAAD,CAAIsE,GAAJ,CAASrE,OAAT,CAAgC,IAAdC,CAAAA,IAAc,2DAAP,EAAO;AAC5C,GAAI,CAACF,CAAC,CAACW,OAAP,CAAgB;AACZ,MAAOwD,CAAAA,OAAO,CAACC,MAAR;AACH,2DADG,CAAP;;AAGH;AACD,GAAMG,CAAAA,CAAC,CAAGvE,CAAC,CAACsE,GAAF,CAAMA,GAAN,CAAV;;AAEA,GAAI,CAACE,YAAGC,UAAH,CAAcF,CAAd,CAAL,CAAuB;AACnB,uCAA2BD,GAA3B,OAAoCrE,OAApC,CAA+C,iBAA/C,CAAkED,CAAC,CAACsE,GAApE,CAAyE,iBAAzE,iBAA4FtE,CAAC,CAAC0E,WAA9F,eAA4F,eAAeC,IAA3G;AACA,MAAOR,CAAAA,OAAO,CAACC,MAAR;AACqBQ,eAAMC,KAAN;AACpBN,CADoB,CADrB;AAG8BK,eAAMC,KAAN;AAC7B7E,CAAC,CAAC8E,KAAF,CAAQC,SAAR,CAAkBC,MADW,CAH9B;AAKeJ,eAAMC,KAAN,CAAY,MAAZ,CALf,sBAAP;;AAOH;;AAED,MAAO9E,CAAAA,QAAQ,CAACC,CAAD,CAAOuE,CAAP,KAAYtE,OAAZ,gCAA4BC,IAA5B,MAAkCa,KAAK,CAAE,IAAzC,GAAf;AACH,CApBD,C;;;;;;;;;;;AA+BA,GAAMkE,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,EAAD,CAAKC,IAAL,CAAWC,KAAX,CAAqB;;AAEtC,GAAIpF,CAAAA,CAAC,CAAGkF,EAAR;AACA,GAAIG,CAAAA,GAAG,CAAGF,IAAV;AACA,GAAIjF,CAAAA,IAAI,CAAGkF,KAAX;AACA,GAAI,MAAOpF,CAAAA,CAAP,GAAa,QAAjB,CAA2B;AACvBE,IAAI,CAAGmF,GAAP;AACAA,GAAG,CAAGrF,CAAN;AACAA,CAAC,CAAGsF,gBAAOC,SAAP,EAAJ;AACH;AACD,GAAIF,GAAG,CAACG,QAAJ,CAAa,KAAb,GAAuBpC,OAAO,CAACqC,QAAR,GAAqB,OAAhD,CAAyD,CAAEJ,GAAG,CAACK,OAAJ,CAAY,KAAZ,CAAmB,SAAnB,EAAgC;AAC3F,MAAO3F,CAAAA,QAAQ,CAACC,CAAD,CAAIqF,GAAJ,CAASnF,IAAT,CAAf;AACH,CAZD,C;;;;;;;;;;;AAuBA,GAAMyF,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAC3F,CAAD,CAAI4F,IAAJ,CAAU3F,OAAV,QAAsB,IAAIkE,CAAAA,OAAJ,CAAY,SAAC5D,OAAD,CAAa;AACjE,oCAAwBqF,IAAxB,KAAgC3F,OAAhC;AACA,GAAI;AACA,GAAI4F,CAAAA,MAAM,CAAG,EAAb;AACA,GAAMC,CAAAA,GAAG,CAAG,GAAIC,gBAAJ,EAAZ;AACAD,GAAG,CAACE,IAAJ,CAAShG,CAAC,CAACiG,OAAF,CAAUC,SAAnB;AACKN,IADL,CACUO,QAAQ,CAACP,IAAD,CAAO,EAAP,CADlB;AAEKQ,OAFL;AAGKC,IAHL,CAGapG,OAHb;AAIA6F,GAAG,CAACzC,EAAJ,CAAO,MAAP,CAAe,SAACiD,IAAD,CAAU;AACrB,GAAMC,CAAAA,IAAI,CAAG/D,MAAM,CAACC,IAAP,CAAY6D,IAAZ,EAAkB5D,QAAlB,EAAb;AACAmD,MAAM,EAAIU,IAAV;AACA,GAAIV,MAAM,CAACL,QAAP,CAAgB,IAAhB,CAAJ,CAA2BM,GAAG,CAACU,KAAJ;AAC9B,CAJD;AAKAV,GAAG,CAACzC,EAAJ,CAAO,OAAP,CAAgB,iBAAM9C,CAAAA,OAAO,CAACsF,MAAD,CAAb,EAAhB;AACH,CAAC,MAAOY,CAAP,CAAU;AACR,qBAASA,CAAT;AACAlG,OAAO;AACV;AACJ,CAnB2C,CAAtB,EAAtB,C;;;;;;;;;;;;;;;;;;;;;AAwCO,GAAMwD,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAC/B,IAAD,CAAgC,IAAzBtB,CAAAA,cAAyB,2DAAR,GAAQ;AAC7D,GAAI,CAACsB,IAAL,CAAW,MAAO,EAAP;AACX,GAAM0E,CAAAA,QAAQ,CAAG,+BAAjB;AACA,GAAIC,CAAAA,GAAG,CAAG3E,IAAI,CAACa,KAAL,CAAW,IAAX,CAAV;;AAEA,GAAI+D,CAAAA,QAAQ,CAAG,CAAf;AACAD,GAAG,CAAGA,GAAG,CAACE,MAAJ,CAAW,SAACC,CAAD,CAAO;AACpB,GAAIA,CAAC,GAAK,EAAV,CAAc,MAAO,MAAP;;AAEd;AACIA,CAAC,CAACtB,QAAF,CAAW,SAAX;AACGsB,CAAC,CAACtB,QAAF,CAAW,uCAAX,CADH;AAEGsB,CAAC,CAACtB,QAAF,CAAW,OAAX,CAFH;AAGGsB,CAAC,CAACtB,QAAF,CAAW,QAAX,CAHH;AAIGsB,CAAC,CAACtB,QAAF,CAAW,WAAX,CAJH;AAKGsB,CAAC,CAACtB,QAAF,CAAW,6CAAX,CALH;AAMGsB,CAAC,CAACtB,QAAF,CAAW,IAAX,CAPP;AAQE;AACE,MAAO,MAAP;AACH;;AAED;AACIsB,CAAC,CAACtB,QAAF,CAAW,SAAX;AACGsB,CAAC,CAACtB,QAAF,CAAW,QAAX,CADH;AAEGsB,CAAC,CAACtB,QAAF,CAAW,aAAX,CAFH;AAGGsB,CAAC,CAACtB,QAAF,CAAW,QAAX,CAHH;AAIGsB,CAAC,CAACtB,QAAF,CAAW,8BAAX,CAJH;AAKGsB,CAAC,CAACtB,QAAF,CAAW,UAAX,CALH;AAMGsB,CAAC,CAACtB,QAAF,CAAW,aAAX,CANH;AAOGsB,CAAC,CAACtB,QAAF,CAAW,yBAAX,CARP;AASE;AACE,MAAO,MAAP;AACH;AACD,GAAIsB,CAAC,CAACC,MAAF,CAASL,QAAT,IAAuB,CAAC,CAA5B,CAA+B;AAC3BE,QAAQ,CAAG,CAAX;AACA,MAAO,KAAP;AACH;AACD,GAAIA,QAAQ,CAAG,CAAf,CAAkB;AACdA,QAAQ,EAAI,CAAZ;AACA,MAAO,KAAP;AACH;AACD,MAAO,MAAP;AACH,CApCK,CAAN;;AAsCAD,GAAG,CAAGA,GAAG,CAACK,GAAJ,CAAQ,SAACC,GAAD,CAAS;AACnB,GAAMH,CAAAA,CAAC,CAAGG,GAAG,CAACvB,OAAJ,CAAY,SAAZ,CAAuB,GAAvB,CAAV;AACA,GAAIwB,CAAAA,cAAc,CAAGJ,CAAC,CAAC/D,SAAF,CAAY,CAAZ,CAAerC,cAAf,CAArB;AACA,GAAIwG,cAAc,CAAClE,MAAf,GAA0BtC,cAA9B,CAA8CwG,cAAc,EAAI,KAAlB;AAC9C,MAAOA,CAAAA,cAAP;AACH,CALK,CAAN;;AAOA,MAAOP,CAAAA,GAAG,CAAChF,IAAJ,CAAS,IAAT,CAAP;AACH,CApDM,C;;AAsDP,GAAMwF,CAAAA,cAAc,CAAG/D,OAAO,CAACqC,QAAR,GAAqB,OAA5C;;AAEA,GAAM2B,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,WAAD,CAAcC,QAAd,CAA2B;AAC7C,eAAOD,WAAP,CAAoBE,cAAUC,IAA9B,CAAoC,SAAC5D,GAAD,CAAS;AACzC0D,QAAQ,CAAC,CAAC1D,GAAF,CAAR;AACH,CAFD;AAGH,CAJD;;AAMA,GAAM6D,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACJ,WAAD,CAAiB;AACvC,GAAI;AACA,mBAAWA,WAAX,CAAwBE,cAAUC,IAAlC;AACA,MAAO,MAAP;AACH,CAAC,MAAOf,CAAP,CAAU;AACR,MAAO,KAAP;AACH;AACJ,CAPD;;AASA,GAAMiB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACL,WAAD,CAAcC,QAAd,CAA2B;AAC/C,eAAOD,WAAP,CAAoBE,cAAUC,IAAV,CAAiBD,cAAUI,IAA/C,CAAqD,SAAC/D,GAAD,CAAS;AAC1D0D,QAAQ,CAAC,IAAD,CAAO,CAAC1D,GAAR,CAAR;AACH,CAFD;AAGH,CAJD;;AAMA,GAAMgE,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACP,WAAD,CAAiB;AACzC,GAAI;AACA,mBAAWA,WAAX,CAAwBE,cAAUC,IAAV,CAAiBD,cAAUI,IAAnD;AACA,MAAO,KAAP;AACH,CAAC,MAAOlB,CAAP,CAAU;AACR,MAAO,MAAP;AACH;AACJ,CAPD;;AASA,GAAMoB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACR,WAAD,CAAcS,kBAAd,CAAkCR,QAAlC,CAA+C;AACrEF,aAAa,CAACC,WAAD,CAAc,SAACU,MAAD,CAAY;AACnC,GAAI,CAACA,MAAL,CAAa;AACTlI,IAAI;AACA,cAAciI,kBAAd;AACwBA,kBADxB,eADA;AAGA,SAACE,KAAD,CAAQ9E,MAAR,CAAmB;AACfoE,QAAQ,CAAC,IAAD,CAAO,CAAC,CAACpE,MAAT,CAAR;AACH,CALD,CAAJ;;AAOA;AACH;;AAEDwE,eAAe,CAACL,WAAD,CAAcC,QAAd,CAAf;AACH,CAbY,CAAb;AAcH,CAfD;;AAiBA,GAAMW,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACZ,WAAD,CAAcS,kBAAd,CAAkCR,QAAlC,CAA+C;AACxE,GAAI,qBAAqBY,IAArB,CAA0Bb,WAA1B,CAAJ,CAA4C;AACxCC,QAAQ,CAAC,IAAD,CAAO,KAAP,CAAR;AACA;AACH;AACDzH,IAAI,UAAUiI,kBAAV,CAAgC,SAACE,KAAD,CAAW;AAC3C,GAAIA,KAAK,GAAK,IAAd,CAAoB;AAChBV,QAAQ,CAAC,IAAD,CAAO,KAAP,CAAR;AACH,CAFD,IAEO;AACHA,QAAQ,CAAC,IAAD,CAAO,IAAP,CAAR;AACH;AACJ,CANG,CAAJ;AAOH,CAZD;;AAcA,GAAMa,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACd,WAAD,CAAcS,kBAAd,CAAqC;AAC/D,GAAIL,iBAAiB,CAACJ,WAAD,CAArB,CAAoC;AAChC,GAAI;AACA,GAAMnE,CAAAA,MAAM,CAAGpD,QAAQ;AACnB,cAAcgI,kBAAd;AACwBA,kBADxB,eADmB,CAAvB;;AAIA,MAAO,CAAC,CAAC5E,MAAT;AACH,CAAC,MAAO8E,KAAP,CAAc;AACZ,MAAO,MAAP;AACH;AACJ;AACD,MAAOJ,CAAAA,mBAAmB,CAACP,WAAD,CAA1B;AACH,CAbD;;AAeA,GAAMe,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACf,WAAD,CAAcS,kBAAd,CAAqC;AAClE,GAAI,qBAAqBI,IAArB,CAA0Bb,WAA1B,CAAJ,CAA4C;AACxC,MAAO,MAAP;AACH;AACD,GAAI;AACA,GAAMnE,CAAAA,MAAM,CAAGpD,QAAQ,UAAUgI,kBAAV,CAAgC,CAAE1H,KAAK,CAAE,EAAT,CAAhC,CAAvB;AACA,MAAO,CAAC,CAAC8C,MAAT;AACH,CAAC,MAAO8E,KAAP,CAAc;AACZ,MAAO,MAAP;AACH;AACJ,CAVD;;AAYA,GAAIK,CAAAA,UAAU,CAAG,oBAACC,EAAD,CAAQ;AACrB,GAAIC,CAAAA,CAAC,CAAGD,EAAR;AACA,GAAI,oBAAoBJ,IAApB,CAAyBK,CAAzB,CAAJ,CAAiC;AAC7BA,CAAC,KAAOA,CAAC,CAAC7C,OAAF,CAAU,IAAV,CAAgB,OAAhB,CAAP,IAAD;AACA6C,CAAC,CAAGA,CAAC;AACA7C,OADD,CACS,WADT,CACsB,EADtB;AAECA,OAFD,CAES,QAFT,CAEmB,KAFnB,CAAJ;AAGH;AACD,MAAO6C,CAAAA,CAAP;AACH,CATD;;AAWA,GAAIpB,cAAJ,CAAoB;AAChBkB,UAAU,CAAG,oBAACE,CAAD,CAAO;AAChB,GAAMC,CAAAA,UAAU,CAAG,OAAON,IAAP,CAAYK,CAAZ,CAAnB;AACA,GAAIC,UAAJ,CAAgB;AACZ,GAAMC,CAAAA,OAAO,MAAOnI,cAAKmI,OAAL,CAAaF,CAAb,CAAP,KAAb;AACA,GAAMG,CAAAA,QAAQ,MAAOpI,cAAKoI,QAAL,CAAcH,CAAd,CAAP,KAAd;AACA,MAAUE,CAAAA,OAAV,KAAqBC,QAArB;AACH;AACD,WAAWH,CAAX;AACH,CARD;AASH;;AAED,GAAMI,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACtB,WAAD,CAAcC,QAAd,CAA2B;AAC7C,GAAMQ,CAAAA,kBAAkB,CAAGO,UAAU,CAAChB,WAAD,CAArC;AACA,GAAI,CAACC,QAAD,EAAa,MAAOnD,CAAAA,OAAP,GAAmB,WAApC,CAAiD;AAC7C,MAAO,IAAIA,CAAAA,OAAJ,CAAY,SAAC5D,OAAD,CAAU6D,MAAV,CAAqB;AACpCuE,aAAa,CAACtB,WAAD,CAAc,SAACW,KAAD,CAAQnC,MAAR,CAAmB;AAC1C,GAAIA,MAAJ,CAAY;AACRtF,OAAO,CAAC8G,WAAD,CAAP;AACH,CAFD,IAEO;AACHjD,MAAM,CAAC4D,KAAD,CAAN;AACH;AACJ,CANY,CAAb;AAOH,CARM,CAAP;AASH;AACD,GAAIb,cAAJ,CAAoB;AAChBc,oBAAoB,CAACZ,WAAD,CAAcS,kBAAd,CAAkCR,QAAlC,CAApB;AACH,CAFD,IAEO;AACHO,iBAAiB,CAACR,WAAD,CAAcS,kBAAd,CAAkCR,QAAlC,CAAjB;AACH;AACJ,CAlBD,C;;AAoBA,GAAMsB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACvB,WAAD,CAAiB;AACvC,GAAMS,CAAAA,kBAAkB,CAAGO,UAAU,CAAChB,WAAD,CAArC;AACA,GAAIF,cAAJ,CAAoB;AAChB,MAAOiB,CAAAA,wBAAwB,CAACf,WAAD,CAAcS,kBAAd,CAA/B;AACH;AACD,MAAOK,CAAAA,qBAAqB,CAACd,WAAD,CAAcS,kBAAd,CAA5B;AACH,CAND,C;;AAQO,GAAMe,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SAAM,IAAI1E,CAAAA,OAAJ,CAAY,SAAC5D,OAAD,CAAU6D,MAAV,CAAqB;AACnE,oBAAQ,kBAAR;AACA,GAAM0E,CAAAA,IAAI,CAAG;AACT,kCADS;AAET,wEAFS;AAGT,gEAHS;AAIT,kCAJS;AAKT,wEALS;AAMT,gEANS;AAOXC,MAPW,CAOJ,SAACC,GAAD,CAAMC,GAAN,CAAc;AACaA,GAAG,CAACC,KAAJ,CAAU,eAAV,CADb,uDACZC,IADY,gBACNC,QADM,gBACIC,KADJ;AAEnB,kCAAsBF,IAAtB;AACA,GAAMG,CAAAA,QAAQ,CAAG,uBAAUF,QAAV,CAAoB,KAApB,CAAjB;AACA,GAAIE,QAAJ,CAAc;AACVN,GAAG,CAACO,IAAJ,CAAYD,QAAZ,KAAwBD,KAAxB;AACH;AACD,MAAOL,CAAAA,GAAP;AACH,CAfY,CAeV,EAfU,CAAb;AAgBA,0BAAWF,IAAX;AACKxF,IADL,CACU,iBAAM/C,CAAAA,OAAO,EAAb,EADV;AAEKoD,KAFL,CAEW,SAAA8C,CAAC,QAAIrC,CAAAA,MAAM,CAACqC,CAAD,CAAV,EAFZ;;;;;;;;;AAWH,CA7BqC,CAAN,EAAzB,C;;AA+BA,GAAM+C,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,mSAAOC,WAAP,+CAAqB,KAArB;AACtB,oBAAQ,YAAR;AACMzJ,CAFgB,CAEZsF,gBAAOC,SAAP,EAFY;;AAIhBmE,eAJgB,CAIEd,iBAAiB,CAAC,MAAD,CAAjB,EAA6B,uBAAU,MAAV,CAAkB,KAAlB,CAJ/B;AAKhBe,YALgB,CAKDrJ,cAAKqB,IAAL,CAAU2D,gBAAOsE,WAAjB,CAA8B,WAA9B,CALC;AAMhBC,WANgB,CAMFvJ,cAAKqB,IAAL,CAAU2D,gBAAOsE,WAAjB,CAA8B,mBAA9B,CANE;AAOlB3J,OAPkB,CAOR,aAPQ;AAQlBuE,YAAGC,UAAH,CAAckF,YAAd,CARkB;AASlB1J,OAAO,CAAG,MAAV,CATkB;AAUXuE,YAAGC,UAAH,CAAcoF,WAAd,CAVW;AAWlB5J,OAAO,CAAG,aAAV,CAXkB;AAYXyJ,eAZW;AAae,2BAAe;AAC5CI,IAAI,CAAE,MADsC;AAE5CC,IAAI,CAAE,gBAFsC;AAG5C7F,OAAO,CAAE,6CAHmC;AAI5C8F,OAAO,CAAE,CAAC,MAAD,CAAS,KAAT,CAJmC;AAK5CC,OAAO,CAAE,KALmC,CAAf,CAbf,8CAaVC,cAbU,uBAaVA,cAbU;;AAoBlB,GAAIA,cAAc,GAAK,MAAvB,CAA+BjK,OAAO,CAAG,MAAV,CApBb;;AAsBtB,0DAA8CA,OAA9C,KAA0D2E,eAAMuF,IAAhE,EAtBsB;;;AAyBZlF,YAAY,CAAChF,OAAD,CAzBA;AA0BZ,sCAAuBD,CAAvB,CA1BY;;AA4BdyJ,WA5Bc;AA6BP,iCA7BO;;AA+BlB,sIA/BkB;;;;AAmCRZ,gBAAgB,CAACvD,gBAAOC,SAAP,EAAD,CAnCR;AAoCRiE,UAAU,CAAC,IAAD,CApCF;;AAsCP,iCAtCO;;;;AA0CZY,KA1CY,wBA0CJpK,CAAC,CAACqK,KAAF,CAAQC,OAAR,CAAgBtF,MA1CZ,uCA0CJ,sBAAwBuF,QA1CpB,eA0CJ,uBAAkCC,kBA1C9B;;AA4Cd/I,KAAK,CAACC,OAAN,CAAc0I,KAAd;AACIA,KAAK,CAAC5E,QAAN,CAAeiF,kBAAf;AACGL,KAAK,CAAC5E,QAAN,CAAekF,qBAAf,CADH;AAEGN,KAAK,CAAC5E,QAAN,CAAemF,uBAAf,CAHP,CA5Cc;;AAiDR1F,YAAY,CAAC,YAAD,CAjDJ;;AAmDX,IAnDW;;AAqDX,iCArDW,6FAAnB,C;;;;;AA0DP,GAAM2F,CAAAA,WAAW,CAAGxH,OAAO,CAACqC,QAAR,GAAqB,QAArB;AACd,MADc;AAEdrC,OAAO,CAACqC,QAAR,GAAqB,OAArB;AACI,OADJ;AAEI,UAJV,C;;;;;;;;;;;AAee;AACXR,YAAY,CAAZA,YADW;AAEXZ,OAAO,CAAPA,OAFW;AAGXuG,WAAW,CAAXA,WAHW;AAIXjF,aAAa,CAAbA,aAJW,C","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable no-control-regex */\n/* eslint-disable no-bitwise */\n\nimport path from 'path';\nimport fs, { access, accessSync, constants } from 'fs';\nimport chalk from 'chalk';\nimport execa from 'execa';\nimport ora from 'ora';\nimport NClient from 'netcat/client';\nimport Config from '../config';\nimport { ANDROID, ANDROID_TV, ANDROID_WEAR } from '../constants';\n\nimport { logDebug, logTask, logError, logWarning, logRaw } from './logger';\nimport { removeDirs, invalidatePodsChecksum } from './fileutils';\nimport { inquirerPrompt } from './prompt';\nimport { replaceOverridesInString } from '../utils';\nimport { doResolve } from '../resolve';\n\nconst { exec, execSync } = require('child_process');\n\n/**\n *\n * Also accepts the Node's child_process exec/spawn options\n *\n * @typedef {Object} Opts\n * @property {Object} privateParams - private params that will be masked in the logs\n * @property {Boolean} silent - don't print anything\n * @property {Boolean} ignoreErrors - will print the loader but it will finish with a\n * checkmark regardless of the outcome. Also, it never throws a catch.\n * @property {Boolean} interactive - when you want to execute a command that requires user input\n *\n * Execute commands\n *\n * @param {String} command - command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst _execute = (c, command, opts = {}) => {\n    const defaultOpts = {\n        stdio: 'pipe',\n        localDir: path.resolve('./node_modules/.bin'),\n        preferLocal: true,\n        all: true,\n        maxErrorLength: c.program?.maxErrorLength,\n        mono: c.program?.mono\n    };\n\n    if (opts.interactive) {\n        defaultOpts.silent = true;\n        defaultOpts.stdio = 'inherit';\n        defaultOpts.shell = true;\n    }\n\n    const mergedOpts = { ...defaultOpts, ...opts };\n\n    let cleanCommand = command;\n    let interval;\n    const intervalTimer = 30000; // 30s\n    let timer = intervalTimer;\n    const privateMask = '*******';\n    const cleanRawCmd = opts.rawCommand?.args || [];\n    if (Array.isArray(command)) cleanCommand = command.join(' ');\n\n    cleanCommand += cleanRawCmd.join(' ');\n    let logMessage = cleanCommand;\n    const { privateParams } = mergedOpts;\n    if (privateParams && Array.isArray(privateParams)) {\n        logMessage = replaceOverridesInString(\n            command,\n            privateParams,\n            privateMask\n        );\n    }\n\n    logDebug(`_execute: ${logMessage}`);\n    const { silent, mono, maxErrorLength, ignoreErrors } = mergedOpts;\n    const spinner = !silent && !mono && ora({ text: `Executing: ${logMessage}` }).start();\n\n    if (mono) {\n        interval = setInterval(() => {\n            logRaw(`Executing: ${logMessage} - ${timer / 1000}s`);\n            timer += intervalTimer;\n        }, intervalTimer);\n    }\n    let child;\n    if (opts.rawCommand) {\n        const { args } = opts.rawCommand;\n        child = execa(command, args, mergedOpts);\n    } else {\n        child = execa.command(cleanCommand, mergedOpts);\n    }\n\n    const MAX_OUTPUT_LENGTH = 200;\n\n    const printLastLine = (buffer) => {\n        const text = Buffer.from(buffer)\n            .toString()\n            .trim();\n        const lastLine = text.split('\\n').pop();\n        spinner.text = replaceOverridesInString(\n            lastLine.substring(0, MAX_OUTPUT_LENGTH),\n            privateParams,\n            privateMask\n        );\n        if (lastLine.length === MAX_OUTPUT_LENGTH) spinner.text += '...\\n';\n    };\n\n    if (c.program?.info && child?.stdout?.pipe) {\n        child.stdout.pipe(process.stdout);\n    } else if (spinner && child?.stdout?.on) {\n        child.stdout.on('data', printLastLine);\n    }\n\n    return child\n        .then((res) => {\n            if (child?.stdout?.off) {\n                spinner && child.stdout.off('data', printLastLine);\n            }\n\n            !silent && !mono && spinner.succeed(`Executing: ${logMessage}`);\n            logDebug(\n                replaceOverridesInString(res.all, privateParams, privateMask)\n            );\n            interval && clearInterval(interval);\n            // logDebug(res);\n            return res.stdout;\n        })\n        .catch((err) => {\n            if (child?.stdout?.off) {\n                spinner && child.stdout.off('data', printLastLine);\n            }\n\n            if (!silent && !mono && !ignoreErrors) { spinner.fail(`FAILED: ${logMessage}`); } // parseErrorMessage will return false if nothing is found, default to previous implementation\n\n            logDebug(\n                replaceOverridesInString(err.all, privateParams, privateMask)\n            );\n            interval && clearInterval(interval);\n            // logDebug(err);\n            if (ignoreErrors && !silent && !mono) {\n                spinner.succeed(`Executing: ${logMessage}`);\n                return true;\n            }\n            let errMessage = parseErrorMessage(err.all, maxErrorLength)\n                || err.stack\n                || err.stderr\n                || err.message;\n            errMessage = replaceOverridesInString(\n                errMessage,\n                privateParams,\n                privateMask\n            );\n\n            return Promise.reject(\n                `COMMAND: \\n\\n${logMessage} \\n\\nFAILED with ERROR: \\n\\n${errMessage}`\n            ); // parseErrorMessage will return false if nothing is found, default to previous implementation\n        });\n};\n\n/**\n *\n * Execute CLI command\n *\n * @param {Object} c - the trusty old c object\n * @param {String} cli - the cli to be executed\n * @param {String} command - the command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst execCLI = (c, cli, command, opts = {}) => {\n    if (!c.program) {\n        return Promise.reject(\n            'You need to pass c object as first parameter to execCLI()'\n        );\n    }\n    const p = c.cli[cli];\n\n    if (!fs.existsSync(p)) {\n        logDebug(`execCLI error: ${cli} | ${command}`, '\\nCLI Config:\\n', c.cli, '\\nSDK Config:\\n', c.buildConfig?.sdks);\n        return Promise.reject(\n            `Location of your cli ${chalk.white(\n                p\n            )} does not exists. check your ${chalk.white(\n                c.paths.workspace.config\n            )} file if your ${chalk.white('sdks')} paths are correct`\n        );\n    }\n\n    return _execute(c, `${p} ${command}`, { ...opts, shell: true });\n};\n\n/**\n *\n * Execute a plain command\n *\n * @param {String} command - the command to be executed\n * @param {Opts} [opts={}] - the options for the command\n * @returns {Promise}\n *\n */\nconst executeAsync = (_c, _cmd, _opts) => {\n    // swap values if c is not specified and get it from it's rightful place, config :)\n    let c = _c;\n    let cmd = _cmd;\n    let opts = _opts;\n    if (typeof c === 'string') {\n        opts = cmd;\n        cmd = c;\n        c = Config.getConfig();\n    }\n    if (cmd.includes('npm') && process.platform === 'win32') { cmd.replace('npm', 'npm.cmd'); }\n    return _execute(c, cmd, opts);\n};\n\n/**\n *\n * Connect to a local telnet server and execute a command\n *\n * @param {Number|String} port - where do you want me to connect to?\n * @param {String} command - the command to be executed once I'm connected\n * @returns {Promise}\n *\n */\nconst executeTelnet = (c, port, command) => new Promise((resolve) => {\n    logDebug(`execTelnet: ${port} ${command}`);\n    try {\n        let output = '';\n        const nc2 = new NClient();\n        nc2.addr(c.runtime.localhost)\n            .port(parseInt(port, 10))\n            .connect()\n            .send(`${command}\\n`);\n        nc2.on('data', (data) => {\n            const resp = Buffer.from(data).toString();\n            output += resp;\n            if (output.includes('OK')) nc2.close();\n        });\n        nc2.on('close', () => resolve(output));\n    } catch (e) {\n        logError(e);\n        resolve();\n    }\n});\n\n// Legacy error parser\n// export const parseErrorMessage = (text, maxErrorLength = 800) => {\n//     const errors = [];\n//     const toSearch = /(exception|error|fatal|\\[!])/i;\n//\n//     const extractError = (t) => {\n//         const errorFound = t ? t.search(toSearch) : -1;\n//         if (errorFound === -1) return errors.length ? errors.join(' ') : false; // return the errors or false if we found nothing at all\n//         const usefulString = t.substring(errorFound); // dump first part of the string that doesn't contain what we look for\n//         let extractedError = usefulString.substring(0, maxErrorLength);\n//         if (extractedError.length === maxErrorLength) extractedError += '...'; // add elipsis if string is bigger than maxErrorLength\n//         errors.push(extractedError); // save the error\n//         const newString = usefulString.substring(100); // dump everything we processed and continue\n//         return extractError(newString);\n//     };\n//\n//     return extractError(text);\n// };\n\nexport const parseErrorMessage = (text, maxErrorLength = 800) => {\n    if (!text) return '';\n    const toSearch = /(exception|error|fatal|\\[!])/i;\n    let arr = text.split('\\n');\n\n    let errFound = 0;\n    arr = arr.filter((v) => {\n        if (v === '') return false;\n        // Cleaner iOS reporting\n        if (\n            v.includes('-Werror')\n            || v.includes('following modules are linked manually')\n            || v.includes('warn ')\n            || v.includes('note: ')\n            || v.includes('warning: ')\n            || v.includes('Could not find the following native modules')\n            || v.includes('⚠️')\n        ) {\n            return false;\n        }\n        // Cleaner Android reporting\n        if (\n            v.includes('[DEBUG]')\n            || v.includes('[INFO]')\n            || v.includes('[LIFECYCLE]')\n            || v.includes('[WARN]')\n            || v.includes(':+HeapDumpOnOutOfMemoryError')\n            || v.includes('.errors.')\n            || v.includes('-exception-')\n            || v.includes('error_prone_annotations')\n        ) {\n            return false;\n        }\n        if (v.search(toSearch) !== -1) {\n            errFound = 5;\n            return true;\n        }\n        if (errFound > 0) {\n            errFound -= 1;\n            return true;\n        }\n        return false;\n    });\n\n    arr = arr.map((str) => {\n        const v = str.replace(/\\s{2,}/g, ' ');\n        let extractedError = v.substring(0, maxErrorLength);\n        if (extractedError.length === maxErrorLength) extractedError += '...';\n        return extractedError;\n    });\n\n    return arr.join('\\n');\n};\n\nconst isUsingWindows = process.platform === 'win32';\n\nconst fileNotExists = (commandName, callback) => {\n    access(commandName, constants.F_OK, (err) => {\n        callback(!err);\n    });\n};\n\nconst fileNotExistsSync = (commandName) => {\n    try {\n        accessSync(commandName, constants.F_OK);\n        return false;\n    } catch (e) {\n        return true;\n    }\n};\n\nconst localExecutable = (commandName, callback) => {\n    access(commandName, constants.F_OK | constants.X_OK, (err) => {\n        callback(null, !err);\n    });\n};\n\nconst localExecutableSync = (commandName) => {\n    try {\n        accessSync(commandName, constants.F_OK | constants.X_OK);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst commandExistsUnix = (commandName, cleanedCommandName, callback) => {\n    fileNotExists(commandName, (isFile) => {\n        if (!isFile) {\n            exec(\n                `command -v ${cleanedCommandName} 2>/dev/null`\n                    + ` && { echo >&1 ${cleanedCommandName}; exit 0; }`,\n                (error, stdout) => {\n                    callback(null, !!stdout);\n                }\n            );\n            return;\n        }\n\n        localExecutable(commandName, callback);\n    });\n};\n\nconst commandExistsWindows = (commandName, cleanedCommandName, callback) => {\n    if (/[\\x00-\\x1f<>:\"|?*]/.test(commandName)) {\n        callback(null, false);\n        return;\n    }\n    exec(`where ${cleanedCommandName}`, (error) => {\n        if (error !== null) {\n            callback(null, false);\n        } else {\n            callback(null, true);\n        }\n    });\n};\n\nconst commandExistsUnixSync = (commandName, cleanedCommandName) => {\n    if (fileNotExistsSync(commandName)) {\n        try {\n            const stdout = execSync(\n                `command -v ${cleanedCommandName} 2>/dev/null`\n                    + ` && { echo >&1 ${cleanedCommandName}; exit 0; }`\n            );\n            return !!stdout;\n        } catch (error) {\n            return false;\n        }\n    }\n    return localExecutableSync(commandName);\n};\n\nconst commandExistsWindowsSync = (commandName, cleanedCommandName) => {\n    if (/[\\x00-\\x1f<>:\"|?*]/.test(commandName)) {\n        return false;\n    }\n    try {\n        const stdout = execSync(`where ${cleanedCommandName}`, { stdio: [] });\n        return !!stdout;\n    } catch (error) {\n        return false;\n    }\n};\n\nlet cleanInput = (_s) => {\n    let s = _s;\n    if (/[^A-Za-z0-9_/:=-]/.test(s)) {\n        s = `'${s.replace(/'/g, \"'\\\\''\")}'`;\n        s = s\n            .replace(/^(?:'')+/g, '') // unduplicate single-quote at the beginning\n            .replace(/\\\\'''/g, \"\\\\'\"); // remove non-escaped single-quote if there are enclosed between 2 escaped\n    }\n    return s;\n};\n\nif (isUsingWindows) {\n    cleanInput = (s) => {\n        const isPathName = /[\\\\]/.test(s);\n        if (isPathName) {\n            const dirname = `\"${path.dirname(s)}\"`;\n            const basename = `\"${path.basename(s)}\"`;\n            return `${dirname}:${basename}`;\n        }\n        return `\"${s}\"`;\n    };\n}\n\nconst commandExists = (commandName, callback) => {\n    const cleanedCommandName = cleanInput(commandName);\n    if (!callback && typeof Promise !== 'undefined') {\n        return new Promise((resolve, reject) => {\n            commandExists(commandName, (error, output) => {\n                if (output) {\n                    resolve(commandName);\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n    if (isUsingWindows) {\n        commandExistsWindows(commandName, cleanedCommandName, callback);\n    } else {\n        commandExistsUnix(commandName, cleanedCommandName, callback);\n    }\n};\n\nconst commandExistsSync = (commandName) => {\n    const cleanedCommandName = cleanInput(commandName);\n    if (isUsingWindows) {\n        return commandExistsWindowsSync(commandName, cleanedCommandName);\n    }\n    return commandExistsUnixSync(commandName, cleanedCommandName);\n};\n\nexport const cleanNodeModules = () => new Promise((resolve, reject) => {\n    logTask('cleanNodeModules');\n    const dirs = [\n        'react-native-safe-area-view/.git',\n        '@react-navigation/native/node_modules/react-native-safe-area-view/.git',\n        'react-navigation/node_modules/react-native-safe-area-view/.git',\n        'react-native-safe-area-view/.git',\n        '@react-navigation/native/node_modules/react-native-safe-area-view/.git',\n        'react-navigation/node_modules/react-native-safe-area-view/.git'\n    ].reduce((acc, dir) => {\n        const [_all, aPackage, aPath] = dir.match(/([^/]+)\\/(.*)/);\n        logDebug(`Cleaning: ${_all}`);\n        const resolved = doResolve(aPackage, false);\n        if (resolved) {\n            acc.push(`${resolved}/${aPath}`);\n        }\n        return acc;\n    }, []);\n    removeDirs(dirs)\n        .then(() => resolve())\n        .catch(e => reject(e));\n    // removeDirs([\n    //     path.join(c.paths.project.nodeModulesDir, 'react-native-safe-area-view/.git'),\n    //     path.join(c.paths.project.nodeModulesDir, '@react-navigation/native/node_modules/react-native-safe-area-view/.git'),\n    //     path.join(c.paths.project.nodeModulesDir, 'react-navigation/node_modules/react-native-safe-area-view/.git'),\n    //     path.join(c.paths.rnv.nodeModulesDir, 'react-native-safe-area-view/.git'),\n    //     path.join(c.paths.rnv.nodeModulesDir, '@react-navigation/native/node_modules/react-native-safe-area-view/.git'),\n    //     path.join(c.paths.rnv.nodeModulesDir, 'react-navigation/node_modules/react-native-safe-area-view/.git')\n    // ]).then(() => resolve()).catch(e => reject(e));\n});\n\nexport const npmInstall = async (failOnError = false) => {\n    logTask('npmInstall');\n    const c = Config.getConfig();\n\n    const isYarnInstalled = commandExistsSync('yarn') || doResolve('yarn', false);\n    const yarnLockPath = path.join(Config.projectPath, 'yarn.lock');\n    const npmLockPath = path.join(Config.projectPath, 'package-lock.json');\n    let command = 'npm install';\n    if (fs.existsSync(yarnLockPath)) {\n        command = 'yarn';\n    } else if (fs.existsSync(npmLockPath)) {\n        command = 'npm install';\n    } else if (isYarnInstalled) {\n        const { packageManager } = await inquirerPrompt({\n            type: 'list',\n            name: 'packageManager',\n            message: 'What package manager would you like to use?',\n            choices: ['yarn', 'npm'],\n            default: 'npm'\n        });\n        if (packageManager === 'yarn') command = 'yarn';\n    }\n    logTask(`npmInstall: package manager used: (${command})`, chalk.grey);\n\n    try {\n        await executeAsync(command);\n        await invalidatePodsChecksum(c);\n    } catch (e) {\n        if (failOnError) {\n            return logError(e);\n        }\n        logWarning(\n            `${e}\\n Seems like your node_modules is corrupted by other libs. ReNative will try to fix it for you`\n        );\n        try {\n            await cleanNodeModules(Config.getConfig());\n            await npmInstall(true);\n        } catch (npmErr) {\n            return logError(npmErr);\n        }\n    }\n    try {\n        const plats = c.files.project.config?.defaults?.supportedPlatforms;\n        if (\n            Array.isArray(plats)\n            && (plats.includes(ANDROID)\n                || plats.includes(ANDROID_TV)\n                || plats.includes(ANDROID_WEAR))\n        ) {\n            await executeAsync('npx jetify');\n        }\n        return true;\n    } catch (jetErr) {\n        return logError(jetErr);\n    }\n};\n\n// eslint-disable-next-line no-nested-ternary\nconst openCommand = process.platform === 'darwin'\n    ? 'open'\n    : process.platform === 'win32'\n        ? 'start'\n        : 'xdg-open';\n\nexport {\n    executeAsync,\n    execCLI,\n    commandExists,\n    commandExistsSync,\n    openCommand,\n    executeTelnet\n};\n\nexport default {\n    executeAsync,\n    execCLI,\n    openCommand,\n    executeTelnet\n};\n"],"file":"exec.js"}