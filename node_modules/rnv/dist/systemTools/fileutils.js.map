{"version":3,"sources":["../../src/systemTools/fileutils.js"],"names":["fsWriteFileSync","dest","data","encoding","fs","writeFileSync","fsCopyFileSync","source","copyFileSync","_getSanitizedPath","origPath","timestampPathsConfig","paths","length","timestamp","pths","includes","ext","path","extname","fileName","basename","dirPath","dirname","newPath","join","target","skipOverride","targetFile","indexOf","existsSync","lstatSync","isDirectory","src","readFileSync","dst","Buffer","compare","e","SKIP_INJECT_EXTENSIONS","writeCleanFile","destination","overrides","c","pFile","test","pFileClean","forEach","v","regEx","RegExp","pattern","replace","override","occurences","match","occ","val","configVal","platform","readCleanFile","from","copyFileWithInjectSync","injectObject","invalidatePodsChecksum","appFolder","project","builds","dir","runtime","appId","podChecksumPath","unlinkSync","copyFolderRecursiveSync","convertSvg","files","targetFolder","mkdirSync","readdirSync","file","curSource","jsDest","saveAsJs","copyFolderContentsRecursiveSync","skipPaths","copyFolderContentsRecursive","Promise","resolve","reject","err","Svg2Js","createSync","removeDir","pth","callback","shelljs","mkdir","cleanFolder","d","removeFilesSync","filePaths","filePath","removeDirsSync","dirPaths","i","removeDirSync","removeDirs","allFolders","deletedFolders","_dir","_rmSelf","rmSelf","undefined","x","statSync","e2","rmdirSync","obj","spaces","addNewLine","output","JSON","stringify","toString","writeObjectSync","readObjectSync","sanitize","parse","sanitizeDynamicRefs","_refs","sanitizeDynamicProps","chalk","white","updateObjectSync","updateObj","getRealPath","p","key","original","startsWith","rnv","home","workspace","_refToValue","ref","split","realPath","reduce","o","arrayMerge","destinationArray","sourceArray","jointArray","concat","uniqueArray","filter","item","index","_arrayMergeOverride","Array","isArray","Object","keys","fixResolve","text","matches","newText","forceForwardPaths","props","configProps","runtimeProps","pk","propVal","pk2","pk3","newKey","mergeObjects","obj1","obj2","dynamicRefs","replaceArrays","updateConfigFile","update","globalConfigPath","configContents","androidSdk","sdks","ANDROID_SDK","tizenSdk","TIZEN_SDK","webosSdk","WEBOS_SDK","replaceHomeFolder","isSystemWin","process","env","USERPROFILE","HOME","getFileListSync","results","list","fileFixed","stat","push"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport fs from 'fs';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport Svg2Js from 'svg2js';\nimport shelljs from 'shelljs';\nimport merge from 'deepmerge';\nimport chalk from 'chalk';\nimport ncp from 'ncp';\nimport { isSystemWin } from '../utils';\n\nimport { logDebug, logError, logWarning, logInfo } from './logger';\nimport { getConfigProp } from '../common';\nimport { doResolve } from '../resolve';\n\nexport const fsWriteFileSync = (dest, data, encoding) => {\n    // console.log('FS_WRITE', dest);\n    fs.writeFileSync(dest, data, encoding);\n};\n\nexport const fsCopyFileSync = (source, dest) => {\n    // console.log('FS_COPY', source);\n    fs.copyFileSync(source, dest);\n};\n\n\nconst _getSanitizedPath = (origPath, timestampPathsConfig) => {\n    if (timestampPathsConfig?.paths?.length && timestampPathsConfig?.timestamp) {\n        const pths = timestampPathsConfig.paths;\n        if (pths.includes(origPath)) {\n            const ext = path.extname(origPath);\n            const fileName = path.basename(origPath, ext);\n            const dirPath = path.dirname(origPath);\n            const newPath = path.join(dirPath, `${fileName}-${timestampPathsConfig.timestamp}${ext}`);\n            return newPath;\n        }\n    }\n    return origPath;\n};\n\n// const getValidatedPath = (c, platform, targetPath) => {\n//     const bFilesArr = getTimestampBuildFiles(c, platform);\n//     if(bFilesArr?.) {\n//       if()\n//     }\n//     return targetPath\n// }\n\nexport const copyFileSync = (source, target, skipOverride, timestampPathsConfig) => {\n    logDebug('copyFileSync', source);\n    let targetFile = target;\n    // if target is a directory a new file with the same name will be created\n    if (source.indexOf('.DS_Store') !== -1) return;\n\n    if (fs.existsSync(target)) {\n        if (fs.lstatSync(target).isDirectory()) {\n            targetFile = path.join(target, path.basename(source));\n        }\n    }\n    if (fs.existsSync(targetFile)) {\n        if (skipOverride) return;\n        const src = fs.readFileSync(source);\n        const dst = fs.readFileSync(targetFile);\n\n        if (Buffer.compare(src, dst) === 0) return;\n    }\n    logDebug('copyFileSync', source, targetFile, 'executed');\n    try {\n        fsCopyFileSync(source, _getSanitizedPath(targetFile, timestampPathsConfig));\n    } catch (e) {\n        logDebug('copyFileSync', e);\n    }\n};\n\nconst SKIP_INJECT_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.svg', '.jar', '.zip'];\nexport const writeCleanFile = (source, destination, overrides, timestampPathsConfig, c) => {\n    // logTask(`writeCleanFile`)\n    // console.log('writeCleanFile', destination);\n    if (!fs.existsSync(source)) {\n        logError(`Cannot write file. source path doesn't exists: ${source}`);\n        return;\n    }\n    if (!fs.existsSync(destination)) {\n        logDebug(\n            `destination path doesn't exists: ${destination}. will create new one`\n        );\n        // return;\n    }\n    const ext = path.extname(source);\n    if (SKIP_INJECT_EXTENSIONS.includes(ext)) {\n        fsCopyFileSync(source, _getSanitizedPath(destination, timestampPathsConfig));\n    } else {\n        const pFile = fs.readFileSync(source, 'utf8');\n        if (/\\ufffd/.test(pFile) === true) {\n            // Handle uncaught binary files\n            fsCopyFileSync(source, _getSanitizedPath(destination, timestampPathsConfig));\n        } else {\n            let pFileClean = pFile;\n            if (overrides?.forEach) {\n                overrides.forEach((v) => {\n                    const regEx = new RegExp(v.pattern, 'g');\n                    pFileClean = pFileClean.replace(regEx, v.override);\n                });\n            }\n            if (c) {\n                const regEx = /{{configProps.([\\s\\S]*?)}}/g;\n                const occurences = pFileClean.match(regEx);\n                if (occurences) {\n                    occurences.forEach((occ) => {\n                        const val = occ.replace('{{configProps.', '').replace('}}', '');\n                        const configVal = getConfigProp(c, c.platform, val, '');\n                        pFileClean = pFileClean.replace(occ, configVal);\n                    });\n                }\n            }\n            fsWriteFileSync(_getSanitizedPath(destination, timestampPathsConfig), pFileClean, 'utf8');\n        }\n    }\n};\n\n// TODO: remove and use fileutils one\n// export const writeCleanFile = (source, destination, overrides) => {\n//     // logTask(`writeCleanFile`)\n//     if (!fs.existsSync(source)) {\n//         logError(`Cannot write file. source path doesn't exists: ${source}`);\n//         return;\n//     }\n//     if (!fs.existsSync(destination)) {\n//         logWarning(\n//             `destination path doesn't exists: ${destination}. will create new one`\n//         );\n//         // return;\n//     }\n//     const pFile = fs.readFileSync(source, 'utf8');\n//     let pFileClean = pFile;\n//     if (overrides) {\n//         overrides.forEach((v) => {\n//             const regEx = new RegExp(v.pattern, 'g');\n//             pFileClean = pFileClean.replace(regEx, v.override);\n//         });\n//     }\n//\n//     fsWriteFileSync(destination, pFileClean, 'utf8');\n// };\n\nexport const readCleanFile = (source, overrides) => {\n    // logTask(`writeCleanFile`)\n    // console.log('readCleanFile', source);\n    if (!fs.existsSync(source)) {\n        logError(`Cannot write file. source path doesn't exists: ${source}`);\n        return;\n    }\n\n    const pFile = fs.readFileSync(source, 'utf8');\n    let pFileClean = pFile;\n    if (overrides?.forEach) {\n        overrides.forEach((v) => {\n            const regEx = new RegExp(v.pattern, 'g');\n            pFileClean = pFileClean.replace(regEx, v.override);\n        });\n    }\n\n    return Buffer.from(pFileClean, 'utf8');\n};\n\nexport const copyFileWithInjectSync = (source, target, skipOverride, injectObject, timestampPathsConfig, c) => {\n    logDebug('copyFileWithInjectSync', source);\n\n    let targetFile = target;\n    // if target is a directory a new file with the same name will be created\n    if (source.indexOf('.DS_Store') !== -1) return;\n\n    if (fs.existsSync(target)) {\n        if (fs.lstatSync(target).isDirectory()) {\n            targetFile = path.join(target, path.basename(source));\n        }\n    }\n    if (fs.existsSync(targetFile)) {\n        if (skipOverride) return;\n        const src = readCleanFile(source, injectObject);\n        const dst = fs.readFileSync(targetFile);\n\n        if (Buffer.compare(src, dst) === 0) return;\n    }\n    logDebug('copyFileSync', source, targetFile, 'executed');\n\n    try {\n        writeCleanFile(\n            source,\n            targetFile,\n            injectObject,\n            timestampPathsConfig,\n            c\n        );\n    } catch (e) {\n        logDebug('copyFileSync', e);\n    }\n};\n\nexport const invalidatePodsChecksum = (c) => {\n    const appFolder = path.join(\n        c.paths.project.builds.dir,\n        `${c.runtime.appId}_${c.platform}`\n    );\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    if (fs.existsSync(podChecksumPath)) {\n        fs.unlinkSync(podChecksumPath);\n    }\n};\n\nexport const copyFolderRecursiveSync = (\n    source,\n    target,\n    convertSvg = true,\n    skipOverride,\n    injectObject = null,\n    timestampPathsConfig = null,\n    c\n) => {\n    logDebug('copyFolderRecursiveSync', source, target);\n    if (!fs.existsSync(source)) return;\n\n    let files = [];\n    // check if folder needs to be created or integrated\n    const targetFolder = path.join(target, path.basename(source));\n    if (!fs.existsSync(targetFolder)) {\n        mkdirSync(targetFolder);\n    }\n    // copy\n    if (fs.lstatSync(source).isDirectory()) {\n        files = fs.readdirSync(source);\n        files.forEach((file) => {\n            const curSource = path.join(source, file);\n            if (fs.lstatSync(curSource).isDirectory()) {\n                copyFolderRecursiveSync(curSource, targetFolder,\n                    convertSvg, skipOverride, injectObject, timestampPathsConfig, c);\n            } else if (\n                path.extname(curSource) === '.svg'\n                && convertSvg === true\n            ) {\n                const jsDest = path.join(\n                    targetFolder,\n                    `${path.basename(curSource)}.js`\n                );\n                logDebug(\n                    `file ${curSource} is svg and convertSvg is set to true. converting to ${jsDest}`\n                );\n                saveAsJs(curSource, jsDest);\n            } else if (injectObject !== null) {\n                copyFileWithInjectSync(curSource, targetFolder, skipOverride, injectObject, timestampPathsConfig, c);\n            } else {\n                copyFileSync(curSource, targetFolder, skipOverride, timestampPathsConfig);\n            }\n        });\n    }\n};\n\n// let newPath = v;\n//\n// const fileNameArr = v.split('.');\n// if(fileNameArr.length > 1) {\n//   const noExtPath = fileNameArr\n//   newPath = fileNameArr.join('.')\n// }\n//\n// return path.join(pPath, newPath)\n// }));\n\nexport const copyFolderContentsRecursiveSync = (source, target, convertSvg = true,\n    skipPaths, skipOverride, injectObject = null, timestampPathsConfig = null, c) => {\n    logDebug('copyFolderContentsRecursiveSync', source, target, skipPaths);\n    if (!fs.existsSync(source)) return;\n    let files = [];\n    const targetFolder = path.join(target);\n    if (!fs.existsSync(targetFolder)) {\n        mkdirSync(targetFolder);\n    }\n    if (fs.lstatSync(source).isDirectory()) {\n        files = fs.readdirSync(source);\n        files.forEach((file) => {\n            const curSource = path.join(source, file);\n            if (!skipPaths || (skipPaths && !skipPaths.includes(curSource))) {\n                if (fs.lstatSync(curSource).isDirectory()) {\n                    copyFolderRecursiveSync(curSource, targetFolder, convertSvg,\n                        skipOverride, injectObject, timestampPathsConfig, c);\n                } else if (injectObject !== null) {\n                    // console.log('BAAA', targetFolder);\n                    copyFileWithInjectSync(curSource, targetFolder, skipOverride,\n                        injectObject, timestampPathsConfig, c);\n                } else if (path.extname(curSource) === '.svg' && convertSvg === true) {\n                    const jsDest = path.join(\n                        targetFolder,\n                        `${path.basename(curSource)}.js`\n                    );\n                    logDebug(\n                        `file ${curSource} is svg and convertSvg is set to true. converting to ${jsDest}`\n                    );\n                    saveAsJs(curSource, jsDest);\n                } else {\n                    copyFileSync(curSource, targetFolder, skipOverride, timestampPathsConfig);\n                }\n            }\n        });\n    }\n};\n\nexport const copyFolderContentsRecursive = (\n    source,\n    target,\n    convertSvg = true,\n    skipPaths\n) => new Promise((resolve, reject) => {\n    logDebug('copyFolderContentsRecursive', source, target, skipPaths, convertSvg);\n    if (!fs.existsSync(source)) return;\n    const targetFolder = path.resolve(target);\n    if (!fs.existsSync(targetFolder)) {\n        mkdirSync(targetFolder);\n    }\n    ncp(source, targetFolder, (err) => {\n        if (err) {\n            return reject(err);\n        }\n        return resolve();\n    });\n});\n\nexport const saveAsJs = (source, dest) => {\n    Svg2Js.createSync({\n        source,\n        destination: dest\n    });\n};\n\nexport const removeDir = (pth, callback) => {\n    rimraf(pth, callback);\n};\n\nexport const mkdirSync = (dir) => {\n    if (!dir) return;\n    if (fs.existsSync(dir)) return;\n    try {\n        shelljs.mkdir('-p', dir);\n    } catch (e) {\n        logWarning(`shelljs.mkdir failed for dir: ${dir} with error: ${e}`);\n    }\n};\n\nexport const cleanFolder = d => new Promise((resolve) => {\n    logDebug('cleanFolder', d);\n    removeDir(d, () => {\n        mkdirSync(d);\n        resolve();\n    });\n});\n\nexport const removeFilesSync = (filePaths) => {\n    logDebug('removeFilesSync', filePaths);\n    filePaths.forEach((filePath) => {\n        try {\n            if (fs.existsSync(filePath)) {\n                fs.unlinkSync(filePath);\n            } else {\n                logDebug(`Path ${filePath} does not exist`);\n            }\n        } catch (e) {\n            logError(e);\n        }\n    });\n};\n\nexport const removeDirsSync = (dirPaths) => {\n    logDebug('removeDirsSync', dirPaths);\n\n    for (let i = 0; i < dirPaths.length; i++) {\n        try {\n            removeDirSync(dirPaths[i]);\n        } catch (e) {\n            logError(e);\n        }\n    }\n};\n\n/* eslint-disable no-loop-func */\nexport const removeDirs = dirPaths => new Promise((resolve) => {\n    logDebug('removeDirs', dirPaths);\n    const allFolders = dirPaths.length;\n    let deletedFolders = 0;\n    for (let i = 0; i < allFolders; i++) {\n        rimraf(dirPaths[i], (e) => {\n            if (e) {\n                logError(e);\n            }\n            deletedFolders++;\n            if (deletedFolders >= allFolders) resolve();\n        });\n    }\n    if (allFolders === 0) resolve();\n});\n\nexport const removeDirSync = (_dir, _rmSelf) => {\n    let dir = _dir;\n    let rmSelf = _rmSelf;\n    let files;\n    rmSelf = rmSelf === undefined ? true : rmSelf;\n    dir += '/';\n    try {\n        files = fs.readdirSync(dir);\n    } catch (e) {\n        logDebug('!Oops, directory not exist.');\n        return;\n    }\n    if (files.length > 0) {\n        files.forEach((x) => {\n            try {\n                if (fs.statSync(dir + x).isDirectory()) {\n                    removeDirSync(dir + x);\n                } else {\n                    fs.unlinkSync(dir + x);\n                }\n            } catch (e) {\n                logDebug(`removeDirSync error:${e}. will try to unlink`);\n                try {\n                    fs.unlinkSync(dir + x);\n                } catch (e2) {\n                    logDebug(`removeDirSync error:${e}`);\n                }\n            }\n        });\n    }\n    if (rmSelf) {\n        // check if user want to delete the directory ir just the files in this directory\n        fs.rmdirSync(dir);\n    }\n};\n\nexport const writeFileSync = (filePath, obj, spaces, addNewLine = true) => {\n    logDebug('writeFileSync', filePath);\n    if (filePath.includes('?') || filePath.includes('undefined')) return;\n    let output;\n    if (typeof obj === 'string') {\n        output = obj;\n    } else {\n        output = `${JSON.stringify(obj, null, spaces || 4)}${\n            addNewLine ? '\\n' : ''\n        }`;\n    }\n    if (fs.existsSync(filePath)) {\n        if (fs.readFileSync(filePath).toString() === output) return;\n    }\n    logDebug('writeFileSync', filePath, 'executed');\n    fsWriteFileSync(filePath, output);\n};\n\nexport const writeObjectSync = (filePath, obj, spaces, addNewLine = true) => {\n    logDebug('writeObjectSync', filePath);\n    logWarning('writeObjectSync is DEPRECATED. use writeFileSync instead');\n    return writeFileSync(filePath, obj, spaces, addNewLine);\n};\n\nexport const readObjectSync = (filePath, sanitize = false, c) => {\n    logDebug(`readObjectSync:${sanitize}:${filePath}`);\n    if (!filePath) {\n        logDebug('readObjectSync: filePath is undefined');\n        return null;\n    }\n    if (!fs.existsSync(filePath)) {\n        logDebug(`readObjectSync: File at ${filePath} does not exist`);\n        return null;\n    }\n    let obj;\n    try {\n        obj = JSON.parse(fs.readFileSync(filePath));\n        if (sanitize) {\n            logDebug(`readObjectSync: will sanitize file at: ${filePath}`);\n            if (c) {\n                obj = sanitizeDynamicRefs(c, obj);\n            }\n            if (obj._refs) {\n                obj = sanitizeDynamicProps(obj, obj._refs);\n            }\n        }\n    } catch (e) {\n        logError(\n            `readObjectSync: Parsing of ${chalk.white(\n                filePath\n            )} failed with ${e}`\n        );\n        return null;\n    }\n    return obj;\n};\n\nexport const updateObjectSync = (filePath, updateObj) => {\n    let output;\n    const obj = readObjectSync(filePath);\n    if (obj) {\n        output = merge(obj, updateObj);\n    } else {\n        output = updateObj;\n    }\n    writeFileSync(filePath, output);\n    return output;\n};\n\nexport const getRealPath = (c, p, key = 'undefined', original) => {\n    if (!p) {\n        if (original) {\n            logInfo(\n                `Path ${chalk.white(\n                    key\n                )} is not defined. using default: ${chalk.white(original)}`\n            );\n        }\n        return original;\n    }\n    if (p.startsWith('./')) {\n        return path.join(c.paths.project.dir, p);\n    }\n    const output = p\n        .replace(/\\$RNV_HOME/g, c.paths.rnv.dir)\n        .replace(/~/g, c.paths.home.dir)\n        .replace(/\\$USER_HOME/g, c.paths.home.dir)\n        .replace(/\\$PROJECT_HOME/g, c.paths.project.dir)\n        .replace(/\\$WORKSPACE_HOME/g, c.paths.workspace.dir)\n        .replace(/RNV_HOME/g, c.paths.rnv.dir)\n        .replace(/USER_HOME/g, c.paths.home.dir)\n        .replace(/PROJECT_HOME/g, c.paths.project.dir);\n    return output;\n};\n\nconst _refToValue = (c, ref, key) => {\n    const val = ref.replace('$REF$:', '').split('$...');\n\n    const realPath = getRealPath(c, val[0], key);\n\n    if (realPath && realPath.includes('.json') && val.length === 2) {\n        if (fs.existsSync(realPath)) {\n            const obj = readObjectSync(realPath);\n\n            try {\n                const output = val[1].split('.').reduce((o, i) => o[i], obj);\n                return output;\n            } catch (e) {\n                logWarning(`_refToValue: ${e}`);\n            }\n        } else {\n            logWarning(`_refToValue: ${chalk.white(realPath)} does not exist!`);\n        }\n    }\n    return ref;\n};\n\nexport const arrayMerge = (destinationArray, sourceArray) => {\n    const jointArray = destinationArray.concat(sourceArray);\n    const uniqueArray = jointArray.filter(\n        (item, index) => jointArray.indexOf(item) === index\n    );\n    return uniqueArray;\n};\n\nconst _arrayMergeOverride = (destinationArray, sourceArray) => sourceArray;\n\nexport const sanitizeDynamicRefs = (c, obj) => {\n    if (!obj) return obj;\n    if (Array.isArray(obj)) {\n        obj.forEach((v) => {\n            sanitizeDynamicRefs(c, v);\n        });\n    }\n    Object.keys(obj).forEach((key) => {\n        const val = obj[key];\n        if (val) {\n            if (typeof val === 'string') {\n                if (val.startsWith('$REF$:')) {\n                    obj[key] = _refToValue(c, val, key);\n                }\n            } else {\n                sanitizeDynamicRefs(c, val);\n            }\n        }\n    });\n    return obj;\n};\n\nconst fixResolve = (text) => {\n    const regEx = /{{resolvePackage\\(([\\s\\S]*?)\\)}}/g;\n    const matches = text.match(regEx);\n    let newText = text;\n    if (matches?.length) {\n        matches.forEach((match) => {\n            const val = match.replace('{{resolvePackage(', '').replace(')}}', '');\n            // TODO: Figure out WIN vs LINUX treatment here\n            // forceForwardPaths is required for WIN Android to work correctly\n            newText = newText.replace(match, doResolve(val, false, { forceForwardPaths: true }));\n        });\n    }\n    return newText;\n};\n\nexport const sanitizeDynamicProps = (obj, props = {}, configProps = {}, runtimeProps = {}) => {\n    if (!obj) {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        obj.forEach((v, i) => {\n            let val = v;\n            if (typeof val === 'string') {\n                Object.keys(props).forEach((pk) => {\n                    const propVal = props?.[pk];\n                    val = val\n                        .replace(`@${pk}@`, propVal)\n                        .replace(`{{props.${pk}}}`, propVal);\n                    obj[i] = fixResolve(val);\n                });\n                Object.keys(configProps).forEach((pk2) => {\n                    val = val.replace(`{{configProps.${pk2}}}`, configProps[pk2]);\n                    obj[i] = fixResolve(val);\n                });\n                Object.keys(runtimeProps).forEach((pk3) => {\n                    val = val.replace(`{{runtimeProps.${pk3}}}`, runtimeProps[pk3]);\n                    obj[i] = fixResolve(val);\n                });\n            } else {\n                sanitizeDynamicProps(v, props, configProps, runtimeProps);\n            }\n        });\n    } else if (typeof obj === 'object') {\n        // console.log('KAKAK', obj?.['build.gradle']);\n        Object.keys(obj).forEach((key) => {\n            let val = obj[key];\n            // Some values are passed as keys so have to validate keys as well\n            const newKey = fixResolve(key);\n            delete obj[key];\n            obj[newKey] = val;\n            if (val) {\n                if (typeof val === 'string') {\n                    Object.keys(props).forEach((pk) => {\n                        val = val\n                            .replace(`@${pk}@`, props?.[pk])\n                            .replace(`{{props.${pk}}}`, props?.[pk]);\n                        obj[newKey] = fixResolve(val);\n                    });\n                    Object.keys(configProps).forEach((pk2) => {\n                        val = val.replace(`{{configProps.${pk2}}}`, configProps[pk2]);\n                        obj[newKey] = fixResolve(val);\n                    });\n                    Object.keys(runtimeProps).forEach((pk3) => {\n                        val = val.replace(`{{runtimeProps.${pk3}}}`, runtimeProps[pk3]);\n                        obj[newKey] = fixResolve(val);\n                    });\n                } else {\n                    sanitizeDynamicProps(val, props, configProps, runtimeProps);\n                }\n            }\n        });\n    } else if (typeof obj === 'string') {\n        return fixResolve(obj);\n    }\n\n    return obj;\n};\n\nexport const mergeObjects = (\n    c,\n    obj1,\n    obj2,\n    dynamicRefs = true,\n    replaceArrays = false\n) => {\n    if (!obj2) return obj1;\n    if (!obj1) return obj2;\n    const obj = merge(obj1, obj2, {\n        arrayMerge: replaceArrays ? _arrayMergeOverride : arrayMerge\n    });\n    return dynamicRefs ? sanitizeDynamicRefs(c, obj) : obj;\n};\n\nexport const updateConfigFile = async (update, globalConfigPath) => {\n    const configContents = JSON.parse(fs.readFileSync(globalConfigPath));\n\n    if (update.androidSdk) {\n        configContents.sdks.ANDROID_SDK = update.androidSdk;\n    }\n\n    if (update.tizenSdk) {\n        configContents.sdks.TIZEN_SDK = update.tizenSdk;\n    }\n\n    if (update.webosSdk) {\n        configContents.sdks.WEBOS_SDK = update.webosSdk;\n    }\n\n    logDebug(\n        `Updating ${globalConfigPath}. New file ${JSON.stringify(\n            configContents,\n            null,\n            3\n        )}`\n    );\n\n    fsWriteFileSync(globalConfigPath, JSON.stringify(configContents, null, 3));\n};\n\nexport const replaceHomeFolder = (p) => {\n    if (isSystemWin) return p.replace('~', process.env.USERPROFILE);\n    return p.replace('~', process.env.HOME);\n};\n\nexport const getFileListSync = (dir) => {\n    let results = [];\n    const list = fs.readdirSync(dir);\n    list.forEach((file) => {\n        const fileFixed = `${dir}/${file}`;\n        const stat = fs.statSync(fileFixed);\n        if (stat && stat.isDirectory()) {\n            /* Recurse into a subdirectory */\n            results = results.concat(getFileListSync(fileFixed));\n        } else {\n            /* Is a file */\n            results.push(file);\n        }\n    });\n    return results;\n};\n\nexport default {\n    sanitizeDynamicRefs,\n    getFileListSync,\n    removeDirs,\n    copyFileSync,\n    copyFolderRecursiveSync,\n    removeDir,\n    removeDirsSync,\n    removeFilesSync,\n    saveAsJs,\n    mkdirSync,\n    copyFolderContentsRecursive,\n    copyFolderContentsRecursiveSync,\n    cleanFolder,\n    writeFileSync,\n    readObjectSync,\n    updateObjectSync,\n    arrayMerge,\n    mergeObjects,\n    updateConfigFile,\n    replaceHomeFolder\n};\n"],"file":"fileutils.js"}