{"version":3,"sources":["../src/config.js"],"names":["CLI_PROPS","Config","config","c","dependency","version","type","skipInstall","currentPackage","files","project","package","existingPath","paths","pkg","skipAsking","skipVersionCheck","projectConfig","getProjectConfig","confirm","message","resp","latestVersion","injectProjectDependency","currentVersion","updateAvailable","semver","lt","e","platform","selectedEngine","npmDeps","platforms","npm","promises","Object","keys","reduce","acc","forEach","dep","push","checkRequiredPackage","Promise","all","installed","some","i","id","key","global","fs","existsSync","cfg","require","GLOBAL_RNV_CONFIG","value","configSchema","undefined","buildConfig","default","localVal","getConfigValueSeparate","toString","globalVal","table","Key","keySchema","values","includes","join","program","isConfigValueValid","isValid","configPath","resultCli","resultScheme","resultPlatforms","resultCommon","Array","isArray","val","defaultVal","p","ps","runtime","scheme","buildSchemes","common","result","getValueOrMergedObject","command","subCommand","args","rawArgs","argsCopy","missingArg","indexOf","length","filter","arg","configExists","hosted","bundleAssets","getConfigProp","WEB_HOSTED_PLATFORMS","getMergedConfigValue","dir","Conf","rnvConfigHandler","rnvArguments","rows","k","listConfigValue","concat","setConfigValue"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require, valid-typeof */\n/* eslint-disable import/no-cycle */\n\nimport { printTable } from 'console-table-printer';\nimport fs from 'fs';\nimport semver from 'semver';\n\nimport { writeFileSync } from './systemTools/fileutils';\nimport { npmInstall, executeAsync } from './systemTools/exec';\nimport { logWarning, logError, logDebug } from './systemTools/logger';\nimport { inquirerPrompt } from './systemTools/prompt';\nimport { configSchema, WEB_HOSTED_PLATFORMS } from './constants';\nimport { getEngineByPlatform } from './engineTools';\n\nexport const CLI_PROPS = [\n    'provisioningStyle',\n    'codeSignIdentity',\n    'provisionProfileSpecifier'\n];\n\nclass Config {\n    constructor() {\n        this.config = {};\n    }\n\n    // async initializeConfig(cmd, subCmd, program) {\n    //     this.config = await initializeBuilder(cmd, subCmd, process, program);\n    // }\n\n    initializeConfig(c) {\n        this.config = c;\n        return c;\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    get command() {\n        return this.config.command;\n    }\n\n    get subCommand() {\n        return this.config.subCommand;\n    }\n\n    get rnvArguments() {\n        // commander is stupid https://github.com/tj/commander.js/issues/53\n        const { args, rawArgs } = this.config.program;\n        const argsCopy = [...args];\n        let missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 1];\n        if (missingArg?.[0] === '-') {\n            if (rawArgs[rawArgs.indexOf(argsCopy[1]) + 2]) {\n                missingArg = rawArgs[rawArgs.indexOf(argsCopy[1]) + 2];\n            } else {\n                missingArg = undefined;\n            }\n        }\n        if (rawArgs.length === 3) missingArg = undefined;\n        argsCopy[2] = missingArg;\n        return argsCopy.filter(arg => !!arg);\n    }\n\n    async injectProjectDependency(\n        dependency,\n        version,\n        type,\n        skipInstall = false\n    ) {\n        const currentPackage = this.config.files.project.package;\n        const existingPath = this.config.paths.project.package;\n        if (!currentPackage[type]) currentPackage[type] = {};\n        currentPackage[type][dependency] = version;\n        writeFileSync(existingPath, currentPackage);\n        if (!skipInstall) await npmInstall();\n        return true;\n    }\n\n    getProjectConfig() {\n        return this.config.files.project;\n    }\n\n    async checkRequiredPackage(pkg, version = false, type, skipAsking = false,\n        skipInstall = false, skipVersionCheck = false) {\n        if (!pkg) return false;\n        const projectConfig = this.getProjectConfig();\n\n        if (!projectConfig.package[type]?.[pkg]) {\n            // package does not exist, adding it\n            let confirm = skipAsking;\n            if (!confirm) {\n                const resp = await inquirerPrompt({\n                    type: 'confirm',\n                    message: `You do not have ${pkg} installed. Do you want to add it now?`\n                });\n                // eslint-disable-next-line prefer-destructuring\n                confirm = resp.confirm;\n            }\n\n            if (confirm) {\n                let latestVersion = 'latest';\n                if (!version && !skipVersionCheck) {\n                    try {\n                        latestVersion = await executeAsync(\n                            `npm show ${pkg} version`\n                        );\n                        // eslint-disable-next-line no-empty\n                    } catch (e) {}\n                }\n                return this.injectProjectDependency(\n                    pkg,\n                    version || latestVersion,\n                    type,\n                    skipInstall\n                );\n            }\n        } else if (!version) {\n            // package exists, checking version only if version is not\n            const currentVersion = projectConfig.package[type][pkg];\n            let latestVersion = false;\n            try {\n                latestVersion = await executeAsync(`npm show ${pkg} version`);\n                // eslint-disable-next-line no-empty\n            } catch (e) {}\n            if (latestVersion) {\n                let updateAvailable = false;\n\n                try {\n                    // semver might fail if you have a path instead of a version (like when you are developing)\n                    updateAvailable = semver.lt(currentVersion, latestVersion);\n                    // eslint-disable-next-line no-empty\n                } catch (e) {}\n\n                if (updateAvailable) {\n                    let confirm = skipAsking;\n                    if (!confirm) {\n                        const resp = await inquirerPrompt({\n                            type: 'confirm',\n                            message: `Seems like ${pkg}@${\n                                currentVersion\n                            } is installed while there is a newer version, ${\n                                pkg\n                            }@${latestVersion}. Do you want to upgrade?`\n                        });\n                        // eslint-disable-next-line prefer-destructuring\n                        confirm = resp.confirm;\n                    }\n\n                    if (confirm) {\n                        return this.injectProjectDependency(\n                            pkg,\n                            latestVersion,\n                            type,\n                            skipInstall\n                        );\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    async injectPlatformDependencies(platform) {\n        const selectedEngine = getEngineByPlatform(this.config, platform);\n        const npmDeps = selectedEngine?.platforms[platform]?.npm;\n\n        if (npmDeps) {\n            const promises = Object.keys(npmDeps).reduce((acc, type) => {\n                // iterate over dependencies, devDepencencies or optionalDependencies\n                Object.keys(npmDeps[type]).forEach((dep) => {\n                    // iterate over deps\n                    acc.push(\n                        this.checkRequiredPackage(\n                            dep,\n                            npmDeps[type][dep],\n                            type,\n                            true,\n                            true\n                        )\n                    );\n                });\n                return acc;\n            }, []);\n\n            const installed = await Promise.all(promises);\n\n            if (installed.some(i => i === true)) {\n                // do npm i only if something new is added\n                logWarning(`Found extra npm depenedecies required by ${\n                    selectedEngine.id\n                } engine. will install them now`);\n                await npmInstall();\n            }\n        }\n\n        // add other deps that are not npm\n    }\n\n    get platform() {\n        return this.config.platform;\n    }\n\n    get isRenativeProject() {\n        return this.config?.paths?.project?.configExists || false;\n    }\n\n    get program() {\n        return this.config.program;\n    }\n\n    get paths() {\n        return this.config.paths;\n    }\n\n    // RNV CONFIG\n    getConfigValueSeparate(key, global = false) {\n        const { paths } = this.config;\n\n        if (!global && !fs.existsSync(paths.project.config)) return 'N/A'; // string because there might be a setting where we will use null\n        const cfg = global\n            ? require(paths.GLOBAL_RNV_CONFIG)\n            : require(paths.project.config);\n\n        const value = cfg[configSchema[key].key];\n        if (value === undefined) return 'N/A';\n\n        return value;\n    }\n\n    getMergedConfigValue(key) {\n        let value = this.config.buildConfig?.[configSchema[key].key];\n        if (value === undefined && configSchema[key].default) { value = configSchema[key].default; }\n        return value;\n    }\n\n    listConfigValue(key) {\n        let localVal = this.getConfigValueSeparate(key).toString();\n        let globalVal = this.getConfigValueSeparate(key, true).toString();\n\n        if (globalVal === 'N/A' && configSchema[key].default) { globalVal = configSchema[key].default; }\n        if (localVal === 'N/A') localVal = globalVal;\n\n        const table = [\n            {\n                Key: key,\n                'Global Value': globalVal\n            }\n        ];\n\n        if (localVal !== 'N/A') {\n            table[0]['Project Value'] = localVal;\n        }\n\n        return table;\n    }\n\n    isConfigValueValid(key, value) {\n        const keySchema = configSchema[key];\n        if (!keySchema) {\n            logWarning(`Unknown config param ${key}`);\n            return false;\n        }\n\n        if (keySchema.values && !keySchema.values.includes(value)) {\n            logWarning(\n                `Unsupported value provided for ${key}. Correct values are ${keySchema.values.join(\n                    ', '\n                )}`\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    setConfigValue(key, value) {\n        const {\n            program: { global },\n            paths\n        } = this.config;\n\n        if (this.isConfigValueValid(key, value)) {\n            let isValid = value;\n            const configPath = global\n                ? paths.GLOBAL_RNV_CONFIG\n                : paths.project.config;\n            const config = require(configPath);\n\n            if (['true', 'false'].includes(isValid)) isValid = isValid === 'true'; // convert string to bool if it matches a bool value\n\n            config[configSchema[key].key] = isValid;\n            writeFileSync(configPath, config);\n            return true;\n        }\n        return false;\n    }\n\n    getValueOrMergedObject(\n        resultCli,\n        resultScheme,\n        resultPlatforms,\n        resultCommon\n    ) {\n        if (resultCli !== undefined) {\n            return resultCli;\n        }\n        if (resultScheme !== undefined) {\n            if (Array.isArray(resultScheme) || typeof resultScheme !== 'object') { return resultScheme; }\n            const val = Object.assign(\n                resultCommon || {},\n                resultPlatforms || {},\n                resultScheme\n            );\n            return val;\n        }\n        if (resultPlatforms !== undefined) {\n            if (\n                Array.isArray(resultPlatforms)\n                || typeof resultPlatforms !== 'object'\n            ) { return resultPlatforms; }\n            return Object.assign(resultCommon || {}, resultPlatforms);\n        }\n        if (resultPlatforms === null) return null;\n        return resultCommon;\n    }\n\n    getConfigProp(c, platform, key, defaultVal) {\n        if (!c.buildConfig) {\n            logError('getConfigProp: c.buildConfig is undefined!');\n            return null;\n        }\n        const p = c.buildConfig.platforms[platform];\n        const ps = c.runtime.scheme;\n        let resultPlatforms;\n        let scheme;\n        if (p) {\n            scheme = p.buildSchemes ? p.buildSchemes[ps] : undefined;\n            resultPlatforms = c.buildConfig.platforms[platform][key];\n        }\n\n        scheme = scheme || {};\n        const resultCli = CLI_PROPS.includes(key) ? c.program[key] : undefined;\n        const resultScheme = scheme[key];\n        const resultCommon = c.buildConfig.common?.[key];\n\n        let result = this.getValueOrMergedObject(\n            resultCli,\n            resultScheme,\n            resultPlatforms,\n            resultCommon\n        );\n\n        if (result === undefined) result = defaultVal; // default the value only if it's not specified in any of the files. i.e. undefined\n        logDebug(`getConfigProp:${platform}:${key}:${result}`);\n        return result;\n    }\n\n    get isWebHostEnabled() {\n        const { hosted } = this.config.program;\n        // if (debug) return false;\n        const bundleAssets = this.getConfigProp(\n            this.config,\n            this.platform,\n            'bundleAssets'\n        );\n        return (\n            (hosted || !bundleAssets)\n            && WEB_HOSTED_PLATFORMS.includes(this.platform)\n        );\n    }\n\n    get isAnalyticsEnabled() {\n        return this.getMergedConfigValue('analytics');\n    }\n\n    get projectPath() {\n        return this.config.paths.project.dir;\n    }\n\n    //     getBuildConfig() {\n    //         return this.config.buildConfig;\n    //     }\n\n    //     updateLocalConfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateGlobalonfig() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     updateCLIPath() {\n    //         writeFileSync(file, newConfig);\n    //         this.initializeConfig();\n    //     }\n\n    //     getPath(path) { // getPath(RNV_PLUGINTEMPLATES_DIR) / PROJECT_BUILDS_DIR...\n    //         return this.config.paths[path];\n    //     }\n\n    //     get getInfo() {\n    //         return this.c.program.info;\n    //     }\n\n    //     get platform() {\n    //         return this.config.program.platform;\n    //     }\n\n    //     get mono() {\n    //         return this.config.program.mono;\n    //     }\n\n    //     get target() {}\n\n    //     set target(newTarget) {\n    //         this.config.target = newTarget;\n    //         this.initializeConfig();\n    //     }\n}\n\nconst Conf = new Config();\n// excluded from Config because for some reason passing this function to RNV as a handler makes it lose it's context\nconst rnvConfigHandler = () => {\n    const [, key, value] = Conf.rnvArguments; // first arg is config so it's useless\n    if (key === 'list') {\n        const rows = [];\n        Object.keys(configSchema).forEach(k => rows.push(Conf.listConfigValue(k)));\n\n        printTable([].concat(...rows));\n        return true;\n    }\n\n    // validate args\n    if (!key) {\n        // @todo add inquirer with list of options\n        logWarning('Please specify a config');\n        return true;\n    }\n    if (!configSchema[key]) {\n        logWarning(`Unknown config ${key}`);\n        return true;\n    }\n\n    if (!value) {\n        // list the value\n        printTable(Conf.listConfigValue(key));\n    } else if (Conf.setConfigValue(key, value)) { printTable(Conf.listConfigValue(key)); }\n\n    return true;\n};\n\nexport default Conf;\nexport { rnvConfigHandler };\n"],"file":"config.js"}