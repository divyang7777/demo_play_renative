{"version":3,"sources":["../../src/deployTools/now.js"],"names":["_runDeploymentTask","c","nowConfigPath","Promise","resolve","reject","dotenv","config","defaultBuildFolder","path","join","platform","includes","params","process","env","NOW_TOKEN","push","nowIsProduction","interactive","then","catch","error","_createConfigFiles","configFilePath","envConfigPath","nowParamsExists","_envContent","envContent","fs","existsSync","content","public","version","chalk","white","inquirer","prompt","type","name","message","validate","i","token","JSON","stringify","deployToNow","paths","project","dir","readFileSync","toString","err","matched","split","map","line","forEach","key","indexOf"],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAMA,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,CAAD,CAAIC,aAAJ,QAAsB,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AAC9EC,gBAAOC,MAAP;AACA,GAAMC,CAAAA,kBAAkB,CAAGC,cAAKC,IAAL,CAAU,yBAAaT,CAAb,CAAgBA,CAAC,CAACU,QAAlB,CAAV,CAAuCV,CAAC,CAACU,QAAF,CAAWC,QAAX,CAAoB,MAApB,EAA8B,KAA9B,CAAsC,QAA7E,CAA3B;AACA,GAAMC,CAAAA,MAAM,CAAG,CAACL,kBAAD,CAAqB,IAArB,CAA2BN,aAA3B,CAAf;AACA,GAAIY,OAAO,CAACC,GAAR,CAAYC,SAAhB,CAA2BH,MAAM,CAACI,IAAP,CAAY,IAAZ,CAAkBH,OAAO,CAACC,GAAR,CAAYC,SAA9B;AAC3B,GAAME,CAAAA,eAAe,CAAG,0BAAcjB,CAAd,CAAiBA,CAAC,CAACU,QAAnB,CAA6B,iBAA7B,CAAgD,KAAhD,IAA2D,IAAnF;;AAEA,GAAIO,eAAJ,CAAqBL,MAAM,CAACI,IAAP,CAAY,QAAZ;;AAErB,uBAAahB,CAAb,QAAuBY,MAAM,CAACH,IAAP,CAAY,GAAZ,CAAvB,CAA2C,CAAES,WAAW,CAAE,IAAf,CAA3C;AACKC,IADL,CACU,iBAAMhB,CAAAA,OAAO,EAAb,EADV;AAEKiB,KAFL,CAEW,SAAAC,KAAK,QAAIjB,CAAAA,MAAM,CAACiB,KAAD,CAAV,EAFhB;AAGH,CAZgD,CAAtB,EAA3B;;AAcA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB;AACvBC,cADuB;AAEvBC,aAFuB;AAGvBC,eAHuB,+CAGL,KAHK;AAIvBC,WAJuB,+CAIT,EAJS;;AAMnBC,UANmB,CAMND,WANM;AAOlBE,YAAGC,UAAH,CAAcN,cAAd,CAPkB;AAQbO,OARa,CAQH,CAAEC,MAAM,CAAE,IAAV,CAAgBC,OAAO,CAAE,CAAzB,CARG;AASnB;AACOC,eAAMC,KAAN;AACC,UADD,CADP,+CATmB;;;;AAeIC,kBAASC,MAAT,CAAgB;AACnC;AACIC,IAAI,CAAE,OADV;AAEIC,IAAI,CAAE,MAFV;AAGIC,OAAO,CAAE,4BAHb;AAIIC,QAAQ,CAAE,kBAAAC,CAAC,QAAI,CAAC,CAACA,CAAF,EAAO,qBAAX,EAJf,CADmC;;AAOnC;AACIJ,IAAI,CAAE,OADV;AAEIC,IAAI,CAAE,OAFV;AAGIC,OAAO;AACH,8EAJR,CAPmC,CAAhB,CAfJ,6CAeXD,IAfW,uBAeXA,IAfW;;;;AA8BnBR,OAAO,CAACQ,IAAR,CAAeA,IAAf,CA9BmB;;AAgCdb,eAhCc;AAiCSU,kBAASC,MAAT,CAAgB;AACpCC,IAAI,CAAE,OAD8B;AAEpCC,IAAI,CAAE,OAF8B;AAGpCC,OAAO;AACH,8EAJgC,CAAhB,CAjCT,+CAiCPG,KAjCO,wBAiCPA,KAjCO;;AAuCf,GAAIA,KAAJ,CAAW;AACPf,UAAU,eAAiBe,KAAjB,KAAV;AACA,+BAAgBlB,aAAhB,CAA+BG,UAA/B;AACH,CA1Cc;AA2CR;AACHJ,cADG;AAEHoB,IAAI,CAACC,SAAL,CAAed,OAAf,CAAwB,IAAxB,CAA8B,CAA9B,CAFG,CA3CQ;;;AAgDZ;AACHP,cADG;AAEHoB,IAAI,CAACC,SAAL,CAAed,OAAf,CAAwB,IAAxB,CAA8B,CAA9B,CAFG,CAhDY,wEAA3B;;;;;AAuDA,GAAMe,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAA7C,CAAC,QAAI,IAAIE,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AACtD,GAAMH,CAAAA,aAAa,CAAGO,cAAKL,OAAL,CAAaH,CAAC,CAAC8C,KAAF,CAAQC,OAAR,CAAgBC,GAA7B,CAAkC,SAAlC,QAAoDhD,CAAC,CAACU,QAAtD,SAAtB;AACA,GAAMc,CAAAA,aAAa,CAAGhB,cAAKL,OAAL,CAAaH,CAAC,CAAC8C,KAAF,CAAQC,OAAR,CAAgBC,GAA7B,CAAkC,MAAlC,CAAtB;;AAEA,GAAIrB,CAAAA,UAAJ;AACA,GAAI;AACAA,UAAU,CAAGC,YAAGqB,YAAH,CAAgBzB,aAAhB,EAA+B0B,QAA/B,EAAb;AACH,CAAC,MAAOC,GAAP,CAAY;AACVxB,UAAU,CAAG,EAAb;AACH;;AAED,GAAIyB,CAAAA,OAAO,CAAG,KAAd;AACAzB,UAAU;AACL0B,KADL,CACW,IADX;AAEKC,GAFL,CAES,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACF,KAAL,CAAW,GAAX,CAAJ,EAFb;AAGKG,OAHL,CAGa,cAAW,+CAATC,GAAS;AAChB,GAAI,CAAC,WAAD,EAAcC,OAAd,CAAsBD,GAAtB,EAA6B,CAAC,CAAlC,CAAqC;AACjCL,OAAO,CAAG,IAAV;AACH;AACJ,CAPL;;AASA9B,kBAAkB;AACdrB,aADc;AAEduB,aAFc;AAGd4B,OAHc;AAIdzB,UAJc,CAAlB;AAKER,IALF,CAKO,UAAM;AACTpB,kBAAkB,CAACC,CAAD,CAAIC,aAAJ,CAAlB;AACKkB,IADL,CACU,UAAM;AACRhB,OAAO;AACV,CAHL;AAIKiB,KAJL,CAIW,SAAA+B,GAAG,QAAI/C,CAAAA,MAAM,CAAC+C,GAAD,CAAV,EAJd;AAKH,CAXD;AAYH,CAjCwB,CAAJ,EAArB,C","sourcesContent":["/* eslint-disable import/no-cycle */\nimport chalk from 'chalk';\nimport path from 'path';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport dotenv from 'dotenv';\n\nimport { executeAsync } from '../systemTools/exec';\nimport { getAppFolder, getConfigProp } from '../common';\nimport { logInfo } from '../systemTools/logger';\nimport { fsWriteFileSync } from '../systemTools/fileutils';\n\nconst _runDeploymentTask = (c, nowConfigPath) => new Promise((resolve, reject) => {\n    dotenv.config();\n    const defaultBuildFolder = path.join(getAppFolder(c, c.platform), c.platform.includes('next') ? 'out' : 'public');\n    const params = [defaultBuildFolder, '-A', nowConfigPath];\n    if (process.env.NOW_TOKEN) params.push('-t', process.env.NOW_TOKEN);\n    const nowIsProduction = getConfigProp(c, c.platform, 'nowIsProduction', false) === true;\n\n    if (nowIsProduction) params.push('--prod');\n\n    executeAsync(c, `now ${params.join(' ')}`, { interactive: true })\n        .then(() => resolve())\n        .catch(error => reject(error));\n});\n\nconst _createConfigFiles = async (\n    configFilePath,\n    envConfigPath,\n    nowParamsExists = false,\n    _envContent = ''\n) => {\n    let envContent = _envContent;\n    if (!fs.existsSync(configFilePath)) {\n        const content = { public: true, version: 2 };\n        logInfo(\n            `${chalk.white(\n                'now.json'\n            )} file does not exist. Creating one for you`\n        );\n\n        const { name } = await inquirer.prompt([\n            {\n                type: 'input',\n                name: 'name',\n                message: 'What is your project name?',\n                validate: i => !!i || 'Please enter a name'\n            },\n            {\n                type: 'input',\n                name: 'token',\n                message:\n                    'Do you have now token? If no leave empty and you will be asked to create one'\n            }\n        ]);\n\n        content.name = name;\n\n        if (!nowParamsExists) {\n            const { token } = await inquirer.prompt({\n                type: 'input',\n                name: 'token',\n                message:\n                    'Do you have now token? If no leave empty and you will be asked to create one'\n            });\n            if (token) {\n                envContent += `NOW_TOKEN=${token}\\n`;\n                fsWriteFileSync(envConfigPath, envContent);\n            }\n            return fsWriteFileSync(\n                configFilePath,\n                JSON.stringify(content, null, 2)\n            );\n        }\n        return fsWriteFileSync(\n            configFilePath,\n            JSON.stringify(content, null, 2)\n        );\n    }\n};\n\nconst deployToNow = c => new Promise((resolve, reject) => {\n    const nowConfigPath = path.resolve(c.paths.project.dir, 'configs', `now.${c.platform}.json`);\n    const envConfigPath = path.resolve(c.paths.project.dir, '.env');\n\n    let envContent;\n    try {\n        envContent = fs.readFileSync(envConfigPath).toString();\n    } catch (err) {\n        envContent = '';\n    }\n\n    let matched = false;\n    envContent\n        .split('\\n')\n        .map(line => line.split('='))\n        .forEach(([key]) => {\n            if (['NOW_TOKEN'].indexOf(key) > -1) {\n                matched = true;\n            }\n        });\n\n    _createConfigFiles(\n        nowConfigPath,\n        envConfigPath,\n        matched,\n        envContent\n    ).then(() => {\n        _runDeploymentTask(c, nowConfigPath)\n            .then(() => {\n                resolve();\n            })\n            .catch(err => reject(err));\n    });\n});\n\nexport { deployToNow };\n"],"file":"now.js"}