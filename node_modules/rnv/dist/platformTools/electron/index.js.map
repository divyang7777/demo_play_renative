{"version":3,"sources":["../../../src/platformTools/electron/index.js"],"names":["configureElectronProject","c","platform","MACOS","_generateICNS","configureProject","merge","require","Promise","resolve","reject","appFolder","templateFolder","bundleAssets","electronConfigPath","path","join","packagePath","appId","fs","existsSync","chalk","white","then","catch","e","pkgJson","packageJson","name","runtime","productName","version","description","author","license","main","browserWindow","width","height","webPreferences","nodeIntegration","browserWindowExt","browserWindowStr","JSON","stringify","pattern","override","localhost","port","macConfig","mac","entitlements","entitlementsInherit","hardenedRuntime","mas","provisioningProfile","electronConfig","directories","app","buildResources","output","files","electronConfigExt","buildElectron","exportElectron","buildPath","runElectron","bundleIsDev","_runElectronSimulator","isPortActive","logError","runElectronDevServer","elc","child","detached","env","process","stdio","on","code","exit","spawnError","unref","source","paths","appConfig","dirs","forEach","v","pf","dir","dest","p"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\nimport { createPlatformBuild, isPlatformActive } from '..';\nimport { executeAsync } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    getAppId,\n    getAppTemplateFolder,\n    getAppDescription,\n    getAppAuthor,\n    getAppLicense,\n    getConfigProp,\n    checkPortInUse,\n    waitForWebpack,\n    confirmActiveBundler\n} from '../../common';\nimport { doResolve } from '../../resolve';\nimport {\n    logTask,\n    logError,\n    logWarning,\n    logSuccess,\n    logInfo,\n} from '../../systemTools/logger';\nimport {\n    copyBuildsFolder,\n    copyAssetsFolder\n} from '../../projectTools/projectParser';\nimport { MACOS } from '../../constants';\nimport { buildWeb, runWeb, configureCoreWebProject } from '../web';\nimport {\n    mkdirSync,\n    writeFileSync,\n    readObjectSync,\n    removeDirs,\n    writeCleanFile\n} from '../../systemTools/fileutils';\n\nconst configureElectronProject = async (c, platform) => {\n    logTask(`configureElectronProject:${platform}`);\n\n    await copyAssetsFolder(\n        c,\n        platform,\n        platform === MACOS ? _generateICNS : null\n    );\n    await configureCoreWebProject(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\nconst merge = require('deepmerge');\n\nconst configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const appFolder = getAppFolder(c, platform);\n    const templateFolder = getAppTemplateFolder(c, platform);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    const electronConfigPath = path.join(appFolder, 'electronConfig.json');\n    const packagePath = path.join(appFolder, 'package.json');\n    const appId = getAppId(c, platform);\n\n    if (!fs.existsSync(packagePath)) {\n        logWarning(\n            `Looks like your ${chalk.white(\n                platform\n            )} platformBuild is misconfigured!. let's repair it.`\n        );\n        createPlatformBuild(c, platform)\n            .then(() => configureElectronProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const pkgJson = path.join(templateFolder, 'package.json');\n    const packageJson = readObjectSync(pkgJson);\n\n    packageJson.name = `${c.runtime.appId}-${platform}`;\n    packageJson.productName = `${getAppTitle(c, platform)}`;\n    packageJson.version = `${getAppVersion(c, platform)}`;\n    packageJson.description = `${getAppDescription(c, platform)}`;\n    packageJson.author = getAppAuthor(c, platform);\n    packageJson.license = `${getAppLicense(c, platform)}`;\n    packageJson.main = './main.js';\n\n    writeFileSync(packagePath, packageJson);\n\n    let browserWindow = {\n        width: 1200,\n        height: 800,\n        webPreferences: { nodeIntegration: true }\n    };\n    const browserWindowExt = getConfigProp(c, platform, 'BrowserWindow');\n    if (browserWindowExt) {\n        browserWindow = merge(browserWindow, browserWindowExt);\n    }\n    const browserWindowStr = JSON.stringify(browserWindow, null, 2);\n\n    if (bundleAssets) {\n        writeCleanFile(\n            path.join(templateFolder, '_privateConfig', 'main.js'),\n            path.join(appFolder, 'main.js'),\n            [\n                {\n                    pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}',\n                    override: browserWindowStr\n                }\n            ], null, c\n        );\n    } else {\n        writeCleanFile(\n            path.join(templateFolder, '_privateConfig', 'main.dev.js'),\n            path.join(appFolder, 'main.js'),\n            [\n                {\n                    pattern: '{{DEV_SERVER}}',\n                    override: `http://${c.runtime.localhost}:${c.runtime.port}`\n                },\n                {\n                    pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}',\n                    override: browserWindowStr\n                }\n            ], null, c\n        );\n    }\n\n    const macConfig = {};\n    if (platform === MACOS) {\n        macConfig.mac = {\n            entitlements: path.join(appFolder, 'entitlements.mac.plist'),\n            entitlementsInherit: path.join(\n                appFolder,\n                'entitlements.mac.plist'\n            ),\n            hardenedRuntime: true\n        };\n        macConfig.mas = {\n            entitlements: path.join(appFolder, 'entitlements.mas.plist'),\n            entitlementsInherit: path.join(\n                appFolder,\n                'entitlements.mas.inherit.plist'\n            ),\n            provisioningProfile: path.join(\n                appFolder,\n                'embedded.provisionprofile'\n            ),\n            hardenedRuntime: false\n        };\n    }\n\n    let electronConfig = merge(\n        {\n            appId,\n            directories: {\n                app: appFolder,\n                buildResources: path.join(appFolder, 'resources'),\n                output: path.join(appFolder, 'build/release')\n            },\n            files: ['!build/release']\n        },\n        macConfig\n    );\n\n    const electronConfigExt = getConfigProp(c, platform, 'electronConfig');\n\n    if (electronConfigExt) {\n        electronConfig = merge(electronConfig, electronConfigExt);\n    }\n    writeFileSync(electronConfigPath, electronConfig);\n\n    resolve();\n});\n\nconst buildElectron = (c, platform) => {\n    logTask(`buildElectron:${platform}`);\n\n    return buildWeb(c, platform);\n};\n\nconst exportElectron = async (c, platform) => {\n    logTask(`exportElectron:${platform}`);\n    const appFolder = getAppFolder(c, platform);\n    const buildPath = path.join(appFolder, 'build');\n\n    if (fs.existsSync(buildPath)) {\n        logInfo(`exportElectron: removing old build ${buildPath}`);\n        await removeDirs([buildPath]);\n    }\n\n    await executeAsync(\n        c,\n        `npx electron-builder --config ${path.join(\n            appFolder,\n            'electronConfig.json'\n        )}`\n    );\n\n    logSuccess(\n        `Your Exported App is located in ${chalk.white(\n            path.join(appFolder, 'build/release')\n        )} .`\n    );\n};\n\nconst runElectron = async (c, platform, port) => {\n    logTask(`runElectron:${platform}`);\n\n    const bundleIsDev = getConfigProp(c, platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n    if (bundleAssets) {\n        await buildElectron(c, platform, bundleIsDev);\n        await _runElectronSimulator(c, platform);\n    } else {\n        const isPortActive = await checkPortInUse(c, platform, port);\n        if (!isPortActive) {\n            logInfo(\n                `Looks like your ${chalk.white(\n                    platform\n                )} devServer at port ${chalk.white(\n                    port\n                )} is not running. Starting it up for you...`\n            );\n            waitForWebpack(c)\n                .then(() => _runElectronSimulator(c, platform))\n                .catch(logError);\n            // await _runElectronSimulator(c, platform);\n            await runElectronDevServer(c, platform, port);\n        } else {\n            await confirmActiveBundler(c);\n            await _runElectronSimulator(c, platform);\n        }\n    }\n};\n\nconst _runElectronSimulator = async (c) => {\n    logTask(`_runElectronSimulator:${c.platform}`);\n    const appFolder = getAppFolder(c, c.platform);\n    const elc = `${doResolve('electron')}/cli.js`;\n\n    const child = spawn('node', [elc, path.join(appFolder, '/main.js')], {\n        detached: true,\n        env: process.env,\n        stdio: 'inherit'\n    })\n        .on('close', code => process.exit(code))\n        .on('error', spawnError => logError(spawnError));\n\n    child.unref();\n};\n\nconst runElectronDevServer = async (c, platform, port) => {\n    logTask(`runElectronDevServer:${platform}`);\n\n    return runWeb(c, platform, port);\n};\n\nconst _generateICNS = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`_generateICNS:${platform}`);\n\n    let source;\n\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const pf = path.join(v, `assets/${platform}/AppIcon.iconset`);\n            if (fs.existsSync(pf)) {\n                source = pf;\n            }\n        });\n    } else if (c.paths.appConfig.dir) {\n        source = path.join(\n            c.paths.appConfig.dir,\n            `assets/${platform}/AppIcon.iconset`\n        );\n    }\n\n    const dest = path.join(\n        getAppFolder(c, platform),\n        'resources/icon.icns'\n    );\n\n    if (!fs.existsSync(source)) {\n        logWarning(\n            `Your app config is missing ${chalk.white(\n                source\n            )}. icon.icns will not be generated!`\n        );\n        resolve();\n        return;\n    }\n\n    mkdirSync(path.join(getAppFolder(c, platform), 'resources'));\n\n    const p = ['--convert', 'icns', source, '--output', dest];\n    try {\n        executeAsync(c, `iconutil ${p.join(' ')}`);\n        resolve();\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport {\n    configureElectronProject,\n    runElectron,\n    buildElectron,\n    exportElectron,\n    runElectronDevServer\n};\n"],"file":"index.js"}