{"version":3,"sources":["../../../src/platformTools/webos/index.js"],"names":["launchWebOSimulator","c","ePath","path","join","buildConfig","sdks","WEBOS_SDK","isSystemWin","fs","existsSync","Promise","reject","detached","stdio","openCommand","startHostedServerIfRequired","Config","isWebHostEnabled","parseDevices","devicesResponse","linesArray","split","slice","map","line","trim","filter","all","word","name","device","connection","profile","deviceInfo","CLI_WEBOS_ARES_DEVICE_INFO","silent","timeout","isDevice","includes","runtime","localhost","active","installAndLaunchApp","target","appPath","tId","CLI_WEBOS_ARES_INSTALL","hosted","program","platform","isHosted","toReturn","CLI_WEBOS_ARES_LAUNCH","buildDeviceChoices","devices","key","value","listWebOSTargets","deviceArray","i","chalk","bold","waitForEmulatorToBeReady","emulator","d","Error","res","runWebOS","tDir","tOut","tSim","configFilePath","grey","cnfg","JSON","parse","readFileSync","id","version","port","isPortActive","skipActiveServerCheck","CLI_WEBOS_ARES_PACKAGE","activeDevices","actualDevices","length","inquirer","prompt","type","message","default","response","setupDevice","CLI_WEBOS_ARES_SETUP_DEVICE","interactive","newDeviceResponse","dev","actualDev","newDevice","CLI_WEBOS_ARES_NOVACOM","tv","choices","chosenDevice","buildWebOSProject","white","configureWebOSProject","configureProject","resolve","appFolder","configFile","pattern","override","toLowerCase","semver","coerce"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;;;;;;AAMA;;;;AAIA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;;AAEA,GAAMA,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,CAAD,CAAO;AAC/B,oBAAQ,qBAAR;;AAEA,GAAMC,CAAAA,KAAK,CAAGC,cAAKC,IAAL;AACV,2BAAYH,CAAZ,iBAAeA,CAAC,CAACI,WAAjB,oCAAe,eAAeC,IAA9B,eAAe,oBAAqBC,SAApC,CADU;;AAGNC,mBAAc,MAAd,CAAuB,UAHjB,EAAd;;;;AAOA,GAAI,CAACC,YAAGC,UAAH,CAAcR,KAAd,CAAL,CAA2B;AACvB,MAAOS,CAAAA,OAAO,CAACC,MAAR,iCAA+CV,KAA/C,CAAP;AACH;AACD,GAAIM,kBAAJ,CAAiB,CAAE,MAAO,uBAAaP,CAAb,CAAgBC,KAAhB,CAAuB,CAAEW,QAAQ,CAAE,IAAZ,CAAkBC,KAAK,CAAE,QAAzB,CAAvB,CAAP,CAAqE;AACxF,MAAO,uBAAab,CAAb,CAAmBc,iBAAnB,KAAkCb,KAAlC,CAA2C,CAAEW,QAAQ,CAAE,IAAZ,CAA3C,CAAP;AACH,CAfD,C;;AAiBA,GAAMG,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAACf,CAAD,CAAO;AACvC,GAAIgB,gBAAOC,gBAAX,CAA6B;AACzB,MAAO,qBAASjB,CAAT,CAAP;AACH;AACJ,CAJD;;AAMA,GAAMkB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAClB,CAAD,CAAImB,eAAJ,CAAwB;AACzC,GAAMC,CAAAA,UAAU,CAAGD,eAAe;AAC7BE,KADc,CACR,IADQ;AAEdC,KAFc,CAER,CAFQ;AAGdC,GAHc,CAGV,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EAHM;AAIdC,MAJc,CAIP,SAAAF,IAAI,QAAIA,CAAAA,IAAI,GAAK,EAAb,EAJG,CAAnB;AAKA,MAAOd,CAAAA,OAAO,CAACiB,GAAR;AACHP,UAAU,CAACG,GAAX,CAAe,iBAAOC,IAAP;AACiCA,IAAI;AAC3CH,KADuC,CACjC,GADiC;AAEvCE,GAFuC,CAEnC,SAAAK,IAAI,QAAIA,CAAAA,IAAI,CAACH,IAAL,EAAJ,EAF+B;AAGvCC,MAHuC,CAGhC,SAAAE,IAAI,QAAIA,CAAAA,IAAI,GAAK,EAAb,EAH4B,CADjC,6EACJC,IADI,2BACEC,MADF,2BACUC,UADV,2BACsBC,OADtB;AAKPC,UALO,CAKM,EALN;;AAOY;AACfjC,CADe;AAEfkC,qCAFe;AAGTL,IAHS;AAIf,CAAEM,MAAM,CAAE,IAAV,CAAgBC,OAAO,CAAE,KAAzB,CAJe,CAPZ,SAOPH,UAPO;;;AAcPA,UAAU,YAAV,CAdO;;;AAiBJ;AACHJ,IAAI,CAAJA,IADG;AAEHC,MAAM,CAANA,MAFG;AAGHC,UAAU,CAAVA,UAHG;AAIHC,OAAO,CAAPA,OAJG;AAKHK,QAAQ,CAAE,CAACP,MAAM,CAACQ,QAAP,CAAgBtC,CAAC,CAACuC,OAAF,CAAUC,SAA1B,CALR;AAMHC,MAAM,CAAE,CAACR,UAAU,CAACK,QAAX,CAAoB,MAApB,CANN,CAjBI,2EAAf,CADG,CAAP;;;;AA4BH,CAlCD;;AAoCA,GAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAO1C,CAAP,CAAU2C,MAAV,CAAkBC,OAAlB,CAA2BC,GAA3B;;AAEd;AACF7C,CADE;AAEF8C,iCAFE;AAGUH,MAHV,KAGoBC,OAHpB,CAFc;;;;;AAUd;AACF5C,CADE;AAEF8C,iCAFE;AAGUH,MAHV,KAGoBC,OAHpB,CAVc;;;AAgBhBG,MAhBgB,CAgBL/C,CAAC,CAACgD,OAhBG,CAgBhBD,MAhBgB;AAiBhBE,QAjBgB,CAiBHjD,CAjBG,CAiBhBiD,QAjBgB;AAkBlBC,QAlBkB,CAkBPH,MAAM,EAAI,CAAC,0BAAc/C,CAAd,CAAiBiD,QAAjB,CAA2B,cAA3B,CAlBJ;AAmBpBE,QAnBoB,CAmBT,IAnBS;AAoBpBD,QApBoB;AAqBpBC,QAAQ,CAAGpC,2BAA2B,CAACf,CAAD,CAAtC,CArBoB;AAsBd,2BAAeA,CAAf,CAtBc;;AAwBlB,kBAAQA,CAAR,CAAWoD,gCAAX,aAA8CT,MAA9C,KAAwDE,GAAxD,CAxBkB;AAyBjBM,QAzBiB,4EAA5B;;;AA4BA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,OAAO,QAAIA,CAAAA,OAAO,CAAC/B,GAAR,CAAY,SAAAO,MAAM,QAAK;AACzDyB,GAAG,CAAEzB,MAAM,CAACD,IAD6C;AAEzDA,IAAI,CAAKC,MAAM,CAACD,IAAZ,OAAsBC,MAAM,CAACA,MAFwB;AAGzD0B,KAAK,CAAE1B,MAAM,CAACD,IAH2C,CAAL,EAAlB,CAAJ,EAAlC;;;AAMA,GAAM4B,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAOzD,CAAP;AACS,kBAAQA,CAAR,CAAWkC,qCAAX,CAAuC,IAAvC,CADT,SACff,eADe;AAECD,YAAY,CAAClB,CAAD,CAAImB,eAAJ,CAFb,SAEfmC,OAFe;;AAIfI,WAJe,CAIDJ,OAAO,CAAC/B,GAAR;AAChB,SAACO,MAAD,CAAS6B,CAAT,cAAoBA,CAAC,CAAG,CAAxB,QAA+BC,eAAMC,IAAN,CAAW/B,MAAM,CAACD,IAAlB,CAA/B,OAA4DC,MAAM,CAACA,MAAnE,EADgB,CAJC;;;AAQrB,4CAAgC4B,WAAW,CAACvD,IAAZ,CAAiB,IAAjB,CAAhC,EARqB;;AAUd,IAVc,wEAAzB,C;;;AAaA,GAAM2D,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAO9D,CAAP;AACC,kBAAQA,CAAR,CAAWkC,qCAAX,CAAuC,IAAvC,CADD,SACvBf,eADuB;AAEPD,YAAY,CAAClB,CAAD,CAAImB,eAAJ,CAFL,SAEvBmC,OAFuB;AAGvBS,QAHuB,CAGZT,OAAO,CAAC5B,MAAR,CAAe,SAAAsC,CAAC,QAAI,CAACA,CAAC,CAAC3B,QAAP,EAAhB,EAAiC,CAAjC,CAHY;AAIxB0B,QAJwB,+BAIR,IAAIE,CAAAA,KAAJ,CAAU,8BAAV,CAJQ;;AAMtB;AACHjE,CADG;AAEHkC,qCAFG;AAGG6B,QAAQ,CAAClC,IAHZ;AAIH,SAAAqC,GAAG,QAAIA,CAAAA,GAAG,CAAC5B,QAAJ,CAAa,WAAb,CAAJ,EAJA,CANsB,yEAAjC;;;;AAcA,GAAM6B,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAOnE,CAAP,CAAUiD,QAAV,CAAoBN,MAApB;AACb,gCAAoBM,QAApB,KAAgCN,MAAhC,EADa;;AAGc3C,CAAC,CAACgD,OAHhB,CAGLlB,MAHK,YAGLA,MAHK,CAGGiB,MAHH,YAGGA,MAHH;;AAKPG,QALO,CAKIH,MAAM,EAAI,CAAC,0BAAc/C,CAAd,CAAiBiD,QAAjB,CAA2B,cAA3B,CALf;;AAOPmB,IAPO,CAOAlE,cAAKC,IAAL,CAAU,yBAAaH,CAAb,CAAgBiD,QAAhB,CAAV,CAAqC,QAArC,CAPA;AAQPoB,IARO,CAQAnE,cAAKC,IAAL,CAAU,yBAAaH,CAAb,CAAgBiD,QAAhB,CAAV,CAAqC,QAArC,CARA;AASPqB,IATO,CASAtE,CAAC,CAACgD,OAAF,CAAUL,MAAV,EAAoB,UATpB;AAUP4B,cAVO,CAUUrE,cAAKC,IAAL;AACnB,yBAAaH,CAAb,CAAgBiD,QAAhB,CADmB;AAEnB,qBAFmB,CAVV;;;AAeb,gCAAoBA,QAApB,KAAgCN,MAAhC,KAA0CO,QAA1C,CAAsDU,eAAMY,IAA5D;;AAEMC,IAjBO,CAiBAC,IAAI,CAACC,KAAL,CAAWnE,YAAGoE,YAAH,CAAgBL,cAAhB,CAAgC,OAAhC,CAAX,CAjBA;AAkBP1B,GAlBO,CAkBD4B,IAAI,CAACI,EAlBJ;AAmBPjC,OAnBO,CAmBG1C,cAAKC,IAAL,CAAUkE,IAAV,CAAmBxB,GAAnB,KAA0B4B,IAAI,CAACK,OAA/B,YAnBH;;AAqBT5B,QArBS;AAsBkB,2BAAelD,CAAf,CAAkBiD,QAAlB,CAA4BjD,CAAC,CAACuC,OAAF,CAAUwC,IAAtC,CAtBlB,UAsBHC,YAtBG;AAuBLA,YAvBK;AAwBC,iCAAqBhF,CAArB,CAxBD;AAyBLA,CAAC,CAACuC,OAAF,CAAU0C,qBAAV,CAAkC,IAAlC,CAzBK;;;;;AA8Bb,CAAC/B,QA9BY,gGA8BO,kBAASlD,CAAT,CAAYiD,QAAZ,CA9BP;AA+BP,kBAAQjD,CAAR,CAAWkF,iCAAX,OAAyCb,IAAzC,KAAiDD,IAAjD,OA/BO;;;AAkCiB,kBAAQpE,CAAR,CAAWkC,qCAAX,CAAuC,IAAvC,CAlCjB,UAkCPf,eAlCO;AAmCSD,YAAY,CAAClB,CAAD,CAAImB,eAAJ,CAnCrB,UAmCPmC,OAnCO;AAoCP6B,aApCO,CAoCS7B,OAAO,CAAC5B,MAAR,CAAe,SAAAsC,CAAC,QAAIA,CAAAA,CAAC,CAACvB,MAAN,EAAhB,CApCT;;AAsCTX,MAtCS;;AAwCHsD,aAxCG,CAwCa9B,OAAO,CAAC5B,MAAR,CAAe,SAAAsC,CAAC,QAAIA,CAAAA,CAAC,CAAC3B,QAAN,EAAhB,CAxCb;;AA0CJ+C,aAAa,CAACC,MA1CV;;AA4CkBC,kBAASC,MAAT,CAAgB;AACnC;AACIC,IAAI,CAAE,SADV;AAEI3D,IAAI,CAAE,aAFV;AAGI4D,OAAO;AACH,mGAJR;AAKIC,OAAO,CAAE,KALb,CADmC,CAAhB,CA5ClB,UA4CCC,QA5CD;;;;AAsDDA,QAAQ,CAACC,WAtDR;;AAwDD;AACI,oMADJ,EAxDC;;AA2DK,kBAAQ5F,CAAR,CAAW6F,sCAAX,CAAwC,EAAxC,CAA4C;AAC9CC,WAAW,CAAE,IADiC,CAA5C,CA3DL;;;AA+D+B;AAC5B9F,CAD4B;AAE5BkC,qCAF4B;AAG5B,IAH4B,CA/D/B,UA+DK6D,iBA/DL;;AAoEiB7E,YAAY,CAAClB,CAAD,CAAI+F,iBAAJ,CApE7B,UAoEKC,GApEL;AAqEKC,SArEL,CAqEiBD,GAAG,CAACtE,MAAJ,CAAW,SAAAsC,CAAC,QAAIA,CAAAA,CAAC,CAAC3B,QAAN,EAAZ,CArEjB;;AAuEG4D,SAAS,CAACZ,MAAV,CAAmB,CAvEtB;AAwESa,SAxET,CAwEqBD,SAAS,CAAC,CAAD,CAxE9B;;AA0EG;AACI,gEADJ,EA1EH;;AA6ES;AACFjG,CADE;AAEFmG,iCAFE;AAGUD,SAAS,CAACrE,IAHpB;AAIF,CAAEhB,KAAK,CAAE,SAAT,CAJE,CA7ET;;AAmFU6B,mBAAmB,CAAC1C,CAAD,CAAIkG,SAAS,CAACrE,IAAd,CAAoBe,OAApB,CAA6BC,GAA7B,CAnF7B;;;;;AAwFEuC,aAAa,CAACC,MAAd,GAAyB,CAxF3B;AAyFCe,EAzFD,CAyFMhB,aAAa,CAAC,CAAD,CAzFnB;AA0FE1C,mBAAmB,CAAC1C,CAAD,CAAIoG,EAAE,CAACvE,IAAP,CAAae,OAAb,CAAsBC,GAAtB,CA1FrB;;AA4FD7C,CAAC,CAACgD,OAAF,CAAUL,MA5FT;;AA8FLwC,aAAa,CAACE,MAAd,GAAyB,CA9FpB;;AAgGE3C,mBAAmB,CAAC1C,CAAD,CAAIsD,OAAO,CAAC,CAAD,CAAP,CAAWzB,IAAf,CAAqBe,OAArB,CAA8BC,GAA9B,CAhGrB;;AAkGLsC,aAAa,CAACE,MAAd,CAAuB,CAlGlB;;AAoGCgB,OApGD,CAoGWhD,kBAAkB,CAACC,OAAD,CApG7B;AAqGkBgC,kBAASC,MAAT,CAAgB;AACnC;AACI1D,IAAI,CAAE,cADV;AAEI2D,IAAI,CAAE,MAFV;AAGIC,OAAO,CAAE,8CAHb;AAIIY,OAAO,CAAPA,OAJJ,CADmC,CAAhB,CArGlB,UAqGCV,SArGD;;;AA6GDA,SAAQ,CAACW,YA7GR;AA8GM5D,mBAAmB;AACtB1C,CADsB;AAEtB2F,SAAQ,CAACW,YAFa;AAGtB1D,OAHsB;AAItBC,GAJsB,CA9GzB;;;;AAsHC9C,mBAAmB,CAACC,CAAD,CAtHpB;AAuHC8D,wBAAwB,CAAC9D,CAAD,CAvHzB;AAwHE0C,mBAAmB,CAAC1C,CAAD,CAAIsE,IAAJ,CAAU1B,OAAV,CAAmBC,GAAnB,CAxHrB;;;;AA4HFH,mBAAmB,CAAC1C,CAAD,CAAIA,CAAC,CAACgD,OAAF,CAAUL,MAAd,CAAsBC,OAAtB,CAA+BC,GAA/B,CA5HjB,yEAAjB,C;;;;AAgIA,GAAM0D,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAOvG,CAAP,CAAUiD,QAAV;AACtB,yCAA6BA,QAA7B,EADsB;;AAGhB,kBAASjD,CAAT,CAAYiD,QAAZ,CAHgB;;AAKjBjD,CAAC,CAACgD,OAAF,CAAUD,MALO;AAMZqB,IANY,CAMLlE,cAAKC,IAAL,CAAU,yBAAaH,CAAb,CAAgBiD,QAAhB,CAAV,CAAqC,QAArC,CANK;AAOZoB,IAPY,CAOLnE,cAAKC,IAAL,CAAU,yBAAaH,CAAb,CAAgBiD,QAAhB,CAAV,CAAqC,QAArC,CAPK;AAQZ,kBAAQjD,CAAR,CAAWkF,iCAAX,OAAyCb,IAAzC,KAAiDD,IAAjD,OARY;;AAUlB;AACsCR,eAAM4C,KAAN,CAAYnC,IAAZ,CADtC,OAVkB,sEAA1B,C;;;;;AAgBA,GAAMoC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAOzG,CAAP,CAAUiD,QAAV;AAC1B,oBAAQ,uBAAR,EAD0B;;AAGrB,uBAAiBjD,CAAjB,CAAoBiD,QAApB,CAHqB;;AAKpB,oCAAiBjD,CAAjB,CAAoBiD,QAApB,CALoB;AAMpB,iCAAwBjD,CAAxB,CAA2BiD,QAA3B,CANoB;AAOpByD,gBAAgB,CAAC1G,CAAD,CAAIiD,QAAJ,CAPI;AAQnB,oCAAiBjD,CAAjB,CAAoBiD,QAApB,CARmB,yEAA9B,C;;;AAWA,GAAMyD,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAC1G,CAAD,CAAIiD,QAAJ,QAAiB,IAAIvC,CAAAA,OAAJ,CAAY,SAACiG,OAAD,CAAa;AAC/D,wCAA4B1D,QAA5B;;AAEA,GAAM2D,CAAAA,SAAS,CAAG,yBAAa5G,CAAb,CAAgBiD,QAAhB,CAAlB;;AAEA,GAAM4D,CAAAA,UAAU,CAAG,qBAAnB;AACA;AACI3G,cAAKC,IAAL,CAAU,iCAAqBH,CAArB,CAAwBiD,QAAxB,CAAV,CAA6C4D,UAA7C,CADJ;AAEI3G,cAAKC,IAAL,CAAUyG,SAAV,CAAqBC,UAArB,CAFJ;AAGI;AACI;AACIC,OAAO,CAAE,oBADb;AAEIC,QAAQ,CAAE,qBAAS/G,CAAT,CAAYiD,QAAZ,EAAsB+D,WAAtB,EAFd,CADJ;;AAKI;AACIF,OAAO,CAAE,eADb;AAEIC,QAAQ,CAAE,wBAAY/G,CAAZ,CAAeiD,QAAf,CAFd,CALJ;;AASI;AACI6D,OAAO,CAAE,iBADb;AAEIC,QAAQ,CAAEE,gBAAOC,MAAP,CAAc,0BAAclH,CAAd,CAAiBiD,QAAjB,CAAd,CAFd,CATJ,CAHJ;;AAgBO,IAhBP,CAgBajD,CAhBb;;;AAmBA2G,OAAO;AACV,CA1ByC,CAAjB,EAAzB","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\nimport { executeAsync, execCLI, openCommand } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    getAppId,\n    getAppTemplateFolder,\n    getConfigProp,\n    waitForEmulator,\n    waitForWebpack,\n    checkPortInUse,\n    confirmActiveBundler\n} from '../../common';\nimport { isPlatformActive } from '..';\nimport {\n    logToSummary,\n    logTask,\n    logInfo,\n    logSuccess\n} from '../../systemTools/logger';\nimport {\n    copyBuildsFolder,\n    copyAssetsFolder\n} from '../../projectTools/projectParser';\nimport {\n    CLI_WEBOS_ARES_PACKAGE,\n    CLI_WEBOS_ARES_INSTALL,\n    CLI_WEBOS_ARES_DEVICE_INFO,\n    CLI_WEBOS_ARES_LAUNCH,\n    CLI_WEBOS_ARES_NOVACOM,\n    CLI_WEBOS_ARES_SETUP_DEVICE\n} from '../../constants';\nimport { getRealPath, writeCleanFile } from '../../systemTools/fileutils';\nimport { buildWeb, configureCoreWebProject } from '../web';\nimport { rnvStart } from '../runner';\nimport Config from '../../config';\nimport { isSystemWin } from '../../utils';\n\nconst launchWebOSimulator = (c) => {\n    logTask('launchWebOSimulator');\n\n    const ePath = path.join(\n        getRealPath(c, c.buildConfig?.sdks?.WEBOS_SDK),\n        `Emulator/v4.0.0/LG_webOS_TV_Emulator${\n            isSystemWin ? '.exe' : '_RCU.app'\n        }`\n    );\n\n    if (!fs.existsSync(ePath)) {\n        return Promise.reject(`Can't find emulator at path: ${ePath}`);\n    }\n    if (isSystemWin) { return executeAsync(c, ePath, { detached: true, stdio: 'ignore' }); }\n    return executeAsync(c, `${openCommand} ${ePath}`, { detached: true });\n};\n\nconst startHostedServerIfRequired = (c) => {\n    if (Config.isWebHostEnabled) {\n        return rnvStart(c);\n    }\n};\n\nconst parseDevices = (c, devicesResponse) => {\n    const linesArray = devicesResponse\n        .split('\\n')\n        .slice(2)\n        .map(line => line.trim())\n        .filter(line => line !== '');\n    return Promise.all(\n        linesArray.map(async (line) => {\n            const [name, device, connection, profile] = line\n                .split(' ')\n                .map(word => word.trim())\n                .filter(word => word !== '');\n            let deviceInfo = '';\n            try {\n                deviceInfo = await execCLI(\n                    c,\n                    CLI_WEBOS_ARES_DEVICE_INFO,\n                    `-d ${name}`,\n                    { silent: true, timeout: 10000 }\n                );\n            } catch (e) {\n                deviceInfo = e;\n            }\n\n            return {\n                name,\n                device,\n                connection,\n                profile,\n                isDevice: !device.includes(c.runtime.localhost),\n                active: !deviceInfo.includes('ERR!')\n            };\n        })\n    );\n};\n\nconst installAndLaunchApp = async (c, target, appPath, tId) => {\n    try {\n        await execCLI(\n            c,\n            CLI_WEBOS_ARES_INSTALL,\n            `--device ${target} ${appPath}`\n        );\n    } catch (e) {\n        // installing it again if it fails. For some reason webosCLI says that it can't connect to\n        // the device from time to time. Running it again works.\n        await execCLI(\n            c,\n            CLI_WEBOS_ARES_INSTALL,\n            `--device ${target} ${appPath}`\n        );\n    }\n    const { hosted } = c.program;\n    const { platform } = c;\n    const isHosted = hosted || !getConfigProp(c, platform, 'bundleAssets');\n    let toReturn = true;\n    if (isHosted) {\n        toReturn = startHostedServerIfRequired(c);\n        await waitForWebpack(c);\n    }\n    await execCLI(c, CLI_WEBOS_ARES_LAUNCH, `--device ${target} ${tId}`);\n    return toReturn;\n};\n\nconst buildDeviceChoices = devices => devices.map(device => ({\n    key: device.name,\n    name: `${device.name} - ${device.device}`,\n    value: device.name\n}));\n\nconst listWebOSTargets = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n\n    const deviceArray = devices.map(\n        (device, i) => ` [${i + 1}]> ${chalk.bold(device.name)} | ${device.device}`\n    );\n\n    logToSummary(`WebOS Targets:\\n${deviceArray.join('\\n')}`);\n\n    return true;\n};\n\nconst waitForEmulatorToBeReady = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const emulator = devices.filter(d => !d.isDevice)[0];\n    if (!emulator) throw new Error('No WebOS emulator configured');\n\n    return waitForEmulator(\n        c,\n        CLI_WEBOS_ARES_DEVICE_INFO,\n        `-d ${emulator.name}`,\n        res => res.includes('modelName')\n    );\n};\n\nconst runWebOS = async (c, platform, target) => {\n    logTask(`runWebOS:${platform}:${target}`);\n\n    const { device, hosted } = c.program;\n\n    const isHosted = hosted || !getConfigProp(c, platform, 'bundleAssets');\n\n    const tDir = path.join(getAppFolder(c, platform), 'public');\n    const tOut = path.join(getAppFolder(c, platform), 'output');\n    const tSim = c.program.target || 'emulator';\n    const configFilePath = path.join(\n        getAppFolder(c, platform),\n        'public/appinfo.json'\n    );\n\n    logTask(`runWebOS:${platform}:${target}:${isHosted}`, chalk.grey);\n\n    const cnfg = JSON.parse(fs.readFileSync(configFilePath, 'utf-8'));\n    const tId = cnfg.id;\n    const appPath = path.join(tOut, `${tId}_${cnfg.version}_all.ipk`);\n\n    if (isHosted) {\n        const isPortActive = await checkPortInUse(c, platform, c.runtime.port);\n        if (isPortActive) {\n            await confirmActiveBundler(c);\n            c.runtime.skipActiveServerCheck = true;\n        }\n    }\n\n    // Start the fun\n    !isHosted && (await buildWeb(c, platform));\n    await execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`);\n\n    // List all devices\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const activeDevices = devices.filter(d => d.active);\n\n    if (device) {\n        // Running on a device\n        const actualDevices = devices.filter(d => d.isDevice);\n\n        if (!actualDevices.length) {\n            // No device configured. Asking to configure\n            const response = await inquirer.prompt([\n                {\n                    type: 'confirm',\n                    name: 'setupDevice',\n                    message:\n                        'Looks like you want to deploy on a device but have none configured. Do you want to configure one?',\n                    default: false\n                }\n            ]);\n\n            if (response.setupDevice) {\n                // Yes, I would like that\n                logInfo(\n                    'Please follow the instructions from http://webostv.developer.lge.com/develop/app-test/#installDevModeApp on how to setup the TV and the connection with the PC. Then follow the onscreen prompts\\n'\n                );\n                await execCLI(c, CLI_WEBOS_ARES_SETUP_DEVICE, '', {\n                    interactive: true\n                });\n\n                const newDeviceResponse = await execCLI(\n                    c,\n                    CLI_WEBOS_ARES_DEVICE_INFO,\n                    '-D'\n                );\n                const dev = await parseDevices(c, newDeviceResponse);\n                const actualDev = dev.filter(d => d.isDevice);\n\n                if (actualDev.length > 0) {\n                    const newDevice = actualDev[0];\n                    // Oh boy, oh boy, I did it! I have a TV connected!\n                    logInfo(\n                        \"Please enter the `Passphrase` from the TV's Developer Mode app\"\n                    );\n                    await execCLI(\n                        c,\n                        CLI_WEBOS_ARES_NOVACOM,\n                        `--device ${newDevice.name} --getkey`,\n                        { stdio: 'inherit' }\n                    );\n                    return installAndLaunchApp(c, newDevice.name, appPath, tId);\n                }\n                // Yes, I said I would but I didn't\n                // @todo handle user not setting up the device\n            }\n        } else if (actualDevices.length === 1) {\n            const tv = actualDevices[0];\n            return installAndLaunchApp(c, tv.name, appPath, tId);\n        }\n    } else if (!c.program.target) {\n        // No target specified\n        if (activeDevices.length === 1) {\n            // One device present\n            return installAndLaunchApp(c, devices[0].name, appPath, tId);\n        }\n        if (activeDevices.length > 1) {\n            // More than one, choosing\n            const choices = buildDeviceChoices(devices);\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenDevice',\n                    type: 'list',\n                    message: 'What device would you like to start the app?',\n                    choices\n                }\n            ]);\n            if (response.chosenDevice) {\n                return installAndLaunchApp(\n                    c,\n                    response.chosenDevice,\n                    appPath,\n                    tId\n                );\n            }\n        } else {\n            await launchWebOSimulator(c);\n            await waitForEmulatorToBeReady(c);\n            return installAndLaunchApp(c, tSim, appPath, tId);\n        }\n    } else {\n        // Target specified, using that\n        return installAndLaunchApp(c, c.program.target, appPath, tId);\n    }\n};\n\nconst buildWebOSProject = async (c, platform) => {\n    logTask(`buildWebOSProject:${platform}`);\n\n    await buildWeb(c, platform);\n\n    if (!c.program.hosted) {\n        const tDir = path.join(getAppFolder(c, platform), 'public');\n        const tOut = path.join(getAppFolder(c, platform), 'output');\n        await execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`);\n\n        logSuccess(\n            `Your IPK package is located in ${chalk.white(tOut)} .`\n        );\n    }\n};\n\nconst configureWebOSProject = async (c, platform) => {\n    logTask('configureWebOSProject');\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureCoreWebProject(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\n\nconst configureProject = (c, platform) => new Promise((resolve) => {\n    logTask(`configureProject:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const configFile = 'public/appinfo.json';\n    writeCleanFile(\n        path.join(getAppTemplateFolder(c, platform), configFile),\n        path.join(appFolder, configFile),\n        [\n            {\n                pattern: '{{APPLICATION_ID}}',\n                override: getAppId(c, platform).toLowerCase()\n            },\n            {\n                pattern: '{{APP_TITLE}}',\n                override: getAppTitle(c, platform)\n            },\n            {\n                pattern: '{{APP_VERSION}}',\n                override: semver.coerce(getAppVersion(c, platform))\n            }\n        ], null, c\n    );\n\n    resolve();\n});\n\nexport {\n    launchWebOSimulator,\n    configureWebOSProject,\n    runWebOS,\n    buildWebOSProject,\n    listWebOSTargets\n};\n"],"file":"index.js"}