{"version":3,"sources":["../../../src/platformTools/apple/deviceManager.js"],"names":["getAppleDevices","c","platform","ignoreDevices","ignoreSimulators","skipTargetCheck","program","devicesAndSims","JSON","simctl","parse","availableSims","Object","keys","devices","forEach","runtime","device","isAvailable","push","version","split","pop","devicesArr","_parseIOSDevicesList","simulatorsArr","allDevices","filter","d","includes","IOS","icon","TVOS","rawDevices","decideIcon","name","isDevice","line","s1","match","s2","s4","substring","indexOf","isSim","length","lastIndexOf","udid","replace","launchAppleSimulator","target","i","selectedDevice","_launchSimulator","chalk","white","map","v","green","grey","red","value","inquirer","prompt","message","type","choices","sim","Promise","reject","child_process","spawnSync","e","listAppleDevices","devicesString","bold"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport { logToSummary, logTask, logWarning, logDebug } from '../../systemTools/logger';\nimport { IOS, TVOS } from '../../constants';\nimport { executeAsync } from '../../systemTools/exec';\n\nexport const getAppleDevices = async (\n    c,\n    platform,\n    ignoreDevices,\n    ignoreSimulators\n) => {\n    logTask(\n        `getAppleDevices:${platform},ignoreDevices:${ignoreDevices},ignoreSimulators${ignoreSimulators}`\n    );\n    const {\n        program: { skipTargetCheck }\n    } = c;\n    // const devices = child_process.execFileSync('xcrun', ['instruments', '-s'], {\n    //     encoding: 'utf8',\n    // });\n\n    const devicesAndSims = await executeAsync('xcrun instruments -s');\n    const simctl = JSON.parse(await executeAsync('xcrun simctl list --json'));\n    const availableSims = [];\n    Object.keys(simctl.devices).forEach((runtime) => {\n        logDebug('runtime', runtime);\n        simctl.devices[runtime].forEach((device) => {\n            if (device.isAvailable) {\n                availableSims.push({\n                    ...device,\n                    version: runtime.split('.').pop()\n                });\n            }\n        });\n    });\n\n    const devicesArr = _parseIOSDevicesList(\n        devicesAndSims,\n        platform,\n        ignoreDevices,\n        ignoreSimulators\n    );\n    const simulatorsArr = _parseIOSDevicesList(\n        availableSims,\n        platform,\n        ignoreDevices,\n        ignoreSimulators\n    );\n    let allDevices = [...devicesArr, ...simulatorsArr];\n\n    if (!skipTargetCheck) {\n        // filter watches\n        allDevices = allDevices.filter(d => !d.version.includes('watchOS'));\n        // filter other platforms\n        allDevices = allDevices.filter((d) => {\n            if (\n                platform === IOS\n                && (d.icon?.includes('Phone') || d.icon?.includes('Tablet'))\n            ) { return true; }\n            if (platform === TVOS && d.icon?.includes('TV')) return true;\n            return false;\n        });\n    }\n    return allDevices;\n};\n\nconst _parseIOSDevicesList = (\n    rawDevices,\n    platform,\n    ignoreDevices = false,\n    ignoreSimulators = false\n) => {\n    const devices = [];\n    const decideIcon = (device) => {\n        const { name, isDevice } = device;\n        switch (platform) {\n            case IOS:\n                if (\n                    name.includes('iPhone')\n                    || name.includes('iPad')\n                    || name.includes('iPod')\n                ) {\n                    let icon = 'Phone ðŸ“±';\n                    if (name.includes('iPad')) icon = 'Tablet ðŸ’Š';\n                    return icon;\n                }\n                return null;\n            case TVOS:\n                if (\n                    name.includes('TV')\n                    && !name.includes('iPhone')\n                    && !name.includes('iPad')\n                ) {\n                    return 'TV ðŸ“º';\n                }\n                return null;\n            default:\n                if (isDevice) {\n                    return 'Apple Device';\n                }\n                return null;\n        }\n    };\n    if (typeof rawDevices === 'string' && !ignoreDevices) {\n        rawDevices.split('\\n').forEach((line) => {\n            const s1 = line.match(/\\[.*?\\]/);\n            const s2 = line.match(/\\(.*?\\)/g);\n            // const s3 = line.substring(0, line.indexOf('(') - 1);\n            const s4 = line.substring(0, line.indexOf('[') - 1);\n            let isSim = false;\n            if (s2 && s1) {\n                if (s2[s2.length - 1] === '(Simulator)') {\n                    isSim = true;\n                    s2.pop();\n                }\n                const version = s2.pop();\n                let name = `${s4.substring(0, s4.lastIndexOf('(') - 1)}`;\n                name = name || 'undefined';\n                const udid = s1[0].replace(/\\[|\\]/g, '');\n                const isDevice = !isSim;\n                if (!isDevice) return; // only take care of devices.\n\n                if (!ignoreDevices) {\n                    const device = { udid, name, version, isDevice };\n                    devices.push({ ...device, icon: decideIcon(device) });\n                }\n            }\n        });\n    } else if (typeof rawDevices === 'object' && !ignoreSimulators) {\n        rawDevices.forEach((d) => {\n            const { name, udid, version } = d;\n            const device = {\n                name,\n                udid,\n                isDevice: false,\n                version\n            };\n            devices.push({ ...device, icon: decideIcon(device) });\n        });\n    }\n\n    return devices;\n};\n\nexport const launchAppleSimulator = async (c, platform, target) => {\n    logTask(`launchAppleSimulator:${platform}:${target}`);\n\n    const devicesArr = await getAppleDevices(c, platform, true);\n    let selectedDevice;\n    for (let i = 0; i < devicesArr.length; i++) {\n        if (devicesArr[i].name === target) {\n            selectedDevice = devicesArr[i];\n        }\n    }\n    if (selectedDevice) {\n        _launchSimulator(selectedDevice);\n        return selectedDevice.name;\n    }\n\n    logWarning(\n        `Your specified simulator target ${chalk.white(target)} doesn't exists`\n    );\n    const devices = devicesArr.map(v => ({\n        name: `${v.name} | ${v.icon} | v: ${chalk.green(\n            v.version\n        )} | udid: ${chalk.grey(v.udid)}${\n            v.isDevice ? chalk.red(' (device)') : ''\n        }`,\n        value: v\n    }));\n\n    const { sim } = await inquirer.prompt({\n        name: 'sim',\n        message: 'Select the simulator you want to launch',\n        type: 'list',\n        choices: devices\n    });\n\n    if (sim) {\n        _launchSimulator(sim);\n        return sim.name;\n    }\n    return Promise.reject('Action canceled!');\n};\n\nconst _launchSimulator = (selectedDevice) => {\n    try {\n        child_process.spawnSync('xcrun', [\n            'instruments',\n            '-w',\n            selectedDevice.udid\n        ]);\n    } catch (e) {\n        // instruments always fail with 255 because it expects more arguments,\n        // but we want it to only launch the simulator\n    }\n};\n\nexport const listAppleDevices = async (c, platform) => {\n    logTask(`listAppleDevices:${platform}`);\n\n    const devicesArr = await getAppleDevices(c, platform);\n    let devicesString = '';\n    devicesArr.forEach((v, i) => {\n        devicesString += ` [${i + 1}]> ${chalk.bold(v.name)} | ${\n            v.icon\n        } | v: ${chalk.green(v.version)} | udid: ${chalk.grey(v.udid)}${\n            v.isDevice ? chalk.red(' (device)') : ''\n        }\\n`;\n    });\n\n    logToSummary(`${platform} Targets:\\n\\n${devicesString}`);\n};\n"],"file":"deviceManager.js"}