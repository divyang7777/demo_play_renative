{"version":3,"sources":["../../../src/platformTools/apple/swiftParser.js"],"names":["parseAppDelegate","c","platform","appFolder","appFolderName","isBundled","ip","port","Promise","resolve","newPort","runtime","appDelegate","entryFile","forceBundle","bundle","plugin","pluginPlat","key","injectPluginSwiftSync","package","clr","rgbDecimal","pluginBgColor","methods","application","didFinishLaunchingWithOptions","isRequired","func","begin","render","v","end","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","constructMethod","lines","method","output","length","forEach","Object","keys","key2","f","pluginConfigiOS","pluginAppDelegateMethods","appDelegateMethods","path","join","pattern","override","pluginAppDelegateImports","appDelegateImports","Array","appDelegateImport","chalk","grey","indexOf","delKey","plugArr","plugVal","includes","push"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport chalk from 'chalk';\nimport {\n    getEntryFile,\n    getAppTemplateFolder,\n    getConfigProp,\n    getGetJsBundleFile,\n    sanitizeColor,\n    getFlavouredProp\n} from '../../common';\nimport { logTask, logDebug } from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\nimport { writeCleanFile } from '../../systemTools/fileutils';\n\nexport const parseAppDelegate = (\n    c,\n    platform,\n    appFolder,\n    appFolderName,\n    isBundled = false,\n    ip = 'localhost',\n    port\n) => new Promise((resolve) => {\n    const newPort = port || c.runtime?.port;\n    logTask(`parseAppDelegateSync:${platform}:${ip}:${newPort}`);\n    const appDelegate = 'AppDelegate.swift';\n\n    const entryFile = getEntryFile(c, platform);\n\n    const forceBundle = getGetJsBundleFile(c, platform);\n    let bundle;\n    if (forceBundle) {\n        bundle = forceBundle;\n    } else if (isBundled) {\n        bundle = `RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"${\n            entryFile\n        }\", fallbackResource: nil)`;\n    } else {\n        bundle = `URL(string: \"http://${ip}:${newPort}/${entryFile}.bundle?platform=ios\")`;\n    }\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginSwiftSync(c, pluginPlat, key, pluginPlat.package);\n    });\n\n    // BG COLOR\n    // let pluginBgColor = 'vc.view.backgroundColor = UIColor.white';\n    // const UI_COLORS = ['black', 'blue', 'brown', 'clear', 'cyan', 'darkGray', 'gray', 'green', 'lightGray', 'magneta', 'orange', 'purple', 'red', 'white', 'yellow'];\n    // if (backgroundColor) {\n    //     if (UI_COLORS.includes(backgroundColor)) {\n    //         pluginBgColor = `vc.view.backgroundColor = UIColor.${backgroundColor}`;\n    //     } else {\n    //         logWarning(`Your choosen color in renative.json for platform ${chalk.white(platform)} is not supported by UIColor. use one of the predefined ones: ${chalk.white(UI_COLORS.join(','))}`);\n    //     }\n    // }\n\n    const clr = sanitizeColor(getConfigProp(c, platform, 'backgroundColor'), 'backgroundColor')\n        .rgbDecimal;\n    const pluginBgColor = `vc.view.backgroundColor = UIColor(red: ${\n        clr[0]\n    }, green: ${clr[1]}, blue: ${clr[2]}, alpha: ${clr[3]})`;\n    const methods = {\n        application: {\n            didFinishLaunchingWithOptions: {\n                isRequired: true,\n                func:\n                        'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {',\n                begin: `\n        self.window = UIWindow(frame: UIScreen.main.bounds)\n        let vc = UIViewController()\n        let v = RCTRootView(\n            bundleURL: bundleUrl!,\n            moduleName: moduleName,\n            initialProperties: nil,\n            launchOptions: launchOptions)\n        vc.view = v\n        ${pluginBgColor}\n        v.frame = vc.view.bounds\n        self.window?.rootViewController = vc\n        self.window?.makeKeyAndVisible()\n        UNUserNotificationCenter.current().delegate = self\n                `,\n                render: v => `${v}`,\n                end: 'return true'\n            },\n            applicationDidBecomeActive: {\n                func:\n                        'func applicationDidBecomeActive(_ application: UIApplication) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            open: {\n                func:\n                        'func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {',\n                begin: 'var handled = false',\n                render: v => `if(!handled) { handled = ${v} }`,\n                end: 'return handled'\n            },\n            supportedInterfaceOrientationsFor: {\n                func:\n                        'func application(_ application: UIApplication, supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {',\n                begin: null,\n                render: v => `return ${v}`,\n                end: null\n            },\n            didReceiveRemoteNotification: {\n                func:\n                        'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didFailToRegisterForRemoteNotificationsWithError: {\n                func:\n                        'func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didReceive: {\n                func:\n                        'func application(_ application: UIApplication, didReceive notification: UILocalNotification) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didRegister: {\n                func:\n                        'func application(_ application: UIApplication, didRegister notificationSettings: UIUserNotificationSettings) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            },\n            didRegisterForRemoteNotificationsWithDeviceToken: {\n                func:\n                        'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        },\n        userNotificationCenter: {\n            willPresent: {\n                func:\n                        'func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {',\n                begin: null,\n                render: v => `${v}`,\n                end: null\n            }\n        }\n    };\n\n    const constructMethod = (lines, method) => {\n        let output = '';\n        if (lines.length || method.isRequired) {\n            output += `\\n${method.func}\\n`;\n            if (method.begin) output += `   ${method.begin}\\n`;\n            lines.forEach((v) => {\n                output += `    ${method.render(v)}\\n`;\n            });\n            if (method.end) output += `   ${method.end}\\n`;\n            output += '}\\n';\n        }\n        return output;\n    };\n    Object.keys(methods).forEach((key) => {\n        const method = methods[key];\n        Object.keys(method).forEach((key2) => {\n            const f = method[key2];\n            c.pluginConfigiOS.pluginAppDelegateMethods += constructMethod(\n                c.pluginConfigiOS.appDelegateMethods[key][key2],\n                f\n            );\n        });\n    });\n\n    writeCleanFile(\n        path.join(\n            getAppTemplateFolder(c, platform),\n            appFolderName,\n            appDelegate\n        ),\n        path.join(appFolder, appFolderName, appDelegate),\n        [\n            { pattern: '{{BUNDLE}}', override: bundle },\n            { pattern: '{{ENTRY_FILE}}', override: entryFile },\n            { pattern: '{{IP}}', override: ip },\n            { pattern: '{{PORT}}', override: port },\n            { pattern: '{{BACKGROUND_COLOR}}', override: pluginBgColor },\n            {\n                pattern: '{{APPDELEGATE_IMPORTS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateImports\n            },\n            {\n                pattern: '{{APPDELEGATE_METHODS}}',\n                override: c.pluginConfigiOS.pluginAppDelegateMethods\n            }\n        ], null, c\n    );\n    resolve();\n});\n\nexport const injectPluginSwiftSync = (c, plugin, key) => {\n    logDebug(`injectPluginSwiftSync:${c.platform}:${key}`);\n    const appDelegateImports = getFlavouredProp(\n        c,\n        plugin,\n        'appDelegateImports'\n    );\n    if (appDelegateImports instanceof Array) {\n        appDelegateImports.forEach((appDelegateImport) => {\n            // Avoid duplicate imports\n            logTask('appDelegateImports add', chalk.grey);\n            if (\n                c.pluginConfigiOS.pluginAppDelegateImports.indexOf(\n                    appDelegateImport\n                ) === -1\n            ) {\n                logTask('appDelegateImports add ok', chalk.grey);\n                c.pluginConfigiOS.pluginAppDelegateImports += `import ${appDelegateImport}\\n`;\n            }\n        });\n    }\n    // if (plugin.appDelegateMethods instanceof Array) {\n    //     c.pluginConfigiOS.pluginAppDelegateMethods += `${plugin.appDelegateMethods.join('\\n    ')}`;\n    // }\n\n    const appDelegateMethods = getFlavouredProp(\n        c,\n        plugin,\n        'appDelegateMethods'\n    );\n    if (appDelegateMethods) {\n        Object.keys(appDelegateMethods).forEach((delKey) => {\n            Object.keys(appDelegateMethods[delKey]).forEach((key2) => {\n                const plugArr = c.pluginConfigiOS.appDelegateMethods[delKey][key2];\n                const plugVal = appDelegateMethods[delKey][key2];\n                if (plugVal) {\n                    plugVal.forEach((v) => {\n                        if (!plugArr.includes(v)) {\n                            plugArr.push(v);\n                        }\n                    });\n                }\n            });\n        });\n    }\n};\n"],"file":"swiftParser.js"}