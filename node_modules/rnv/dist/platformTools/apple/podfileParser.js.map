{"version":3,"sources":["../../../src/platformTools/apple/podfileParser.js"],"names":["parsePodFile","c","platform","appFolder","pluginInject","pluginConfigiOS","podfileInject","plugin","pluginPlat","key","podName","_injectPod","podNames","forEach","v","isStatic","staticFrameworks","includes","push","reactSubSpecs","podfile","injectLines","ignoreWarnings","podWarnings","podfileSources","podfileObj","buildConfig","platforms","sources","length","deploymentTarget","staticPodDefinition","podVersion","isPodOld","path","join","pattern","override","isNpm","podPath","git","commit","version"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport compareVersions from 'compare-versions';\nimport {\n    getAppFolder,\n    getAppTemplateFolder,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport { logTask, logWarning } from '../../systemTools/logger';\nimport { parsePlugins } from '../../pluginTools';\nimport { doResolve, doResolvePath } from '../../resolve';\nimport { executeAsync } from '../../systemTools/exec';\nimport { writeCleanFile } from '../../systemTools/fileutils';\n\nexport const parsePodFile = async (c, platform) => {\n    logTask(`parsePodFileSync:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    let pluginInject = '';\n\n    // PLUGINS\n    c.pluginConfigiOS.podfileInject = '';\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        const podName = getFlavouredProp(c, pluginPlat, 'podName');\n        if (podName) {\n            pluginInject += _injectPod(podName, pluginPlat, plugin, key);\n        }\n        const podNames = getFlavouredProp(c, pluginPlat, 'podNames');\n        if (podNames) {\n            podNames.forEach((v) => {\n                pluginInject += _injectPod(v, pluginPlat, plugin, key);\n            });\n        }\n        const isStatic = getFlavouredProp(c, pluginPlat, 'isStatic');\n        if (isStatic === true) {\n            if (!c.pluginConfigiOS.staticFrameworks.includes(podName)) {\n                c.pluginConfigiOS.staticFrameworks.push(`'${podName}'`);\n            }\n        }\n        const reactSubSpecs = getFlavouredProp(c, pluginPlat, 'reactSubSpecs');\n        if (reactSubSpecs) {\n            logWarning(\n                'reactSubSpecs prop is deprecated. yoy can safely remove it'\n            );\n        }\n\n        const podfile = getFlavouredProp(c, pluginPlat, 'Podfile');\n        if (podfile) {\n            const { injectLines } = podfile;\n            // INJECT LINES\n            if (injectLines) {\n                injectLines.forEach((v) => {\n                    c.pluginConfigiOS.podfileInject += `${v}\\n`;\n                });\n            }\n        }\n    });\n\n    // WARNINGS\n    const ignoreWarnings = getConfigProp(c, platform, 'ignoreWarnings');\n    const podWarnings = ignoreWarnings ? 'inhibit_all_warnings!' : '';\n\n    // SOURCES\n    c.pluginConfigiOS.podfileSources = '';\n    const podfileObj = getFlavouredProp(\n        c,\n        c.buildConfig?.platforms?.[platform],\n        'Podfile'\n    );\n    const podfileSources = podfileObj?.sources;\n    if (podfileSources && podfileSources.length) {\n        podfileSources.forEach((v) => {\n            c.pluginConfigiOS.podfileSources += `source '${v}'\\n`;\n        });\n    }\n\n    // DEPLOYMENT TARGET\n    const deploymentTarget = getConfigProp(\n        c,\n        platform,\n        'deploymentTarget',\n        '10.0'\n    );\n    c.pluginConfigiOS.deploymentTarget = deploymentTarget;\n\n    // STATIC POD INJECT VERSION\n    c.pluginConfigiOS.staticPodDefinition = 'Pod::BuildType.static_library';\n    try {\n        const podVersion = await executeAsync(c, 'pod --version');\n        const isPodOld = compareVersions(podVersion, '1.9') < 0;\n        if (isPodOld) {\n            c.pluginConfigiOS.staticPodDefinition = 'Pod::Target::BuildType.static_library';\n        }\n    } catch (e) {\n        // Ignore\n    }\n\n    writeCleanFile(\n        path.join(getAppTemplateFolder(c, platform), 'Podfile'),\n        path.join(appFolder, 'Podfile'),\n        [\n            { pattern: '{{PLUGIN_PATHS}}', override: pluginInject },\n            { pattern: '{{PLUGIN_WARNINGS}}', override: podWarnings },\n            {\n                pattern: '{{PLUGIN_PODFILE_INJECT}}',\n                override: c.pluginConfigiOS.podfileInject\n            },\n            {\n                pattern: '{{PLUGIN_PODFILE_SOURCES}}',\n                override: c.pluginConfigiOS.podfileSources\n            },\n            {\n                pattern: '{{PLUGIN_DEPLOYMENT_TARGET}}',\n                override: c.pluginConfigiOS.deploymentTarget\n            },\n            {\n                pattern: '{{PLUGIN_STATIC_FRAMEWORKS}}',\n                override: c.pluginConfigiOS.staticFrameworks.join(',')\n            },\n            {\n                pattern: '{{PATH_JSC_ANDROID}}',\n                override: doResolve('jsc-android')\n            },\n            {\n                pattern: '{{PATH_REACT_NATIVE}}',\n                override: doResolve('react-native')\n            },\n            {\n                pattern: '{{PLUGIN_STATIC_POD_DEFINITION}}',\n                override: c.pluginConfigiOS.staticPodDefinition\n            }\n        ], null, c\n    );\n    return true;\n};\n\nconst _injectPod = (podName, pluginPlat, plugin, key) => {\n    let pluginInject = '';\n    const isNpm = plugin['no-npm'] !== true;\n    if (isNpm) {\n        const podPath = doResolvePath(pluginPlat.path ?? key);\n        pluginInject += `  pod '${podName}', :path => '${podPath}'\\n`;\n    } else if (pluginPlat.git) {\n        const commit = pluginPlat.commit\n            ? `, :commit => '${pluginPlat.commit}'`\n            : '';\n        pluginInject += `  pod '${podName}', :git => '${\n            pluginPlat.git\n        }'${commit}\\n`;\n    } else if (pluginPlat.version) {\n        pluginInject += `  pod '${podName}', '${pluginPlat.version}'\\n`;\n    } else {\n        pluginInject += `  pod '${podName}'\\n`;\n    }\n    return pluginInject;\n};\n"],"file":"podfileParser.js"}