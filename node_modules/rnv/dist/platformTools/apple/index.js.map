{"version":3,"sources":["../../../src/platformTools/apple/index.js"],"names":["checkIfPodsIsRequired","c","appFolder","platform","podChecksumPath","path","join","fs","existsSync","podChecksum","readFileSync","toString","podContentChecksum","updatePodsChecksum","existingContent","runPod","Promise","reject","program","updatePods","podsRequired","Error","cwd","env","process","s","isGenericError","includes","then","catch","er","copyAppleAssets","appFolderName","resolve","runXcodeProject","runtime","target","appPath","device","scheme","runScheme","bundleIsDev","bundleAssets","chalk","yellow","white","paths","appConfig","config","grey","devicesArr","length","name","udid","p","targetUDID","run","selectedDevice","JSON","stringify","packageBundleForXcode","_checkLockAndExec","find","d","devices","map","v","icon","green","version","isDevice","red","value","inquirer","prompt","message","type","choices","sim","replace","cmd","isDeviceLocked","isDeviceNotRegistered","confirm","isDevelopmentTeamMissing","loc","appId","_setDevelopmentTeam","isAutomaticSigningDisabled","_handleProvisioningIssues","isProvisioningMissing","e","msg","provisioningStyle","isProvAutomatic","proAutoText","fixCommand","workspacePath","confirmAuto","_setAutomaticSigning","files","platforms","buildSchemes","teamID","plat","composeXcodeArgsFromCLI","string","spacesReplaced","keysAndValues","split","unescapedValues","buildXcodeProject","getAppFolderName","sdk","IOS","TVOS","MACOS","sdkArr","buildPath","allowProvisioningUpdates","ignoreLogs","ps","xcodebuildArgs","push","buildConfig","args","rawCommand","archiveXcodeProject","exportPath","exportPathArchive","xcodebuildArchiveArgs","exportXcodeProject","xcodebuildExportArgs","isDev","entryFile","info","projectFolder","runAppleLog","filter","child","child_process","execFile","stdio","customFds","stdout","on","data","toLowerCase","configureXcodeProject","ip","port","bundlerIp","pluginConfigiOS","podfileInject","staticFrameworks","staticPodDefinition","exportOptions","embeddedFonts","embeddedFontSources","ignoreProjectFonts","pluginAppDelegateImports","pluginAppDelegateMethods","appDelegateMethods","application","didFinishLaunchingWithOptions","applicationDidBecomeActive","open","supportedInterfaceOrientationsFor","didReceiveRemoteNotification","didFailToRegisterForRemoteNotificationsWithError","didReceive","didRegister","didRegisterForRemoteNotificationsWithDeviceToken","userNotificationCenter","willPresent","podfileSources","embeddedFontSourcesCheck","font","dir","key","includedFonts","fontSource","fontFolder","fontDest","tId"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular dep\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport inquirer from 'inquirer';\n\nimport { executeAsync, commandExistsSync } from '../../systemTools/exec';\nimport { getAppleDevices } from './deviceManager';\nimport { registerDevice } from './fastlane';\nimport {\n    getAppFolder,\n    getConfigProp,\n    getIP,\n    generateChecksum,\n} from '../../common';\nimport { doResolve } from '../../resolve';\nimport { isPlatformActive } from '..';\nimport {\n    copyAssetsFolder,\n    copyBuildsFolder,\n    parseFonts\n} from '../../projectTools/projectParser';\nimport {\n    copyFileSync,\n    mkdirSync,\n    writeFileSync,\n    fsWriteFileSync\n} from '../../systemTools/fileutils';\nimport { IOS, TVOS, MACOS } from '../../constants';\nimport {\n    parseExportOptionsPlist,\n    parseInfoPlist,\n    parseEntitlementsPlist\n} from './plistParser';\nimport { parseXcscheme } from './xcschemeParser';\nimport { parsePodFile } from './podfileParser';\nimport { parseXcodeProject } from './xcodeParser';\nimport { parseAppDelegate } from './swiftParser';\nimport {\n    logInfo,\n    logTask,\n    logError,\n    logWarning,\n    logDebug,\n    logSuccess,\n    logRaw\n} from '../../systemTools/logger';\n\nconst checkIfPodsIsRequired = async (c) => {\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    if (!fs.existsSync(podChecksumPath)) return true;\n    const podChecksum = fs.readFileSync(podChecksumPath).toString();\n    const podContentChecksum = generateChecksum(\n        fs.readFileSync(path.join(appFolder, 'Podfile')).toString()\n    );\n\n    if (podChecksum !== podContentChecksum) {\n        logDebug('runPod:isMandatory');\n        return true;\n    }\n    logInfo(\n        'Pods do not seem like they need to be updated. If you want to update them manually run the same command with \"-u\" parameter'\n    );\n    return true;\n};\n\nconst updatePodsChecksum = (c) => {\n    logTask('updatePodsChecksum');\n    const appFolder = getAppFolder(c, c.platform);\n    const podChecksumPath = path.join(appFolder, 'Podfile.checksum');\n    const podContentChecksum = generateChecksum(\n        fs.readFileSync(path.join(appFolder, 'Podfile')).toString()\n    );\n    if (fs.existsSync(podChecksumPath)) {\n        const existingContent = fs.readFileSync(podChecksumPath).toString();\n        if (existingContent !== podContentChecksum) {\n            logDebug(`updatePodsChecksum:${podContentChecksum}`);\n            return fsWriteFileSync(podChecksumPath, podContentChecksum);\n        }\n        return true;\n    }\n    logDebug(`updatePodsChecksum:${podContentChecksum}`);\n    return fsWriteFileSync(podChecksumPath, podContentChecksum);\n};\n\nconst runPod = async (c, platform) => {\n    logTask(`runPod:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    if (!fs.existsSync(appFolder)) {\n        return Promise.reject(`Location ${appFolder} does not exists!`);\n    }\n    const podsRequired = c.program.updatePods || (await checkIfPodsIsRequired(c));\n\n    if (podsRequired) {\n        if (!commandExistsSync('pod')) {\n            throw new Error(\n                'Cocoapods not installed. Please run `sudo gem install cocoapods`'\n            );\n        }\n\n        try {\n            await executeAsync(c, 'pod install', {\n                cwd: appFolder,\n                env: process.env\n            });\n        } catch (e) {\n            const s = e?.toString ? e.toString() : '';\n            const isGenericError = s.includes('No provisionProfileSpecifier configured')\n                || s.includes('TypeError:')\n                || s.includes('ReferenceError:')\n                || s.includes('find gem cocoapods');\n            if (isGenericError) { return new Error(`pod install failed with:\\n ${s}`); }\n            logWarning(\n                `Looks like pod install is not enough! Let's try pod update! Error:\\n ${s}`\n            );\n            return executeAsync(c, 'pod update', {\n                cwd: appFolder,\n                env: process.env\n            })\n                .then(() => updatePodsChecksum(c))\n                .catch(er => Promise.reject(er));\n        }\n\n        updatePodsChecksum(c);\n        return true;\n    }\n};\n\nconst copyAppleAssets = (c, platform, appFolderName) => new Promise((resolve) => {\n    logTask('copyAppleAssets');\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const appFolder = getAppFolder(c, platform);\n\n    // ASSETS\n    fsWriteFileSync(path.join(appFolder, 'main.jsbundle'), '{}');\n    mkdirSync(path.join(appFolder, 'assets'));\n    mkdirSync(path.join(appFolder, `${appFolderName}/images`));\n\n    resolve();\n});\n\nexport const runXcodeProject = async (c) => {\n    logTask(`runXcodeProject:${c.platform}:${c.runtime.target}`);\n\n    const appPath = getAppFolder(c, c.platform);\n    const { device } = c.program;\n    const scheme = getConfigProp(c, c.platform, 'scheme');\n    const runScheme = getConfigProp(c, c.platform, 'runScheme');\n    const bundleIsDev = getConfigProp(c, c.platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, c.platform, 'bundleAssets') === true;\n    let p;\n\n    if (!scheme) {\n        return Promise.reject(\n            `You missing scheme in platforms.${chalk.yellow(\n                c.platform\n            )} in your ${chalk.white(\n                c.paths.appConfig.config\n            )}! Check example config for more info:  ${chalk.grey(\n                'https://github.com/pavjacko/renative/blob/master/appConfigs/helloworld/renative.json'\n            )} `\n        );\n    }\n\n    let devicesArr;\n    if (device === true) {\n        devicesArr = await getAppleDevices(c, c.platform, false, true);\n    } else if (c.runtime.target === true) {\n        devicesArr = await getAppleDevices(c, c.platform, true, false);\n    }\n\n    if (device === true) {\n        if (devicesArr.length === 1) {\n            logSuccess(\n                `Found one device connected! device name: ${chalk.white(\n                    devicesArr[0].name\n                )} udid: ${chalk.white(devicesArr[0].udid)}`\n            );\n            if (devicesArr[0].udid) {\n                p = `--device --udid ${devicesArr[0].udid}`;\n                c.runtime.targetUDID = devicesArr[0].udid;\n            } else {\n                p = `--device ${devicesArr[0].name}`;\n            }\n        } else if (devicesArr.length > 1) {\n            const run = (selectedDevice) => {\n                logDebug(\n                    `Selected device: ${JSON.stringify(\n                        selectedDevice,\n                        null,\n                        3\n                    )}`\n                );\n                c.runtime.targetUDID = selectedDevice.udid;\n                if (selectedDevice.udid) {\n                    p = `--device --udid ${selectedDevice.udid}`;\n                } else {\n                    p = `--device ${selectedDevice.name}`;\n                }\n\n                logDebug(`RN params: ${p}`);\n\n                if (bundleAssets) {\n                    logDebug('Assets will be bundled');\n                    return packageBundleForXcode(\n                        c,\n                        c.platform,\n                        bundleIsDev\n                    ).then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n                }\n                return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n            };\n\n            if (c.runtime.target !== true) {\n                const selectedDevice = devicesArr.find(\n                    d => d.name === c.runtime.target\n                );\n                if (selectedDevice) {\n                    return run(selectedDevice);\n                }\n                logWarning(`Could not find device ${c.runtime.target}`);\n            }\n\n            const devices = devicesArr.map(v => ({\n                name: `${v.name} | ${v.icon} | v: ${chalk.green(\n                    v.version\n                )} | udid: ${chalk.grey(v.udid)}${\n                    v.isDevice ? chalk.red(' (device)') : ''\n                }`,\n                value: v\n            }));\n\n            const { sim } = await inquirer.prompt({\n                name: 'sim',\n                message: 'Select the device you want to launch on',\n                type: 'list',\n                choices: devices\n            });\n\n            if (sim) {\n                return run(sim);\n            }\n        } else {\n            return Promise.reject(`No ${c.platform} devices connected!`);\n        }\n    } else if (device) {\n        p = `--device ${device}`;\n    } else if (c.runtime.target === true) {\n        const devices = devicesArr.map(v => ({\n            name: `${v.name} | ${v.icon} | v: ${chalk.green(\n                v.version\n            )} | udid: ${chalk.grey(v.udid)}${\n                v.isDevice ? chalk.red(' (device)') : ''\n            }`,\n            value: v\n        }));\n\n        const { sim } = await inquirer.prompt({\n            name: 'sim',\n            message: 'Select the device you want to launch on',\n            type: 'list',\n            choices: devices\n        });\n        c.runtime.target = sim.name;\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    } else {\n        p = `--simulator ${c.runtime.target.replace(/(\\s+)/g, '\\\\$1')}`;\n    }\n\n    if (p) {\n        // const allowProvisioningUpdates = getConfigProp(\n        //     c,\n        //     c.platform,\n        //     'allowProvisioningUpdates',\n        //     true\n        // );\n        // if (allowProvisioningUpdates) p.push('--allowProvisioningUpdates');\n\n        if (bundleAssets) {\n            return packageBundleForXcode(c, c.platform, bundleIsDev)\n                .then(() => _checkLockAndExec(c, appPath, scheme, runScheme, p));\n        }\n        return _checkLockAndExec(c, appPath, scheme, runScheme, p);\n    }\n    return Promise.reject('Missing options for react-native command!');\n};\n\nconst _checkLockAndExec = async (c, appPath, scheme, runScheme, p) => {\n    logTask(`_checkLockAndExec:${scheme}:${runScheme}`);\n    const cmd = `node ${doResolve(\n        'react-native'\n    )}/local-cli/cli.js run-ios --project-path ${appPath} --scheme ${scheme} --configuration ${runScheme} ${p}`;\n    try {\n        // Inherit full logs\n        // return executeAsync(c, cmd, { stdio: 'inherit', silent: true });\n        return executeAsync(c, cmd);\n    } catch (e) {\n        if (e && e.includes) {\n            const isDeviceLocked = e.includes('ERROR:DEVICE_LOCKED');\n            if (isDeviceLocked) {\n                await inquirer.prompt({\n                    message: 'Unlock your device and press ENTER',\n                    type: 'confirm',\n                    name: 'confirm'\n                });\n                return executeAsync(c, cmd);\n            }\n            const isDeviceNotRegistered = e.includes(\n                \"doesn't include the currently selected device\"\n            );\n            if (isDeviceNotRegistered) {\n                logError(e);\n                logWarning(\n                    `${c.platform} DEVICE: ${chalk.white(\n                        c.runtime.target\n                    )} with UDID: ${chalk.white(\n                        c.runtime.targetUDID\n                    )} is not included in your provisionong profile in TEAM: ${chalk.white(\n                        getConfigProp(c, c.platform, 'teamID')\n                    )}`\n                );\n                const { confirm } = await inquirer.prompt({\n                    name: 'confirm',\n                    message: 'Do you want to register it?',\n                    type: 'confirm'\n                });\n                if (confirm) {\n                    await registerDevice(c);\n                    return Promise.reject('Updated. Re-run your last command');\n                    // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                    // await configureXcodeProject(c, c.platform);\n                    // return runXcodeProject(c);\n                }\n            }\n            const isDevelopmentTeamMissing = e.includes(\n                'requires a development team. Select a development team'\n            );\n            if (isDevelopmentTeamMissing) {\n                const loc = `./appConfigs/${\n                    c.runtime.appId\n                }/renative.json:{ \"platforms\": { \"${c.platform}\": { \"teamID\": \".....\"`;\n                logError(e);\n                logWarning(`You need specify the development team if you want to run app on ${\n                    c.platform\n                } device. this can be set manually in ${chalk.white(loc)}\n  You can find correct teamID in the URL of your apple developer account: ${chalk.white(\n        'https://developer.apple.com/account/#/overview/YOUR-TEAM-ID'\n    )}`);\n                const { confirm } = await inquirer.prompt({\n                    name: 'confirm',\n                    message: `Type in your Apple Team ID to be used (will be saved to ${c.paths.appConfig?.config})`,\n                    type: 'input'\n                });\n                if (confirm) {\n                    await _setDevelopmentTeam(c, confirm);\n                    return Promise.reject('Updated. Re-run your last command');\n                    // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n                    // await configureXcodeProject(c, c.platform);\n                    // return runXcodeProject(c);\n                }\n            }\n            const isAutomaticSigningDisabled = e.includes(\n                'Automatic signing is disabled and unable to generate a profile'\n            );\n            if (isAutomaticSigningDisabled) {\n                return _handleProvisioningIssues(\n                    c,\n                    e,\n                    \"Your iOS App Development provisioning profiles don't match. under manual signing mode\"\n                );\n            }\n            const isProvisioningMissing = e.includes(\n                'requires a provisioning profile'\n            );\n            if (isProvisioningMissing) {\n                return _handleProvisioningIssues(\n                    c,\n                    e,\n                    'Your iOS App requires a provisioning profile'\n                );\n            }\n        }\n\n        return Promise.reject(`${e}\n\n${chalk.green('SUGGESTION:')}\n\n${chalk.yellow('STEP 1:')}\nOpen xcode workspace at: ${chalk.white(`${appPath}/RNVApp.xcworkspace`)}\n\n${chalk.yellow('STEP 2:')}\n${chalk.white('Run app and observe any extra errors')}\n\n${chalk.yellow('IF ALL HOPE IS LOST:')}\nRaise new issue and copy this SUMMARY box output at:\n${chalk.white('https://github.com/pavjacko/renative/issues')}\nand we will try to help!\n\n`);\n    }\n};\n\nconst _handleProvisioningIssues = async (c, e, msg) => {\n    const provisioningStyle = getConfigProp(c, c.platform, 'provisioningStyle');\n    // Sometimes xcodebuild reports Automatic signing is disabled but it could be keychain not accepted by user\n    const isProvAutomatic = provisioningStyle === 'Automatic';\n    const proAutoText = isProvAutomatic\n        ? ''\n        : `${chalk.white('[4]>')} Switch to automatic signing for appId: ${\n            c.runtime.appId\n        } , platform: ${c.platform}, scheme: ${c.runtime.scheme}`;\n    const fixCommand = `rnv crypto updateProfile -p ${c.platform} -s ${c.runtime.scheme}`;\n    const workspacePath = chalk.white(\n        `${getAppFolder(c, c.platform)}/RNVApp.xcworkspace`\n    );\n    logError(e);\n    logWarning(`${msg}. To fix try:\n${chalk.white(\n        '[1]>'\n    )} Configure your certificates, provisioning profiles correctly manually\n${chalk.white('[2]>')} Try to generate matching profiles with ${chalk.white(\n    fixCommand\n)} (you need correct priviledges in apple developer portal)\n${chalk.white(\n        '[3]>'\n    )} Open generated project in Xcode: ${\n    workspacePath\n} and debug from there (Sometimes this helps for the first-time builds)\n${proAutoText}`);\n    if (isProvAutomatic) return false;\n    const { confirmAuto } = await inquirer.prompt({\n        name: 'confirmAuto',\n        message: 'Switch to automatic signing?',\n        type: 'confirm'\n    });\n    if (confirmAuto) {\n        await _setAutomaticSigning(c);\n        return Promise.reject('Updated. Re-run your last command');\n        // TODO: Tot picking up if re-run from here. forcing users to do it themselves for now\n        // await configureXcodeProject(c, c.platform);\n        // return runXcodeProject(c);\n    }\n};\n\nconst _setAutomaticSigning = async (c) => {\n    logTask(`_setAutomaticSigning:${c.platform}`);\n\n    const scheme = c.files.appConfig?.config?.platforms?.[c.platform]?.buildSchemes?.[\n            c.runtime.scheme\n        ];\n    if (scheme) {\n        scheme.provisioningStyle = 'Automatic';\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(\n            `Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${\n                c.platform\n            }\": { buildSchemes: { \"${c.runtime.scheme}\" ... Object is null. Try update file manually`\n        );\n    }\n};\n\nconst _setDevelopmentTeam = async (c, teamID) => {\n    logTask(`_setDevelopmentTeam:${teamID}`);\n\n    const plat = c.files.appConfig?.config?.platforms?.[c.platform];\n    if (plat) {\n        plat.teamID = teamID;\n        writeFileSync(c.paths.appConfig.config, c.files.appConfig.config);\n        logSuccess(`Succesfully updated ${c.paths.appConfig.config}`);\n    } else {\n        return Promise.reject(\n            `Failed to update ${c.paths.appConfig?.config}.\"platforms\": { \"${\n                c.platform\n            }\" ... Object is null. Try update file manually`\n        );\n    }\n};\n\nconst composeXcodeArgsFromCLI = (string) => {\n    const spacesReplaced = string.replace(\n        /\\s(?=(?:[^'\"`]*(['\"`])[^'\"`]*\\1)*[^'\"`]*$)/g,\n        '&&&'\n    ); // replaces spaces outside quotes with &&& for easy split\n    const keysAndValues = spacesReplaced.split('&&&');\n    const unescapedValues = keysAndValues.map(s => s\n        .replace(/'/g, '')\n        .replace(/\"/g, '')\n        .replace(/\\\\/g, '')); // removes all quotes or backslashes\n\n    return unescapedValues;\n};\n\nexport const buildXcodeProject = async (c, platform) => {\n    logTask(`buildXcodeProject:${platform}`);\n\n    const appFolderName = getAppFolderName(c, platform);\n    const runScheme = getConfigProp(c, platform, 'runScheme', 'Debug');\n    let sdk = getConfigProp(c, platform, 'sdk');\n    if (!sdk) {\n        if (platform === IOS) sdk = 'iphoneos';\n        if (platform === TVOS) sdk = 'appletvos';\n        if (platform === MACOS) sdk = 'macosx';\n    }\n    const sdkArr = [sdk];\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const appPath = getAppFolder(c, platform);\n    const buildPath = path.join(appPath, `build/${scheme}`);\n    const allowProvisioningUpdates = getConfigProp(\n        c,\n        platform,\n        'allowProvisioningUpdates',\n        true\n    );\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n    let ps = '';\n    if (c.program.xcodebuildArgs) {\n        ps = c.program.xcodebuildArgs;\n    }\n    const p = [];\n\n    if (!ps.includes('-workspace')) {\n        p.push('-workspace');\n        p.push(`${appPath}/${appFolderName}.xcworkspace`);\n    }\n    if (!ps.includes('-scheme')) {\n        p.push('-scheme');\n        p.push(scheme);\n    }\n    if (!ps.includes('-sdk')) {\n        p.push('-sdk');\n        p.push(...sdkArr);\n    }\n    if (!ps.includes('-configuration')) {\n        p.push('-configuration');\n        p.push(runScheme);\n    }\n    if (!ps.includes('-derivedDataPath')) {\n        p.push('-derivedDataPath');\n        p.push(buildPath);\n    }\n\n    p.push('build');\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) { p.push('-allowProvisioningUpdates'); }\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n\n    logTask('buildXcodeProject: STARTING xcodebuild BUILD...');\n\n    if (c.buildConfig.platforms[platform].runScheme === 'Release') {\n        await executeAsync(c, `xcodebuild ${ps} ${p.join(' ')}`);\n        logSuccess(\n            `Your Build is located in ${chalk.white(buildPath)} .`\n        );\n    }\n\n    const args = ps !== '' ? [...composeXcodeArgsFromCLI(ps), ...p] : p;\n\n    logDebug('xcodebuild args', args);\n\n    return executeAsync('xcodebuild', { rawCommand: { args } }).then(() => {\n        logSuccess(`Your Build is located in ${chalk.white(buildPath)} .`);\n    });\n};\n\nconst archiveXcodeProject = (c, platform) => {\n    logTask(`archiveXcodeProject:${platform}`);\n\n    const appFolderName = getAppFolderName(c, platform);\n    const runScheme = getConfigProp(c, platform, 'runScheme', 'Debug');\n    let sdk = getConfigProp(c, platform, 'sdk');\n    if (!sdk) {\n        if (platform === IOS) sdk = 'iphoneos';\n        if (platform === TVOS) sdk = 'appletvos';\n        if (platform === MACOS) sdk = 'macosx';\n    }\n    const sdkArr = [sdk];\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(\n        c,\n        platform,\n        'allowProvisioningUpdates',\n        true\n    );\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n    const exportPathArchive = `${exportPath}/${scheme}.xcarchive`;\n    let ps = '';\n    if (c.program.xcodebuildArchiveArgs) {\n        ps = c.program.xcodebuildArchiveArgs;\n    }\n    const p = [];\n\n    if (!ps.includes('-workspace')) {\n        p.push('-workspace');\n        p.push(`${appPath}/${appFolderName}.xcworkspace`);\n    }\n    if (!ps.includes('-scheme')) {\n        p.push('-scheme');\n        p.push(scheme);\n    }\n    if (!ps.includes('-sdk')) {\n        p.push('-sdk');\n        p.push(...sdkArr);\n    }\n    if (!ps.includes('-configuration')) {\n        p.push('-configuration');\n        p.push(runScheme);\n    }\n    p.push('archive');\n    if (!ps.includes('-archivePath')) {\n        p.push('-archivePath');\n        p.push(exportPathArchive);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) { p.push('-allowProvisioningUpdates'); }\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n    // if (sdk === 'iphonesimulator') p.push('ONLY_ACTIVE_ARCH=NO', \"-destination='name=iPhone 7,OS=10.2'\");\n\n    logTask('archiveXcodeProject: STARTING xcodebuild ARCHIVE...');\n\n\n    const args = ps !== '' ? [...composeXcodeArgsFromCLI(ps), ...p] : p;\n\n    logDebug('xcodebuild args', args);\n\n    return executeAsync('xcodebuild', { rawCommand: { args } }).then(() => {\n        logSuccess(`Your Archive is located in ${chalk.white(exportPath)} .`);\n    });\n};\n\nconst exportXcodeProject = async (c, platform) => {\n    logTask(`exportXcodeProject:${platform}`);\n\n    await archiveXcodeProject(c, platform);\n\n    const appPath = getAppFolder(c, platform);\n    const exportPath = path.join(appPath, 'release');\n\n    const scheme = getConfigProp(c, platform, 'scheme');\n    const allowProvisioningUpdates = getConfigProp(\n        c,\n        platform,\n        'allowProvisioningUpdates',\n        true\n    );\n    const ignoreLogs = getConfigProp(c, platform, 'ignoreLogs');\n\n    let ps = '';\n    if (c.program.xcodebuildExportArgs) {\n        ps = c.program.xcodebuildExportArgs;\n    }\n    const p = ['-exportArchive'];\n\n    if (!ps.includes('-archivePath')) {\n        p.push(`-archivePath ${exportPath}/${scheme}.xcarchive`);\n    }\n    if (!ps.includes('-exportOptionsPlist')) {\n        p.push(`-exportOptionsPlist ${appPath}/exportOptions.plist`);\n    }\n    if (!ps.includes('-exportPath')) {\n        p.push(`-exportPath ${exportPath}`);\n    }\n\n    if (allowProvisioningUpdates && !ps.includes('-allowProvisioningUpdates')) { p.push('-allowProvisioningUpdates'); }\n    if (ignoreLogs && !ps.includes('-quiet')) p.push('-quiet');\n\n    logDebug('running', p);\n\n    logTask('exportXcodeProject: STARTING xcodebuild EXPORT...');\n\n    return executeAsync(c, `xcodebuild ${p.join(' ')}`).then(() => {\n        logSuccess(`Your IPA is located in ${chalk.white(exportPath)} .`);\n    });\n};\n\nconst packageBundleForXcode = (c, platform, isDev = false) => {\n    logTask(`packageBundleForXcode:${platform}`);\n    // const { maxErrorLength } = c.program;\n    const args = [\n        'bundle',\n        '--platform',\n        'ios',\n        '--dev',\n        isDev,\n        '--assets-dest',\n        `platformBuilds/${c.runtime.appId}_${platform}`,\n        '--entry-file',\n        `${c.buildConfig.platforms[platform].entryFile}.js`,\n        '--bundle-output',\n        `${getAppFolder(c, platform)}/main.jsbundle`\n    ];\n\n    if (c.program.info) {\n        args.push('--verbose');\n    }\n\n    return executeAsync(c, `node ${doResolve(\n        'react-native'\n    )}/local-cli/cli.js ${args.join(' ')} --config=configs/metro.config.${c.platform}.js`);\n};\n\nexport const getAppFolderName = (c, platform) => {\n    const projectFolder = getConfigProp(c, platform, 'projectFolder');\n    if (projectFolder) {\n        return projectFolder;\n    }\n    return platform === IOS ? 'RNVApp' : 'RNVAppTVOS';\n};\n\n// Resolve or reject will not be called so this will keep running\nconst runAppleLog = c => new Promise(() => {\n    logTask('runAppleLog');\n    const filter = c.program.filter || 'RNV';\n    const child = child_process.execFile(\n        'xcrun',\n        [\n            'simctl',\n            'spawn',\n            'booted',\n            'log',\n            'stream',\n            '--predicate',\n            `eventMessage contains \"${filter}\"`\n        ],\n        { stdio: 'inherit', customFds: [0, 1, 2] }\n    );\n        // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString();\n        if (d.toLowerCase().includes('error')) {\n            logRaw(chalk.red(d));\n        } else if (d.toLowerCase().includes('success')) {\n            logRaw(chalk.green(d));\n        } else {\n            logRaw(d);\n        }\n    });\n});\n\nconst configureXcodeProject = async (c, platform, ip, port) => {\n    logTask(`configureXcodeProject:${platform}`);\n    const { device } = c.program;\n    const bundlerIp = device ? getIP() : 'localhost';\n    const appFolder = getAppFolder(c, platform);\n    const appFolderName = getAppFolderName(c, platform);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    // INJECTORS\n    c.pluginConfigiOS = {\n        podfileInject: '',\n        staticFrameworks: [],\n        staticPodDefinition: '',\n        exportOptions: '',\n        embeddedFonts: [],\n        embeddedFontSources: [],\n        ignoreProjectFonts: [],\n        pluginAppDelegateImports: '',\n        pluginAppDelegateMethods: '',\n        appDelegateMethods: {\n            application: {\n                didFinishLaunchingWithOptions: [],\n                applicationDidBecomeActive: [],\n                open: [],\n                supportedInterfaceOrientationsFor: [],\n                didReceiveRemoteNotification: [],\n                didFailToRegisterForRemoteNotificationsWithError: [],\n                didReceive: [],\n                didRegister: [],\n                didRegisterForRemoteNotificationsWithDeviceToken: []\n            },\n            userNotificationCenter: {\n                willPresent: []\n            }\n        },\n        podfileSources: []\n    };\n\n    // FONTS\n    // parsePlugins(c, platform, (plugin, pluginPlat) => {\n    //     // const ignoreProjectFonts = getFlavouredProp(\n    //     //     c,\n    //     //     pluginPlat,\n    //     //     'ignoreProjectFonts'\n    //     // );\n    //\n    //     // TODO: enable this once mmoved to modular_headers Podfile\n    //     // if (ignoreProjectFonts) {\n    //     //     ignoreProjectFonts.forEach((v) => {\n    //     //         if (!c.pluginConfigiOS.ignoreProjectFonts.includes(v)) {\n    //     //             logDebug(`Igonoring font: ${v}`);\n    //     //             c.pluginConfigiOS.ignoreProjectFonts.push(v);\n    //     //         }\n    //     //     });\n    //     // }\n    // });\n    const embeddedFontSourcesCheck = [];\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const includedFonts = getConfigProp(c, c.platform, 'includedFonts');\n            if (\n                includedFonts\n                && (includedFonts.includes('*') || includedFonts.includes(key))\n            ) {\n                const fontSource = path.join(dir, font);\n                if (fs.existsSync(fontSource)) {\n                    const fontFolder = path.join(appFolder, 'fonts');\n                    mkdirSync(fontFolder);\n                    const fontDest = path.join(fontFolder, font);\n                    copyFileSync(fontSource, fontDest);\n\n                    if (\n                        !c.pluginConfigiOS.ignoreProjectFonts.includes(font)\n                        && !embeddedFontSourcesCheck.includes(font)\n                    ) {\n                        c.pluginConfigiOS.embeddedFontSources.push(fontSource);\n                        embeddedFontSourcesCheck.push(font);\n                    }\n\n                    if (!c.pluginConfigiOS.embeddedFonts.includes(font)) {\n                        c.pluginConfigiOS.embeddedFonts.push(font);\n                    }\n                } else {\n                    logWarning(\n                        `Font ${chalk.white(\n                            fontSource\n                        )} doesn't exist! Skipping.`\n                    );\n                }\n            }\n        }\n    });\n\n    // CHECK TEAM ID IF DEVICE\n    const tId = getConfigProp(c, platform, 'teamID');\n    if (device && (!tId || tId === '')) {\n        logError(\n            `Looks like you're missing teamID in your ${chalk.white(\n                c.paths.appConfig.config\n            )} => .platforms.${platform}.teamID . you will not be able to build ${platform} app for device!`\n        );\n    }\n\n    await copyAssetsFolder(c, platform);\n    await copyAppleAssets(c, platform, appFolderName);\n    await parseAppDelegate(\n        c,\n        platform,\n        appFolder,\n        appFolderName,\n        bundleAssets,\n        bundlerIp,\n        port\n    );\n    await parseExportOptionsPlist(c, platform);\n    await parseXcscheme(c, platform);\n    await parsePodFile(c, platform);\n    await parseEntitlementsPlist(c, platform);\n    await parseInfoPlist(c, platform);\n    await copyBuildsFolder(c, platform);\n    await runPod(c, platform);\n    await parseXcodeProject(c, platform);\n    return true;\n};\n\nexport {\n    runPod,\n    copyAppleAssets,\n    configureXcodeProject,\n    exportXcodeProject,\n    archiveXcodeProject,\n    packageBundleForXcode,\n    runAppleLog\n};\n"],"file":"index.js"}