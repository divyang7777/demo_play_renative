{"version":3,"sources":["../../../src/platformTools/android/index.js"],"names":["_getEntryOutputName","c","entryFile","buildConfig","platforms","platform","outputFile","ANDROID_WEAR","packageAndroid","Promise","resolve","reject","bundleAssets","appFolder","reactNative","isSystemWin","path","normalize","process","cwd","then","catch","e","runAndroid","defaultTarget","target","program","outputAab","_runGradleApp","net","isIP","device","undefined","devicesAndEmulators","activeDevices","filter","d","isActive","inactiveDevices","askWhereToRun","length","devicesString","choices","inquirer","prompt","name","type","message","response","chosenEmulator","devices","dev","find","foundDevice","udid","includes","dv","_checkSigningCerts","signingConfig","isRelease","privateConfig","files","workspace","appConfig","configPrivate","command","chalk","white","paths","confirm","confirmCopy","confirmNewKeystore","platCandidates","ANDROID_TV","ANDROID","forEach","v","platCandidate","resultCopy","dir","result","storeFile","storePassword","keyAlias","keyPassword","keystorePath","keytoolCmd","env","shell","stdio","silent","configureProject","bundleId","outputFolder","arch","stacktrace","info","cd","interactive","aabPath","join","apkPath","fs","existsSync","CLI_ANDROID_ADB","Error","buildAndroid","toLowerCase","configureAndroidProperties","addNDK","sdks","ANDROID_NDK","ndkString","sdkDir","ANDROID_SDK","replace","configureGradleProject","gradlew","chmodSync","pluginConfigAndroid","pluginIncludes","pluginPaths","pluginImports","pluginPackages","pluginActivityImports","pluginActivityMethods","pluginApplicationImports","pluginApplicationMethods","pluginApplicationCreateMethods","pluginApplicationDebugServer","applyPlugin","defaultConfig","pluginActivityCreateMethods","pluginActivityResultMethods","pluginSplashActivityImports","manifestApplication","buildGradleAllProjectsRepositories","buildGradleBuildScriptRepositories","buildGradleBuildScriptDependencies","buildGradleBuildScriptDexOptions","appBuildGradleSigningConfigs","appBuildGradleImplementations","resourceStrings","appBuildGradleAfterEvaluate","plugin","pluginPlat","key","package","substring","font","split","includedFonts","common","fontSource","fontFolder","fontDest","runAndroidLog","child","execa","cli","stdout","on","data","toString","red","yellow","res","err"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix circular\nimport path from 'path';\nimport fs from 'fs';\nimport net from 'net';\nimport chalk from 'chalk';\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\nimport execa from 'execa';\n\nimport { executeAsync, execCLI } from '../../systemTools/exec';\nimport {\n    getAppFolder,\n    getConfigProp,\n    getAppId\n} from '../../common';\nimport { isPlatformActive, createPlatformBuild } from '..';\nimport { isSystemWin } from '../../utils';\nimport { inquirerPrompt } from '../../systemTools/prompt';\nimport {\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo,\n    logSuccess,\n    logRaw\n} from '../../systemTools/logger';\nimport {\n    copyFileSync,\n    mkdirSync,\n    getRealPath,\n    updateObjectSync,\n    fsWriteFileSync\n} from '../../systemTools/fileutils';\nimport {\n    copyAssetsFolder,\n    copyBuildsFolder,\n    parseFonts\n} from '../../projectTools/projectParser';\nimport {\n    ANDROID_WEAR,\n    ANDROID,\n    ANDROID_TV,\n    CLI_ANDROID_ADB\n} from '../../constants';\nimport { parsePlugins } from '../../pluginTools';\nimport {\n    parseAndroidManifestSync,\n    injectPluginManifestSync\n} from './manifestParser';\nimport {\n    parseMainActivitySync,\n    parseSplashActivitySync,\n    parseMainApplicationSync,\n    injectPluginKotlinSync\n} from './kotlinParser';\nimport {\n    parseAppBuildGradleSync,\n    parseBuildGradleSync,\n    parseSettingsGradleSync,\n    parseGradlePropertiesSync,\n    injectPluginGradleSync\n} from './gradleParser';\nimport {\n    parseValuesStringsSync,\n    injectPluginXmlValuesSync,\n    parseValuesColorsSync\n} from './xmlValuesParser';\nimport {\n    resetAdb,\n    getAndroidTargets,\n    composeDevicesString,\n    launchAndroidSimulator,\n    checkForActiveEmulator,\n    askForNewEmulator,\n    connectToWifiDevice\n} from './deviceManager';\n\nconst _getEntryOutputName = (c) => {\n    // CRAPPY BUT Android Wear does not support webview required for connecting to packager. this is hack to prevent RN connectiing to running bundler\n    const { entryFile } = c.buildConfig.platforms[c.platform];\n    // TODO Android PROD Crashes if not using this hardcoded one\n    let outputFile;\n    if (c.platform === ANDROID_WEAR) {\n        outputFile = entryFile;\n    } else {\n        outputFile = 'index.android';\n    }\n    return outputFile;\n};\n\nexport const packageAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`packageAndroid:${platform}`);\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets', false) === true;\n\n    if (!bundleAssets && platform !== ANDROID_WEAR) {\n        resolve();\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    const appFolder = getAppFolder(c, platform);\n    let reactNative = 'react-native';\n\n    if (isSystemWin) {\n        reactNative = path.normalize(\n            `${process.cwd()}/node_modules/.bin/react-native.cmd`\n        );\n    }\n\n    logInfo('ANDROID PACKAGE STARTING...');\n    executeAsync(c, `${reactNative} bundle --platform android --dev false --assets-dest ${\n        appFolder\n    }/app/src/main/res --entry-file ${\n      c.buildConfig.platforms[c.platform]?.entryFile\n    }.js --bundle-output ${appFolder}/app/src/main/assets/${\n        outputFile\n    }.bundle --config=configs/metro.config.${c.platform}.js`)\n        .then(() => {\n            logInfo('ANDROID PACKAGE FINISHED');\n            return resolve();\n        })\n        .catch((e) => {\n            logInfo('ANDROID PACKAGE FAILED');\n            return reject(e);\n        });\n});\n\nexport const runAndroid = async (c, platform, defaultTarget) => {\n    const { target } = c.program;\n    logTask(`runAndroid:${platform}:${target}:${defaultTarget}`);\n\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    // shortcircuit devices logic since aabs can't be installed on a device\n    if (outputAab) return _runGradleApp(c, platform, {});\n\n    await resetAdb(c);\n\n    if (target && net.isIP(target)) {\n        await connectToWifiDevice(c, target);\n    }\n\n    let devicesAndEmulators;\n    try {\n        devicesAndEmulators = await getAndroidTargets(\n            c,\n            false,\n            false,\n            c.program.device !== undefined\n        );\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    const activeDevices = devicesAndEmulators.filter(d => d.isActive);\n    const inactiveDevices = devicesAndEmulators.filter(d => !d.isActive);\n\n    const askWhereToRun = async () => {\n        if (activeDevices.length === 0 && inactiveDevices.length > 0) {\n            // No device active, but there are emulators created\n            const devicesString = composeDevicesString(inactiveDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenEmulator',\n                    type: 'list',\n                    message: 'What emulator would you like to start?',\n                    choices\n                }\n            ]);\n            if (response.chosenEmulator) {\n                await launchAndroidSimulator(\n                    c,\n                    platform,\n                    response.chosenEmulator,\n                    true\n                );\n                const devices = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, devices);\n            }\n        } else if (activeDevices.length > 1) {\n            const devicesString = composeDevicesString(activeDevices, true);\n            const choices = devicesString;\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenEmulator',\n                    type: 'list',\n                    message: 'Where would you like to run your app?',\n                    choices\n                }\n            ]);\n            if (response.chosenEmulator) {\n                const dev = activeDevices.find(\n                    d => d.name === response.chosenEmulator\n                );\n                await _runGradleApp(c, platform, dev);\n            }\n        } else {\n            await askForNewEmulator(c, platform);\n            const devices = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, devices);\n        }\n    };\n\n    if (target) {\n        // a target is provided\n        logDebug('Target provided', target);\n        const foundDevice = devicesAndEmulators.find(\n            d => d.udid.includes(target) || d.name.includes(target)\n        );\n        if (foundDevice) {\n            if (foundDevice.isActive) {\n                await _runGradleApp(c, platform, foundDevice);\n            } else {\n                await launchAndroidSimulator(c, platform, foundDevice, true);\n                const device = await checkForActiveEmulator(c, platform);\n                await _runGradleApp(c, platform, device);\n            }\n        } else {\n            await askWhereToRun();\n        }\n    } else if (activeDevices.length === 1) {\n        // Only one that is active, running on that one\n        const dv = activeDevices[0];\n        logInfo(`Found device ${dv.name}:${dv.udid}!`);\n        await _runGradleApp(c, platform, dv);\n    } else if (defaultTarget) {\n        // neither a target nor an active device is found, revert to default target if available\n        logDebug('Default target used', defaultTarget);\n        const foundDevice = devicesAndEmulators.find(\n            d => d.udid.includes(defaultTarget) || d.name.includes(defaultTarget)\n        );\n        if (!foundDevice) {\n            logDebug('Target not provided, asking where to run');\n            await askWhereToRun();\n        } else {\n            await launchAndroidSimulator(c, platform, foundDevice, true);\n            const device = await checkForActiveEmulator(c, platform);\n            await _runGradleApp(c, platform, device);\n        }\n    } else {\n        // we don't know what to do, ask the user\n        logDebug('Target not provided, asking where to run');\n        await askWhereToRun();\n    }\n};\n\nconst _checkSigningCerts = async (c) => {\n    logTask('_checkSigningCerts');\n    const signingConfig = getConfigProp(\n        c,\n        c.platform,\n        'signingConfig',\n        'Debug'\n    );\n    const isRelease = signingConfig === 'Release';\n    const privateConfig = c.files.workspace.appConfig.configPrivate?.[c.platform];\n\n    if (isRelease && !privateConfig) {\n        logWarning(\n            `You're attempting to ${\n                c.command\n            } app in release mode but you have't configured your ${chalk.white(\n                c.paths.workspace.appConfig.configPrivate\n            )} for ${chalk.white(c.platform)} platform yet.`\n        );\n\n        const { confirm } = await inquirer.prompt({\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Do you want to configure it now?'\n        });\n\n        if (confirm) {\n            let confirmCopy = false;\n            let platCandidate;\n            const { confirmNewKeystore } = await inquirerPrompt({\n                type: 'confirm',\n                name: 'confirmNewKeystore',\n                message: 'Do you want to generate new keystore as well?'\n            });\n\n            if (c.files.workspace.appConfig.configPrivate) {\n                const platCandidates = [ANDROID_WEAR, ANDROID_TV, ANDROID];\n\n                platCandidates.forEach((v) => {\n                    if (c.files.workspace.appConfig.configPrivate[v]) {\n                        platCandidate = v;\n                    }\n                });\n                if (platCandidate) {\n                    const resultCopy = await inquirerPrompt({\n                        type: 'confirm',\n                        name: 'confirmCopy',\n                        message: `Found existing keystore configuration for ${platCandidate}. do you want to reuse it?`\n                    });\n                    confirmCopy = resultCopy?.confirmCopy;\n                }\n            }\n\n            if (confirmCopy) {\n                c.files.workspace.appConfig\n                    .configPrivate[c.platform] = c.files.workspace\n                        .appConfig.configPrivate[platCandidate];\n            } else {\n                let storeFile;\n\n                if (!confirmNewKeystore) {\n                    const result = await inquirerPrompt({\n                        type: 'input',\n                        name: 'storeFile',\n                        message: `Paste asolute or relative path to ${chalk.white(\n                            c.paths.workspace.appConfig.dir\n                        )} of your existing ${chalk.white(\n                            'release.keystore'\n                        )} file`\n                    });\n                    storeFile = result?.storeFile;\n                }\n\n                const {\n                    storePassword,\n                    keyAlias,\n                    keyPassword\n                } = await inquirer.prompt([\n                    {\n                        type: 'password',\n                        name: 'storePassword',\n                        message: 'storePassword'\n                    },\n                    {\n                        type: 'input',\n                        name: 'keyAlias',\n                        message: 'keyAlias'\n                    },\n                    {\n                        type: 'password',\n                        name: 'keyPassword',\n                        message: 'keyPassword'\n                    }\n                ]);\n\n                if (confirmNewKeystore) {\n                    const keystorePath = `${c.paths.workspace.appConfig.dir}/release.keystore`;\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    const keytoolCmd = `keytool -genkey -v -keystore ${\n                        keystorePath\n                    } -alias ${keyAlias} -keypass ${keyPassword} -storepass ${\n                        storePassword\n                    } -keyalg RSA -keysize 2048 -validity 10000`;\n                    await executeAsync(c, keytoolCmd, {\n                        env: process.env,\n                        shell: true,\n                        stdio: 'inherit',\n                        silent: true\n                    });\n                    storeFile = './release.keystore';\n                }\n\n                if (c.paths.workspace.appConfig.dir) {\n                    mkdirSync(c.paths.workspace.appConfig.dir);\n                    c.files.workspace.appConfig.configPrivate = {};\n                    c.files.workspace.appConfig.configPrivate[c.platform] = {\n                        storeFile,\n                        storePassword,\n                        keyAlias,\n                        keyPassword\n                    };\n                }\n            }\n\n            updateObjectSync(\n                c.paths.workspace.appConfig.configPrivate,\n                c.files.workspace.appConfig.configPrivate\n            );\n            logSuccess(\n                `Successfully updated private config file at ${chalk.white(\n                    c.paths.workspace.appConfig.dir\n                )}.`\n            );\n            await configureProject(c, c.platform);\n        } else {\n            return Promise.reject(\"You selected no. Can't proceed\");\n        }\n    }\n};\n\nconst _runGradleApp = async (c, platform, device) => {\n    logTask(`_runGradleApp:${platform}`);\n\n    const signingConfig = getConfigProp(c, platform, 'signingConfig', 'Debug');\n    const appFolder = getAppFolder(c, platform);\n    const bundleId = getAppId(c, platform);\n    const outputAab = getConfigProp(c, platform, 'aab', false);\n    const outputFolder = signingConfig === 'Debug' ? 'debug' : 'release';\n    const { arch, name } = device;\n    const stacktrace = c.program.info ? ' --debug' : '';\n\n    shell.cd(`${appFolder}`);\n\n    await _checkSigningCerts(c);\n    await executeAsync(\n        c,\n        `${isSystemWin ? 'gradlew.bat' : './gradlew'} ${\n            outputAab ? 'bundle' : 'assemble'\n        }${signingConfig}${stacktrace} -x bundleReleaseJsAndAssets`,\n        { interactive: true }\n    );\n    if (outputAab) {\n        const aabPath = path.join(\n            appFolder,\n            `app/build/outputs/bundle/${outputFolder}/app.aab`\n        );\n        logInfo(`App built. Path ${aabPath}`);\n        return true;\n    }\n    let apkPath = path.join(\n        appFolder,\n        `app/build/outputs/apk/${outputFolder}/app-${outputFolder}.apk`\n    );\n    if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(\n            appFolder,\n            `app/build/outputs/apk/${outputFolder}/app-${outputFolder}-unsigned.apk`\n        );\n    }\n    if (!fs.existsSync(apkPath)) {\n        apkPath = path.join(\n            appFolder,\n            `app/build/outputs/apk/${outputFolder}/app-${arch}-${outputFolder}.apk`\n        );\n    }\n    logInfo(`Installing ${apkPath} on ${name}`);\n    try {\n        await execCLI(\n            c,\n            CLI_ANDROID_ADB,\n            `-s ${device.udid} install -r -d -f ${apkPath}`\n        );\n    } catch (e) {\n        if (\n            e?.includes('INSTALL_FAILED')\n            || e?.message?.includes('INSTALL_FAILED')\n        ) {\n            const { confirm } = await inquirerPrompt({\n                type: 'confirm',\n                message:\n                    \"It seems you already have the app installed but RNV can't update it. Uninstall that one and try again?\"\n            });\n\n            if (!confirm) throw new Error('User canceled');\n            await execCLI(\n                c,\n                CLI_ANDROID_ADB,\n                `-s ${device.udid} uninstall ${bundleId}`\n            );\n            await execCLI(\n                c,\n                CLI_ANDROID_ADB,\n                `-s ${device.udid} install -r -d -f ${apkPath}`\n            );\n        } else {\n            throw new Error(e);\n        }\n    }\n\n    if (!outputAab) {\n        await execCLI(\n            c,\n            CLI_ANDROID_ADB,\n            `-s ${device.udid} shell am start -n ${bundleId}/.MainActivity`\n        );\n    }\n};\n\nexport const buildAndroid = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`buildAndroid:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n    const signingConfig = getConfigProp(\n        c,\n        platform,\n        'signingConfig',\n        'Debug'\n    );\n\n    shell.cd(`${appFolder}`);\n\n    _checkSigningCerts(c)\n        .then(() => executeAsync(\n            c,\n            `${\n                isSystemWin ? 'gradlew.bat' : './gradlew'\n            } assemble${signingConfig} -x bundleReleaseJsAndAssets`\n        ))\n        .then(() => {\n            logSuccess(\n                `Your APK is located in ${chalk.white(\n                    path.join(\n                        appFolder,\n                        `app/build/outputs/apk/${signingConfig.toLowerCase()}`\n                    )\n                )} .`\n            );\n            resolve();\n        })\n        .catch(e => reject(e));\n});\n\nexport const configureAndroidProperties = (c, platform) => new Promise((resolve) => {\n    logTask(`configureAndroidProperties:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const addNDK = c.buildConfig?.sdks?.ANDROID_NDK\n            && !c.buildConfig.sdks.ANDROID_NDK.includes('<USER>');\n    const ndkString = `ndk.dir=${getRealPath(\n        c,\n        c.buildConfig?.sdks?.ANDROID_NDK\n    )}`;\n    let sdkDir = getRealPath(c, c.buildConfig?.sdks?.ANDROID_SDK);\n\n    if (isSystemWin) {\n        sdkDir = sdkDir.replace(/\\\\/g, '/');\n    }\n\n    fsWriteFileSync(\n        path.join(appFolder, 'local.properties'),\n        `#Generated by ReNative (https://renative.org)\n${addNDK ? ndkString : ''}\nsdk.dir=${sdkDir}`\n    );\n\n    resolve();\n});\n\nexport const configureGradleProject = async (c) => {\n    const { platform } = c;\n    logTask(`configureGradleProject:${platform}`);\n\n    if (!isPlatformActive(c, platform)) return;\n\n    await copyAssetsFolder(c, platform);\n    await configureAndroidProperties(c, platform);\n    await configureProject(c, platform);\n    return copyBuildsFolder(c, platform);\n};\n\nexport const configureProject = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`configureProject:${platform}`);\n\n    const appFolder = getAppFolder(c, platform);\n\n    const gradlew = path.join(appFolder, 'gradlew');\n\n    if (!fs.existsSync(gradlew)) {\n        logWarning(\n            `Looks like your ${chalk.white(\n                platform\n            )} platformBuild is misconfigured!. let's repair it.`\n        );\n        createPlatformBuild(c, platform)\n            .then(() => configureGradleProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const outputFile = _getEntryOutputName(c);\n\n    mkdirSync(path.join(appFolder, 'app/src/main/assets'));\n    fsWriteFileSync(\n        path.join(appFolder, `app/src/main/assets/${outputFile}.bundle`),\n        '{}'\n    );\n    fs.chmodSync(gradlew, '755');\n\n    // INJECTORS\n    c.pluginConfigAndroid = {\n        pluginIncludes: \"include ':app'\",\n        pluginPaths: '',\n        pluginImports: '',\n        pluginPackages: 'MainReactPackage(),\\n',\n        pluginActivityImports: '',\n        pluginActivityMethods: '',\n        pluginApplicationImports: '',\n        pluginApplicationMethods: '',\n        pluginApplicationCreateMethods: '',\n        pluginApplicationDebugServer: '',\n        applyPlugin: '',\n        defaultConfig: '',\n        pluginActivityCreateMethods: '',\n        pluginActivityResultMethods: '',\n        pluginSplashActivityImports: '',\n        manifestApplication: '',\n        buildGradleAllProjectsRepositories: '',\n        buildGradleBuildScriptRepositories: '',\n        buildGradleBuildScriptDependencies: '',\n        buildGradleBuildScriptDexOptions: '',\n        appBuildGradleSigningConfigs: '',\n        appBuildGradleImplementations: '',\n        resourceStrings: [],\n        appBuildGradleAfterEvaluate: ''\n    };\n\n    // PLUGINS\n    parsePlugins(c, platform, (plugin, pluginPlat, key) => {\n        injectPluginGradleSync(\n            c,\n            pluginPlat,\n            key,\n            pluginPlat.package,\n            plugin\n        );\n        injectPluginKotlinSync(\n            c,\n            pluginPlat,\n            key,\n            pluginPlat.package,\n            plugin\n        );\n        injectPluginManifestSync(\n            c,\n            pluginPlat,\n            key,\n            pluginPlat.package,\n            plugin\n        );\n        injectPluginXmlValuesSync(\n            c,\n            pluginPlat,\n            key,\n            pluginPlat.package,\n            plugin\n        );\n    });\n\n    c.pluginConfigAndroid.pluginPackages = c.pluginConfigAndroid.pluginPackages.substring(\n        0,\n        c.pluginConfigAndroid.pluginPackages.length - 2\n    );\n\n    // FONTS\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf')) {\n            const key = font.split('.')[0];\n            const { includedFonts } = c.buildConfig.common;\n            if (includedFonts) {\n                if (\n                    includedFonts.includes('*')\n                        || includedFonts.includes(key)\n                ) {\n                    if (font) {\n                        const fontSource = path.join(dir, font);\n                        if (fs.existsSync(fontSource)) {\n                            const fontFolder = path.join(\n                                appFolder,\n                                'app/src/main/assets/fonts'\n                            );\n                            mkdirSync(fontFolder);\n                            const fontDest = path.join(fontFolder, font);\n                            copyFileSync(fontSource, fontDest);\n                        } else {\n                            logWarning(\n                                `Font ${chalk.white(\n                                    fontSource\n                                )} doesn't exist! Skipping.`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    parseSettingsGradleSync(c, platform);\n    parseAppBuildGradleSync(c, platform);\n    parseBuildGradleSync(c, platform);\n    parseMainActivitySync(c, platform);\n    parseMainApplicationSync(c, platform);\n    parseSplashActivitySync(c, platform);\n    parseValuesStringsSync(c, platform);\n    parseValuesColorsSync(c, platform);\n    parseAndroidManifestSync(c, platform);\n    parseGradlePropertiesSync(c, platform);\n\n    resolve();\n});\n\n// Resolve or reject will not be called so this will keep running\nexport const runAndroidLog = async (c) => {\n    logTask('runAndroidLog');\n    const filter = c.program.filter || '';\n    const child = execa.command(`${c.cli[CLI_ANDROID_ADB]} logcat`);\n    // use event hooks to provide a callback to execute when data are available:\n    child.stdout.on('data', (data) => {\n        const d = data.toString().split('\\n');\n        d.forEach((v) => {\n            if (v.includes(' E ') && v.includes(filter)) {\n                logRaw(chalk.red(v));\n            } else if (v.includes(' W ') && v.includes(filter)) {\n                logRaw(chalk.yellow(v));\n            } else if (v.includes(filter)) {\n                logRaw(v);\n            }\n        });\n    });\n    return child\n        .then(res => res.stdout)\n        .catch(err => Promise.reject(`Error: ${err}`));\n};\n"],"file":"index.js"}