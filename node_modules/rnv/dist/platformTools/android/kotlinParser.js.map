{"version":3,"sources":["../../../src/platformTools/android/kotlinParser.js"],"names":["JS_BUNDLE_DEFAULTS","android","androidtv","androidwear","JS_BUNDLE_DEFAULTS_BUNDLED","parseMainApplicationSync","c","platform","appFolder","applicationPath","bundleAssets","bundleFile","bundlerIp","pluginConfigAndroid","pluginApplicationDebugServer","runtime","port","path","join","pattern","override","pluginApplicationImports","pluginPackages","pluginApplicationMethods","pluginApplicationCreateMethods","parseMainActivitySync","activityPath","pluginActivityImports","pluginActivityMethods","pluginActivityCreateMethods","pluginActivityResultMethods","parseSplashActivitySync","splashPath","enableAndroidX","pluginSplashActivityImports","injectPluginKotlinSync","plugin","key","pkg","activityImports","Array","forEach","activityImport","indexOf","activityMethods","mainActivity","createMethods","resultMethods","imports","v","methods","_injectPackage","MainApplication","packages","mainApplication","mainApplicationMethods","paths","project","config","packageParams","className","_extractClassName","split","pop"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport {\n    getAppFolder,\n    getAppId,\n    getBuildFilePath,\n    getEntryFile,\n    getGetJsBundleFile,\n    getConfigProp,\n    getIP\n} from '../../common';\nimport { logWarning } from '../../systemTools/logger';\nimport { writeCleanFile } from '../../systemTools/fileutils';\n// import { doResolve } from '../../resolve';\n\nconst JS_BUNDLE_DEFAULTS = {\n    android: '\"super.getJSBundleFile()\"',\n    androidtv: '\"super.getJSBundleFile()\"',\n    // CRAPPY BUT Android Wear does not support webview required for connecting to packager\n    androidwear: '\"assets://index.androidwear.bundle\"'\n};\n\nconst JS_BUNDLE_DEFAULTS_BUNDLED = {\n    android: '\"assets://index.android.bundle\"',\n    androidtv: '\"assets://index.android.bundle\"',\n    androidwear: '\"assets://index.android.bundle\"'\n};\n\nexport const parseMainApplicationSync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n    const applicationPath = 'app/src/main/java/rnv/MainApplication.kt';\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets');\n    const bundleFile = getGetJsBundleFile(c, platform) || bundleAssets\n        ? JS_BUNDLE_DEFAULTS_BUNDLED[platform]\n        : JS_BUNDLE_DEFAULTS[platform];\n    // const host = getConfigProp(c, platform, 'host', '10.0.2.2');\n    const bundlerIp = getIP() || '10.0.2.2';\n    if (!bundleAssets) {\n        c.pluginConfigAndroid.pluginApplicationDebugServer\n            += '    var mPreferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\\n';\n        c.pluginConfigAndroid.pluginApplicationDebugServer\n        += `    mPreferences?.edit().putString(\"debug_http_host\", \"${bundlerIp}:${c.runtime.port}\").apply()\\n`;\n    }\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, applicationPath),\n        path.join(appFolder, applicationPath),\n        [\n            { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform) },\n            { pattern: '{{ENTRY_FILE}}', override: getEntryFile(c, platform) },\n            { pattern: '{{GET_JS_BUNDLE_FILE}}', override: bundleFile },\n            {\n                pattern: '{{PLUGIN_IMPORTS}}',\n                override: c.pluginConfigAndroid.pluginApplicationImports\n            },\n            {\n                pattern: '{{PLUGIN_PACKAGES}}',\n                override: c.pluginConfigAndroid.pluginPackages\n            },\n            {\n                pattern: '{{PLUGIN_METHODS}}',\n                override: c.pluginConfigAndroid.pluginApplicationMethods\n            },\n            {\n                pattern: '{{PLUGIN_ON_CREATE}}',\n                override: c.pluginConfigAndroid.pluginApplicationCreateMethods\n            },\n            {\n                pattern: '{{PLUGIN_DEBUG_SERVER}}',\n                override: c.pluginConfigAndroid.pluginApplicationDebugServer\n            }\n        ], null, c\n    );\n};\n\nexport const parseMainActivitySync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n    const activityPath = 'app/src/main/java/rnv/MainActivity.kt';\n    writeCleanFile(\n        getBuildFilePath(c, platform, activityPath),\n        path.join(appFolder, activityPath),\n        [\n            { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform) },\n            {\n                pattern: '{{PLUGIN_ACTIVITY_IMPORTS}}',\n                override: c.pluginConfigAndroid.pluginActivityImports\n            },\n            {\n                pattern: '{{PLUGIN_ACTIVITY_METHODS}}',\n                override: c.pluginConfigAndroid.pluginActivityMethods\n            },\n            {\n                pattern: '{{PLUGIN_ON_CREATE}}',\n                override: c.pluginConfigAndroid.pluginActivityCreateMethods\n            },\n            {\n                pattern: '{{PLUGIN_ON_ACTIVITY_RESULT}}',\n                override: c.pluginConfigAndroid.pluginActivityResultMethods\n            }\n        ], null, c\n    );\n};\n\nexport const parseSplashActivitySync = (c, platform) => {\n    const appFolder = getAppFolder(c, platform);\n    const splashPath = 'app/src/main/java/rnv/SplashActivity.kt';\n\n    // TODO This is temporary ANDROIDX support. whole kotlin parser will be refactored in the near future\n    const enableAndroidX = getConfigProp(c, platform, 'enableAndroidX', true);\n    if (enableAndroidX === true) {\n        c.pluginConfigAndroid.pluginSplashActivityImports\n            += 'import androidx.appcompat.app.AppCompatActivity\\n';\n    } else {\n        c.pluginConfigAndroid.pluginSplashActivityImports\n            += 'import android.support.v7.app.AppCompatActivity\\n';\n    }\n\n    writeCleanFile(\n        getBuildFilePath(c, platform, splashPath),\n        path.join(appFolder, splashPath),\n        [\n            { pattern: '{{APPLICATION_ID}}', override: getAppId(c, platform) },\n            {\n                pattern: '{{PLUGIN_SPLASH_ACTIVITY_IMPORTS}}',\n                override: c.pluginConfigAndroid.pluginSplashActivityImports\n            }\n        ], null, c\n    );\n};\n\nexport const injectPluginKotlinSync = (c, plugin, key, pkg) => {\n    if (plugin.activityImports instanceof Array) {\n        plugin.activityImports.forEach((activityImport) => {\n            // Avoid duplicate imports\n            if (\n                c.pluginConfigAndroid.pluginActivityImports.indexOf(\n                    activityImport\n                ) === -1\n            ) {\n                c.pluginConfigAndroid.pluginActivityImports += `import ${activityImport}\\n`;\n            }\n        });\n    }\n\n    if (plugin.activityMethods instanceof Array) {\n        c.pluginConfigAndroid.pluginActivityMethods += '\\n';\n        c.pluginConfigAndroid.pluginActivityMethods += `${plugin.activityMethods.join(\n            '\\n    '\n        )}`;\n    }\n\n    const { mainActivity } = plugin;\n    if (mainActivity) {\n        if (mainActivity.createMethods instanceof Array) {\n            c.pluginConfigAndroid.pluginActivityCreateMethods += '\\n';\n            c.pluginConfigAndroid.pluginActivityCreateMethods += `${mainActivity.createMethods.join(\n                '\\n    '\n            )}`;\n        }\n\n        if (mainActivity.resultMethods instanceof Array) {\n            c.pluginConfigAndroid.pluginActivityResultMethods += '\\n';\n            c.pluginConfigAndroid.pluginActivityResultMethods += `${mainActivity.resultMethods.join(\n                '\\n    '\n            )}`;\n        }\n\n        if (mainActivity.imports instanceof Array) {\n            mainActivity.imports.forEach((v) => {\n                c.pluginConfigAndroid.pluginActivityImports += `import ${v}\\n`;\n            });\n        }\n\n        if (mainActivity.methods instanceof Array) {\n            c.pluginConfigAndroid.pluginActivityMethods += '\\n';\n            c.pluginConfigAndroid.pluginActivityMethods += `${mainActivity.methods.join(\n                '\\n    '\n            )}`;\n        }\n    }\n\n    if (plugin.imports) {\n        plugin.imports.forEach((v) => {\n            c.pluginConfigAndroid.pluginApplicationImports += `import ${v}\\n`;\n        });\n    }\n\n    _injectPackage(c, plugin, pkg);\n\n    if (plugin.MainApplication) {\n        if (plugin.MainApplication.packages) {\n            plugin.MainApplication.packages.forEach((v) => {\n                _injectPackage(c, plugin, v);\n            });\n        }\n    }\n\n    const { mainApplication } = plugin;\n    if (mainApplication) {\n        if (mainApplication.createMethods instanceof Array) {\n            c.pluginConfigAndroid.pluginApplicationCreateMethods += '\\n';\n            c.pluginConfigAndroid.pluginApplicationCreateMethods += `${mainApplication.createMethods.join(\n                '\\n    '\n            )}`;\n        }\n\n        if (mainApplication.imports instanceof Array) {\n            mainApplication.imports.forEach((v) => {\n                c.pluginConfigAndroid.pluginApplicationImports += `import ${v}\\n`;\n            });\n        }\n\n        if (mainApplication.methods instanceof Array) {\n            c.pluginConfigAndroid.pluginApplicationMethods += '\\n';\n            c.pluginConfigAndroid.pluginApplicationMethods += `${mainApplication.methods.join(\n                '\\n    '\n            )}`;\n        }\n    }\n\n    if (plugin.mainApplicationMethods) {\n        logWarning(\n            `Plugin ${key} in ${c.paths.project.config} is using DEPRECATED \"${\n                c.platform\n            }\": { MainApplicationMethods }. Use \"${\n                c.platform\n            }\": { \"mainApplication\": { \"methods\": []}} instead`\n        );\n        c.pluginConfigAndroid.pluginApplicationMethods += `\\n${plugin.mainApplicationMethods}\\n`;\n    }\n};\n\nconst _injectPackage = (c, plugin, pkg) => {\n    if (pkg) { c.pluginConfigAndroid.pluginApplicationImports += `import ${pkg}\\n`; }\n    let packageParams = '';\n    if (plugin.packageParams) {\n        packageParams = plugin.packageParams.join(',');\n    }\n\n    const className = _extractClassName(pkg);\n    if (className) { c.pluginConfigAndroid.pluginPackages += `${className}(${packageParams}),\\n`; }\n};\n\nconst _extractClassName = pkg => (pkg ? pkg.split('.').pop() : null);\n"],"file":"kotlinParser.js"}