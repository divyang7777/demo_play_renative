{"version":3,"sources":["../../../src/platformTools/android/manifestParser.js"],"names":["PROHIBITED_DUPLICATE_TAGS","SYSTEM_TAGS","_findChildNode","tag","name","node","includes","i","children","length","ch","_convertToXML","manifestObj","_parseNode","n","level","output","space","nodeKeysCount","Object","keys","forEach","v","isSingleLine","endLine","k","nextLevel","_mergeNodeParameters","nodeParamsExt","_mergeNodeChildren","nodeChildrenExt","nameExt","childNode","push","parseAndroidManifestSync","c","platform","baseManifestFilePath","path","join","paths","rnv","dir","baseManifestFile","appFolder","application","package","pluginConfigAndroid","buildConfig","platforms","pluginConfigAndroidSchemed","buildSchemes","runtime","scheme","applicationExt","applicationExt2","plugin","pluginPlat","androidManifest","prms","configPermissions","permissions","includedPermissions","excludedPermissions","platPerm","pc","key","includedFeatures","excludedFeatures","manifestXml","manifestFile","pattern","override","e","injectPluginManifestSync"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport {\n    getAppFolder,\n    getAppId,\n    getBuildFilePath,\n    getConfigProp,\n    getFlavouredProp\n} from '../../common';\nimport { logTask, logError, logWarning, logDebug } from '../../systemTools/logger';\nimport { readObjectSync, writeCleanFile } from '../../systemTools/fileutils';\nimport { parsePlugins } from '../../pluginTools';\n\nconst PROHIBITED_DUPLICATE_TAGS = ['intent-filter'];\nconst SYSTEM_TAGS = ['tag', 'children'];\n\nconst _findChildNode = (tag, name, node) => {\n    if (!node) {\n        logWarning('_findChildNode: Node is undefined');\n        return;\n    }\n    if (!name && !PROHIBITED_DUPLICATE_TAGS.includes(tag)) return null; // Can't determine reused child nodes without unique name identifier\n    for (let i = 0; i < node.children.length; i++) {\n        const ch = node.children[i];\n        if (ch.tag === tag) {\n            if (\n                ch['android:name'] === name\n                || PROHIBITED_DUPLICATE_TAGS.includes(tag)\n            ) { return ch; }\n        }\n    }\n    return null;\n};\n\nconst _convertToXML = manifestObj => _parseNode(manifestObj, 0);\n\nconst _parseNode = (n, level) => {\n    let output = '';\n    let space = '';\n    for (let i = 0; i < level; i++) {\n        space += '    ';\n    }\n\n    let nodeKeysCount = 0;\n    Object.keys(n).forEach((v) => {\n        if (!SYSTEM_TAGS.includes(v)) nodeKeysCount++;\n    });\n    const isSingleLine = nodeKeysCount < 2;\n\n    if (!n.tag) {\n        logWarning('Each node must have tag key!');\n        return;\n    }\n\n    if (n) {\n        const endLine = isSingleLine ? ' ' : '\\n';\n        output += `${space}<${n.tag}${endLine}`;\n        Object.keys(n).forEach((k) => {\n            if (!SYSTEM_TAGS.includes(k)) {\n                output += `${isSingleLine ? '' : `${space}  `}${k}=\"${\n                    n[k]\n                }\"${endLine}`;\n            }\n        });\n    } else {\n        output += `${space}<${n.tag}`;\n    }\n    if (n.children && n.children.length) {\n        if (isSingleLine) {\n            output += '>\\n';\n        } else {\n            output += `${space}>\\n`;\n        }\n\n        const nextLevel = level + 1;\n        n.children.forEach((v) => {\n            output += _parseNode(v, nextLevel);\n        });\n        output += `${space}</${n.tag}>\\n`;\n    } else {\n        output += `${isSingleLine ? '' : space}/>\\n`;\n    }\n    return output;\n};\n\nconst _mergeNodeParameters = (node, nodeParamsExt) => {\n    if (!nodeParamsExt) {\n        logWarning('_mergeNodeParameters: nodeParamsExt value is null');\n        return;\n    }\n    if (!node) {\n        logWarning('_mergeNodeParameters: node value is null');\n        return;\n    }\n\n    Object.keys(nodeParamsExt).forEach((k) => {\n        if (!SYSTEM_TAGS.includes(k)) node[k] = nodeParamsExt[k];\n    });\n};\n\nconst _mergeNodeChildren = (node, nodeChildrenExt = []) => {\n    // console.log('_mergeNodeChildren', node, 'OVERRIDE', nodeChildrenExt);\n    if (!node) {\n        logWarning('_mergeNodeChildren: Node is undefined');\n        return;\n    }\n    if (!node.children) node.children = [];\n    nodeChildrenExt.forEach((v) => {\n        const nameExt = v['android:name'];\n        if (v.tag) {\n            const childNode = _findChildNode(v.tag, nameExt, node);\n            if (childNode) {\n                logDebug(\n                    `_mergeNodeChildren: FOUND EXISTING NODE TO MERGE ${nameExt} ${v.tag}`\n                );\n                _mergeNodeParameters(childNode, v);\n                _mergeNodeChildren(childNode, v.children);\n            } else {\n                logDebug(\n                    `_mergeNodeChildren: NO android:name found. adding to children ${nameExt} ${v.tag}`\n                );\n                node.children.push(v);\n            }\n        }\n    });\n};\n\nexport const parseAndroidManifestSync = (c, platform) => {\n    logTask(`parseAndroidManifestSync:${platform}`);\n    try {\n        const baseManifestFilePath = path.join(\n            c.paths.rnv.dir,\n            `src/platformTools/android/supportFiles/AndroidManifest_${platform}.json`\n        );\n        const baseManifestFile = readObjectSync(baseManifestFilePath);\n        const appFolder = getAppFolder(c, platform);\n        const application = _findChildNode(\n            'application',\n            '.MainApplication',\n            baseManifestFile\n        );\n\n        baseManifestFile.package = getAppId(c, platform);\n\n        // appConfigs/base/plugins.json PLUGIN CONFIG ROOT OVERRIDES\n        const pluginConfigAndroid = getFlavouredProp(\n            c,\n            c.buildConfig?.platforms?.[platform],\n            'AndroidManifest'\n        );\n        const pluginConfigAndroidSchemed = getFlavouredProp(\n            c,\n            c.buildConfig?.platforms?.[platform]?.buildSchemes?.[\n                c.runtime.scheme\n            ],\n            'AndroidManifest'\n        );\n\n        if (pluginConfigAndroid) {\n            const applicationExt = _findChildNode(\n                'application',\n                '.MainApplication',\n                pluginConfigAndroid\n            );\n            _mergeNodeParameters(application, applicationExt);\n            if (applicationExt.children) {\n                _mergeNodeChildren(application, applicationExt.children);\n            }\n        }\n        if (pluginConfigAndroidSchemed) {\n            const applicationExt2 = _findChildNode(\n                'application',\n                '.MainApplication',\n                pluginConfigAndroidSchemed\n            );\n            _mergeNodeParameters(application, applicationExt2);\n            if (applicationExt2.children) {\n                _mergeNodeChildren(application, applicationExt2.children);\n            }\n        }\n\n        // appConfigs/base/plugins.json PLUGIN CONFIG OVERRIDES\n        parsePlugins(c, platform, (plugin, pluginPlat) => {\n            const androidManifest = getFlavouredProp(\n                c,\n                pluginPlat,\n                'AndroidManifest'\n            );\n            if (androidManifest) {\n                _mergeNodeChildren(baseManifestFile, androidManifest.children);\n                // const pluginApplication = _findChildNode('application', '.MainApplication', pluginPlat.AndroidManifest);\n                // if (pluginApplication) {\n                //     _mergeNodeParameters(application, pluginApplication);\n                //\n                //     _mergeNodeChildren(application, pluginApplication.children);\n                // }\n            }\n        });\n\n        // appConfig PERMISSIONS OVERRIDES\n        let prms = '';\n        const configPermissions = c.buildConfig?.permissions;\n\n        const includedPermissions = getConfigProp(c, platform, 'includedPermissions')\n            || getConfigProp(c, platform, 'permissions');\n        const excludedPermissions = getConfigProp(\n            c,\n            platform,\n            'excludedPermissions'\n        );\n        if (includedPermissions && configPermissions) {\n            const platPerm = configPermissions[platform] ? platform : 'android';\n            const pc = configPermissions[platPerm];\n            if (includedPermissions[0] === '*') {\n                Object.keys(pc).forEach((k) => {\n                    if (\n                        !(\n                            excludedPermissions\n                          && excludedPermissions.includes(k)\n                        )\n                    ) {\n                        prms += `\\n   <uses-permission android:name=\"${pc[k].key}\" />`;\n                        const key = pc[k].key || k;\n                        baseManifestFile.children.push({\n                            tag: 'uses-permission',\n                            'android:name': key\n                        });\n                    }\n                });\n            } else {\n                includedPermissions.forEach((v) => {\n                    if (pc[v]) {\n                        prms += `\\n   <uses-permission android:name=\"${pc[v].key}\" />`;\n                        const key = pc[v].key || v;\n                        baseManifestFile.children.push({\n                            tag: 'uses-permission',\n                            'android:name': key\n                        });\n                    }\n                });\n            }\n        }\n\n        // appConfig FEATURES OVERRIDES\n        const includedFeatures = getConfigProp(c, platform, 'includedFeatures');\n        if (includedFeatures) {\n            includedFeatures.forEach((key) => {\n                baseManifestFile.children.push({\n                    tag: 'uses-feature',\n                    'android:name': key,\n                    'android:required': true\n                });\n            });\n        }\n\n        const excludedFeatures = getConfigProp(c, platform, 'excludedFeatures');\n        if (excludedFeatures) {\n            excludedFeatures.forEach((key) => {\n                baseManifestFile.children.push({\n                    tag: 'uses-feature',\n                    'android:name': key,\n                    'android:required': false\n                });\n            });\n        }\n\n        const manifestXml = _convertToXML(baseManifestFile);\n        // get correct source of manifest\n        const manifestFile = 'app/src/main/AndroidManifest.xml';\n\n        writeCleanFile(\n            getBuildFilePath(c, platform, manifestFile),\n            path.join(appFolder, manifestFile),\n            [\n                { pattern: '{{PLUGIN_MANIFEST_FILE}}', override: manifestXml },\n                { pattern: '{{PERMISIONS}}', override: prms },\n                {\n                    pattern: '{{APPLICATION_ID}}',\n                    override: baseManifestFile.package\n                }\n            ], null, c\n        );\n\n        return;\n    } catch (e) {\n        logError(e);\n    }\n};\n\nexport const injectPluginManifestSync = () => {\n    // const className = pkg ? pkg.split('.').pop() : null;\n    // let packageParams = '';\n    // if (plugin.packageParams) {\n    //     packageParams = plugin.packageParams.join(',');\n    // }\n    //\n    // const pathFixed = plugin.path\n    //     ? `${plugin.path}`\n    //     : `node_modules/${key}/android`;\n    // const modulePath = `../../${pathFixed}`;\n};\n"],"file":"manifestParser.js"}