{"version":3,"sources":["../../src/platformTools/index.js"],"names":["rnvPlatformList","c","Promise","resolve","opts","_genPlatOptions","asString","rnvPlatformConfigure","platform","isPlatformSupported","cleanPlatformBuild","_runCopyPlatforms","updateProjectPlatforms","platforms","config","paths","project","currentConfig","files","defaults","supportedPlatforms","rnvPlatformSetup","currentPlatforms","inquirer","prompt","name","type","pageSize","message","validate","val","length","default","choices","SUPPORTED_PLATFORMS","inputSupportedPlatforms","_generatePlatformChoices","buildConfig","map","isConnected","platformTemplatesDirs","includes","rnv","platformTemplates","dir","chalk","green","yellow","value","rnvPlatformEject","choice","disabled","ejectedPlatforms","ptfn","rptf","prf","copyShared","forEach","PLATFORMS","requiresSharedConfig","path","join","white","i","obj","mapping","defaultVal","isEjected","bold","rnvPlatformConnect","connectedPlatforms","Object","keys","deletePlatformFolder","pathsToRemove","push","copyPlatformTasks","k","_isPlatformSupportedSync","ptPath","pPath","builds","runtime","appId","appConfig","all","then","cleanTasks","createPlatformBuild","reject","platformsAsObj","keysAsArray","logMessage","configuredPlatforms","Array","isArray","confirm","newPlatforms","Error","red","isPlatformActive"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport chalk from 'chalk';\nimport path from 'path';\nimport inquirer from 'inquirer';\n\nimport { logToSummary, logTask, logSuccess, logError, logDebug, logWarning } from '../systemTools/logger';\nimport { generateOptions, inquirerPrompt } from '../systemTools/prompt';\nimport {\n    cleanFolder,\n    copyFolderContentsRecursiveSync,\n    writeFileSync,\n    removeDirs\n} from '../systemTools/fileutils';\nimport { cleanPlaformAssets } from '../projectTools/projectParser';\nimport { PLATFORMS, SUPPORTED_PLATFORMS } from '../constants';\nimport { checkAndConfigureSdks } from './sdkManager';\nimport { configureEntryPoints } from '../templateTools';\nimport { getTimestampPathsConfig } from '../common';\n\nexport const rnvPlatformList = c => new Promise((resolve) => {\n    const opts = _genPlatOptions(c);\n    logToSummary(`Platforms:\\n\\n${opts.asString}`);\n    resolve();\n});\n\nexport const rnvPlatformConfigure = async (c) => {\n    // c.platform = c.program.platform || 'all';\n    logTask(`rnvPlatformConfigure:${c.platform}`);\n\n    await isPlatformSupported(c);\n    await cleanPlatformBuild(c, c.platform);\n    await cleanPlaformAssets(c, c.platform);\n    await _runCopyPlatforms(c, c.platform);\n};\n\nconst updateProjectPlatforms = (c, platforms) => {\n    const {\n        project: { config }\n    } = c.paths;\n    const currentConfig = c.files.project.config;\n    currentConfig.defaults = currentConfig.defaults || {};\n    currentConfig.defaults.supportedPlatforms = platforms;\n    writeFileSync(config, currentConfig);\n};\n\nexport const rnvPlatformSetup = async (c) => {\n    const currentPlatforms = c.files.project.config.defaults?.supportedPlatforms || [];\n\n    const { inputSupportedPlatforms } = await inquirer.prompt({\n        name: 'inputSupportedPlatforms',\n        type: 'checkbox',\n        pageSize: 20,\n        message: 'What platforms would you like to use?',\n        validate: val => !!val.length || 'Please select at least a platform',\n        default: currentPlatforms,\n        choices: SUPPORTED_PLATFORMS\n    });\n\n    updateProjectPlatforms(c, inputSupportedPlatforms);\n};\n\nconst _generatePlatformChoices = c => c.buildConfig.defaults.supportedPlatforms.map((platform) => {\n    const isConnected = c.paths.project.platformTemplatesDirs[\n        platform\n    ].includes(c.paths.rnv.platformTemplates.dir);\n    return {\n        name: `${platform} - ${\n            isConnected\n                ? chalk.green('(connected)')\n                : chalk.yellow('(ejected)')\n        }`,\n        value: platform,\n        isConnected\n    };\n});\n\nexport const rnvPlatformEject = async (c) => {\n    logTask('rnvPlatformEject');\n\n    const { ejectedPlatforms } = await inquirer.prompt({\n        name: 'ejectedPlatforms',\n        message:\n            'This will copy platformTemplates folders from ReNative managed directly to your project Select platforms you would like to connect (use SPACE key)',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({\n            ...choice,\n            disabled: !choice.isConnected\n        }))\n    });\n\n    if (ejectedPlatforms.length) {\n        const ptfn = 'platformTemplates';\n        const rptf = c.paths.rnv.platformTemplates.dir;\n        const prf = c.paths.project.dir;\n\n        let copyShared = false;\n\n        ejectedPlatforms.forEach((platform) => {\n            if (PLATFORMS[platform].requiresSharedConfig) {\n                copyShared = true;\n            }\n            copyFolderContentsRecursiveSync(\n                path.join(rptf, platform),\n                path.join(prf, ptfn, platform)\n            );\n\n            if (copyShared) {\n                copyFolderContentsRecursiveSync(\n                    path.join(rptf, '_shared'),\n                    path.join(prf, ptfn, '_shared')\n                );\n            }\n\n            c.files.project.config.paths\n                .platformTemplatesDirs = c.files.project.config.paths.platformTemplatesDirs || {};\n            c.files.project.config.paths.platformTemplatesDirs[\n                platform\n            ] = `./${ptfn}`;\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n\n        logSuccess(\n            `${chalk.white(\n                ejectedPlatforms.join(',')\n            )} platform templates are located in ${chalk.white(\n                c.files.project.config.paths.platformTemplatesDirs[ejectedPlatforms[0]]\n            )} now. You can edit them directly!`\n        );\n    } else {\n        logError(`You haven't selected any platform to eject.\nTIP: You can select options with ${chalk.white('SPACE')} key before pressing ENTER!`);\n    }\n};\n\nconst _genPlatOptions = (c) => {\n    const opts = generateOptions(\n        c.buildConfig.defaults.supportedPlatforms,\n        true,\n        null,\n        (i, obj, mapping, defaultVal) => {\n            const isEjected = c.paths.project.platformTemplatesDirs[\n                obj\n            ].includes(c.paths.rnv.platformTemplates.dir)\n                ? chalk.green('(connected)')\n                : chalk.yellow('(ejected)');\n            return ` [${chalk.white(i + 1)}]> ${chalk.bold(\n                defaultVal\n            )} - ${isEjected} \\n`;\n        }\n    );\n    return opts;\n};\n\nexport const rnvPlatformConnect = async (c) => {\n    logTask('rnvPlatformConnect');\n\n    const { connectedPlatforms } = await inquirer.prompt({\n        name: 'connectedPlatforms',\n        message:\n            'This will point platformTemplates folders from your local project to ReNative managed one. Select platforms you would like to connect',\n        type: 'checkbox',\n        choices: _generatePlatformChoices(c).map(choice => ({\n            ...choice,\n            disabled: choice.isConnected\n        }))\n    });\n\n    if (connectedPlatforms.length) {\n        connectedPlatforms.forEach((platform) => {\n            if (c.files.project.config.paths.platformTemplatesDirs?.[platform]) {\n                delete c.files.project.config.paths.platformTemplatesDirs[platform];\n            }\n\n            if (\n                !Object.keys(c.files.project.config.paths.platformTemplatesDirs)\n                    .length\n            ) {\n                delete c.files.project.config.paths.platformTemplatesDirs; // also cleanup the empty object\n            }\n\n            writeFileSync(c.paths.project.config, c.files.project.config);\n        });\n    }\n\n    const { deletePlatformFolder } = await inquirer.prompt({\n        name: 'deletePlatformFolder',\n        type: 'confirm',\n        message:\n            'Would you also like to delete the previously used platform folder?'\n    });\n\n    if (deletePlatformFolder) {\n        const pathsToRemove = [];\n        connectedPlatforms.forEach((platform) => {\n            pathsToRemove.push(\n                path.join(\n                    c.paths.project.platformTemplatesDirs[platform],\n                    platform\n                )\n            );\n        });\n\n        // TODO: Remove shared folders as well\n\n        await removeDirs(pathsToRemove);\n    }\n\n    logSuccess(\n        `${chalk.white(\n            connectedPlatforms.join(',')\n        )} now using ReNative platformTemplates located in ${chalk.white(\n            c.paths.rnv.platformTemplates.dir\n        )} now!`\n    );\n};\n\nconst _runCopyPlatforms = (c, platform) => new Promise((resolve) => {\n    logTask(`_runCopyPlatforms:${platform}`);\n    const copyPlatformTasks = [];\n\n    if (platform === 'all') {\n        Object.keys(c.buildConfig.platforms).forEach((k) => {\n            if (_isPlatformSupportedSync(k)) {\n                const ptPath = path.join(\n                    c.paths.project.platformTemplatesDirs[k],\n                    `${k}`\n                );\n                const pPath = path.join(\n                    c.paths.project.builds.dir,\n                    `${c.runtime.appId}_${k}`\n                );\n                copyPlatformTasks.push(\n                    copyFolderContentsRecursiveSync(ptPath, pPath, true, false, false, {},\n                        getTimestampPathsConfig(c, platform), c)\n                );\n            }\n        });\n    } else if (_isPlatformSupportedSync(platform)) {\n        const ptPath = path.join(\n            c.paths.project.platformTemplatesDirs[platform],\n            `${platform}`\n        );\n        const pPath = path.join(\n            c.paths.project.builds.dir,\n            `${c.runtime.appId}_${platform}`\n        );\n        copyPlatformTasks.push(\n            copyFolderContentsRecursiveSync(ptPath, pPath, true, false, false, {},\n                getTimestampPathsConfig(c, platform), c)\n        );\n    } else {\n        logWarning(\n            `Your platform ${chalk.white(\n                platform\n            )} config is not present. Check ${chalk.white(\n                c.paths.appConfig.config\n            )}`\n        );\n    }\n\n    Promise.all(copyPlatformTasks).then(() => {\n        resolve();\n    });\n});\n\nexport const cleanPlatformBuild = (c, platform) => new Promise((resolve) => {\n    logTask(`cleanPlatformBuild:${platform}`);\n\n    const cleanTasks = [];\n\n    if (platform === 'all') {\n        Object.keys(c.buildConfig.platforms).forEach((k) => {\n            if (_isPlatformSupportedSync(k)) {\n                const pPath = path.join(\n                    c.paths.project.builds.dir,\n                    `${c.runtime.appId}_${k}`\n                );\n                cleanTasks.push(cleanFolder(pPath));\n            }\n        });\n    } else if (_isPlatformSupportedSync(platform)) {\n        const pPath = path.join(\n            c.paths.project.builds.dir,\n            `${c.runtime.appId}_${platform}`\n        );\n        cleanTasks.push(cleanFolder(pPath));\n    }\n\n    Promise.all(cleanTasks).then(() => {\n        resolve();\n    });\n});\n\nexport const createPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask(`createPlatformBuild:${platform}`);\n\n    if (!_isPlatformSupportedSync(platform, null, reject)) return;\n\n    const pPath = path.join(\n        c.paths.project.builds.dir,\n        `${c.runtime.appId}_${platform}`\n    );\n    const ptPath = path.join(\n        c.paths.project.platformTemplatesDirs[platform],\n        `${platform}`\n    );\n\n    copyFolderContentsRecursiveSync(ptPath, pPath, false, [\n        path.join(ptPath, '_privateConfig')\n    ], false, {}, getTimestampPathsConfig(c, platform), c);\n\n    resolve();\n});\n\nexport const isPlatformSupported = async (c) => {\n    logTask(`isPlatformSupported:${c.platform}`);\n    let platformsAsObj = c.buildConfig\n        ? c.buildConfig.platforms\n        : c.supportedPlatforms;\n    if (!platformsAsObj) platformsAsObj = SUPPORTED_PLATFORMS;\n    const opts = generateOptions(platformsAsObj);\n\n    if (\n        !c.platform\n        || c.platform === true\n        || !SUPPORTED_PLATFORMS.includes(c.platform)\n    ) {\n        const { platform } = await inquirerPrompt({\n            name: 'platform',\n            type: 'list',\n            message: 'Pick one of available platforms',\n            choices: opts.keysAsArray,\n            logMessage: 'You need to specify platform'\n        });\n\n        c.platform = platform;\n    }\n\n    const configuredPlatforms = c.files.project.config?.defaults?.supportedPlatforms;\n    if (\n        Array.isArray(configuredPlatforms)\n        && !configuredPlatforms.includes(c.platform)\n    ) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `Looks like platform ${\n                c.platform\n            } is not supported by your project. Would you like to enable it?`\n        });\n\n        if (confirm) {\n            const newPlatforms = [...configuredPlatforms, c.platform];\n            updateProjectPlatforms(c, newPlatforms);\n            c.buildConfig.defaults.supportedPlatforms = newPlatforms;\n            await configureEntryPoints(c);\n        } else {\n            throw new Error('User canceled');\n        }\n    }\n\n    // Check global SDKs\n    await checkAndConfigureSdks(c);\n    return c.platform;\n};\n\nconst _isPlatformSupportedSync = (platform, resolve, reject) => {\n    if (!platform) {\n        if (reject) {\n            reject(\n                chalk.red(\n                    `You didn't specify platform. make sure you add \"${chalk.white.bold(\n                        '-p <PLATFORM>'\n                    )}\" option to your command!`\n                )\n            );\n        }\n        return false;\n    }\n    if (!SUPPORTED_PLATFORMS.includes(platform)) {\n        if (reject) {\n            reject(\n                chalk.red(\n                    `Platform ${platform} is not supported. Use one of the following: ${chalk.white(\n                        SUPPORTED_PLATFORMS.join(', ')\n                    )} .`\n                )\n            );\n        }\n        return false;\n    }\n    if (resolve) resolve();\n    return true;\n};\n\nexport const isPlatformActive = (c, platform, resolve) => {\n    if (!c.buildConfig || !c.buildConfig.platforms) {\n        logError(\n            `Looks like your appConfigFile is not configured properly! check ${chalk.white(\n                c.paths.appConfig.config\n            )} location.`\n        );\n        if (resolve) resolve();\n        return false;\n    }\n    if (!c.buildConfig.platforms[platform]) {\n        logDebug(\n            `Platform ${platform} not configured for ${c.runtime.appId}. skipping.`\n        );\n        if (resolve) resolve();\n        return false;\n    }\n    return true;\n};\n"],"file":"index.js"}