{"version":3,"sources":["../../src/setupTools/base.js"],"names":["BasePlatformSetup","os","c","Config","getConfig","paths","globalConfigPath","workspace","config","availableDownloader","androidSdkLocation","sdksToInstall","sdk","location","setupConfig","android","androidSdk","tizenSdk","tizenSdkPath","webosSdk","webosSdkPath","downloader","Error","downloadLocation","shell","rm","aditionalArguments","locationArgument","command","sdkUrl","exec","skipPrereq","checkPrereqs","installPrereqs","downloadSdk","unzipSdk","installSdksAndEmulator","installTizenSdk","installWebosSdk","installFastlane","installDocker","installAws","postInstall","program","ci","inquirer","prompt","name","type","message","response","sdkInstall","installSdk","includes"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport shell from 'shelljs';\nimport inquirer from 'inquirer';\n\nimport { commandExistsSync } from '../systemTools/exec';\nimport { configureRnvGlobal } from '../configTools/configParser';\nimport { replaceHomeFolder, updateConfigFile } from '../systemTools/fileutils';\nimport setupConfig from './config';\nimport Config from '../config';\nimport { logTask, logError, logInfo, logDebug, logSuccess } from '../systemTools/logger';\n\nclass BasePlatformSetup {\n    constructor(os, c) {\n        // eslint-disable-next-line no-param-reassign\n        if (!c) c = Config.getConfig();\n        const { paths } = c;\n        this.os = os;\n        this.c = c;\n        this.globalConfigPath = paths.workspace.config;\n        this.availableDownloader = null;\n        this.androidSdkLocation = replaceHomeFolder('~/Android');\n        this.sdksToInstall = '\"build-tools;28.0.3\" \"emulator\" \"extras;android;m2repository\" \"extras;google;m2repository\" \"patcher;v4\" \"platform-tools\" \"platforms;android-28\" \"sources;android-28\" \"system-images;android-28;google_apis_playstore;x86\" \"tools\"';\n    }\n\n    checkPrereqs() {\n        logInfo(`Platform ${this.os}`);\n        logInfo('Checking if wget or curl is installed');\n        if (commandExistsSync('wget')) {\n            this.availableDownloader = 'wget';\n        } else if (commandExistsSync('curl')) {\n            this.availableDownloader = 'curl';\n        }\n    }\n\n    async installPrereqs() {\n        // to be overwritten\n        return true;\n    }\n\n    async postInstall(sdk) {\n        if (sdk === 'android') {\n            const { location } = setupConfig.android;\n            await updateConfigFile(\n                { androidSdk: location },\n                this.globalConfigPath\n            );\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n\n        if (sdk === 'tizen') {\n            await updateConfigFile(\n                { tizenSdk: this.tizenSdkPath },\n                this.globalConfigPath\n            );\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n\n        if (sdk === 'webos') {\n            await updateConfigFile(\n                { webosSdk: this.webosSdkPath },\n                this.globalConfigPath\n            );\n            await configureRnvGlobal(this.c); // trigger the configure to update the paths for clis\n        }\n    }\n\n    async downloadSdk(sdk) {\n        const downloader = this.availableDownloader;\n        if (!downloader) throw new Error('Wget or cURL not installed!');\n        logDebug(\n            `Downloading ${sdk} SDK to ${setupConfig[sdk].downloadLocation} using ${downloader}`\n        );\n        // remove the file if existing first\n        await shell.rm(setupConfig[sdk].downloadLocation);\n\n        let aditionalArguments;\n        let locationArgument;\n        if (downloader === 'wget') {\n            aditionalArguments = '-q';\n            locationArgument = replaceHomeFolder('-P ~/');\n        }\n        if (downloader === 'curl') {\n            aditionalArguments = '-#';\n            locationArgument = `--output ${setupConfig[sdk].downloadLocation}`;\n        }\n\n        const command = `${downloader} ${aditionalArguments} ${setupConfig[sdk].sdkUrl} ${locationArgument}`;\n\n        logDebug('Running', command);\n        logInfo(`Downloading ${sdk} SDK...`);\n        await shell.exec(command);\n    }\n\n    async unzipSdk(sdk) {\n        logDebug(\n            `Unzipping from ${setupConfig[sdk].downloadLocation} to ${setupConfig[sdk].location}`\n        );\n        if (!commandExistsSync('unzip')) { throw new Error('unzip is not installed'); }\n        await shell.exec(\n            `unzip -qq -o ${setupConfig[sdk].downloadLocation} -d ${setupConfig[sdk].location}`\n        );\n    }\n\n    async installSdksAndEmulator() {\n        logTask('installSdksAndEmulator');\n        logDebug('Accepting licenses');\n        await shell.exec(\n            `yes | ${setupConfig.android.location}/tools/bin/sdkmanager --licenses > /dev/null`\n        );\n        logDebug('Installing SDKs', this.sdksToInstall);\n        await shell.exec(\n            `${setupConfig.android.location}/tools/bin/sdkmanager ${this.sdksToInstall} > /dev/null`\n        );\n        logSuccess(`SDK succefully installed at: ${setupConfig.android.location}`);\n    }\n\n    async installSdk(sdk, skipPrereq) {\n        logTask(`installSdk:${sdk}`);\n        !skipPrereq && this.checkPrereqs();\n        !skipPrereq && (await this.installPrereqs());\n\n        switch (sdk) {\n            case 'android':\n                await this.downloadSdk(sdk);\n                await this.unzipSdk(sdk);\n                await this.installSdksAndEmulator();\n                break;\n            case 'tizen':\n                await this.installTizenSdk();\n                break;\n            case 'webos':\n                await this.installWebosSdk();\n                break;\n            case 'fastlane':\n                await this.installFastlane();\n                break;\n            case 'docker':\n                await this.installDocker();\n                break;\n            case 'aws':\n                await this.installAws();\n                break;\n            default:\n                break;\n        }\n\n        this.postInstall(sdk);\n    }\n\n    async installTizenSdk() {\n        // to be overwritten\n        logError(\n            'Install webos sdk not supported yet. Follow https://developer.tizen.org/development/tizen-studio/download to install it manually'\n        );\n        return true;\n    }\n\n    async installWebosSdk() {\n        // to be overwritten\n        logError(\n            'Install webos sdk not supported yet. Follow http://webostv.developer.lge.com/sdk/installation/ to install it manually'\n        );\n        return true;\n    }\n\n    async installFastlane() {\n        // to be overwritten\n        logError(\n            'Install fastlane not supported yet. Follow https://docs.fastlane.tools/getting-started/ios/setup/ to install it manually'\n        );\n        return true;\n    }\n\n    async installDocker() {\n        // to be overwritten\n        logError('Install docker not supported yet');\n        return true;\n    }\n\n    async installAws() {\n        // to be overwritten\n        logError('Install aws not supported yet. Follow https://docs.aws.amazon.com/cli/latest/userguide/install-macos.html to install it manually (version 1 required)');\n        return true;\n    }\n\n    async askToInstallSDK(sdk) {\n        let sdkInstall;\n        if (!this.c.program.ci) {\n            const response = await inquirer.prompt([\n                {\n                    name: 'sdkInstall',\n                    type: 'confirm',\n                    message: `Do you want to install ${sdk} SDK?`\n                }\n            ]);\n            // eslint-disable-next-line prefer-destructuring\n            sdkInstall = response.sdkInstall;\n        }\n\n        if (this.c.program.ci || sdkInstall) {\n            await this.installSdk(sdk, ['fastlane', 'docker'].includes(sdk)); // no prereqs needed for fastlane\n        } else {\n            throw new Error(\n                `You can't run the project on this platform without ${sdk} sdk installed`\n            );\n        }\n    }\n}\n\nexport default BasePlatformSetup;\n"],"file":"base.js"}