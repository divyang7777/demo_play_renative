{"version":3,"sources":["../src/index.js"],"names":["Analytics","initialize","initializeBuilder","cmd","subCmd","process","program","FileUtils","configureFilesystem","Resolver","getConfigProp","doResolve","CoreUtils","isSystemWin","c","ConfigParser","createRnvConfig","Logger","configureLogger","logInitialize","run","then","Config","initializeConfig","logComplete","getConfig","runtime","keepSessionActive","catch","e","logError","doResolvePath"],"mappings":"2yBAAA,6D;AACA;AACA,2E;AACA,4D;AACA;AACA,mE;AACA,uE;AACA,iF;AACA,2E;AACA,yE;AACA,uE;AACA,gE;AACA,2E;AACA,uF;AACA;AACA;AACA;;AAEA;;AAEAA,mBAAUC,UAAV;;AAEO,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAOC,GAAP,CAAYC,MAAZ,CAAoBC,OAApB,CAA6BC,OAA7B;AAC7BC,SAAS,CAACC,mBAAV,CAA8BC,QAAQ,CAACC,aAAvC,CAAsDD,QAAQ,CAACE,SAA/D,CAA0EC,SAAS,CAACC,WAApF;AACMC,CAFuB,CAEnBC,YAAY,CAACC,eAAb,CAA6BV,OAA7B,CAAsCD,OAAtC,CAA+CF,GAA/C,CAAoDC,MAApD,CAFmB;;AAI7Ba,MAAM,CAACC,eAAP,CAAuBJ,CAAvB,CAA0Bd,kBAA1B;AACAiB,MAAM,CAACE,aAAP,GAL6B;;AAOtBL,CAPsB,uEAA1B,C;;;AAUP,GAAMM,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACjB,GAAD,CAAMC,MAAN,CAAcE,OAAd,CAAuBD,OAAvB,CAAmC;AAC3CH,iBAAiB,CAACC,GAAD,CAAMC,MAAN,CAAcC,OAAd,CAAuBC,OAAvB,CAAjB;AACKe,IADL,CACU,SAAAP,CAAC,QAAIQ,iBAAOC,gBAAP,CAAwBT,CAAxB,CAAJ,EADX;AAEKO,IAFL,CAEU,SAAAP,CAAC,QAAI,iBAAIA,CAAJ,CAAJ,EAFX;AAGKO,IAHL,CAGU,iBAAMJ,CAAAA,MAAM,CAACO,WAAP,CAAmB,CAACF,gBAAOG,SAAP,GAAmBC,OAAnB,CAA2BC,iBAA/C,CAAN,EAHV;AAIKC,KAJL,CAIW,SAAAC,CAAC,QAAIZ,CAAAA,MAAM,CAACa,QAAP,CAAgBD,CAAhB,CAAmB,IAAnB,CAAJ,EAJZ;AAKH,CAND,C;;;;;;;;;;;;;;;;;;;;;AA2BelB,S,CAAcF,Q,CAAdE,S;AACAoB,a,CAAkBtB,Q,CAAlBsB,a;;AAEA,CAAEX,GAAG,CAAHA,GAAF,CAAOE,MAAM,CAANA,eAAP,C","sourcesContent":["import * as Common from './core/common';\nimport * as CoreUtils from './core/utils';\nimport * as Logger from './core/systemManager/logger';\nimport * as Prompt from './cli/prompt';\nimport * as ConfigParser from './core/configManager/configParser';\nimport * as Constants from './core/constants';\nimport * as Exec from './core/systemManager/exec';\nimport * as FileUtils from './core/systemManager/fileutils';\nimport * as Doctor from './core/systemManager/doctor';\nimport * as PluginTools from './core/pluginManager';\nimport * as SetupTools from './core/setupManager';\nimport * as Resolver from './core/resolve';\nimport * as EngineManager from './core/engineManager';\nimport * as SchemaParser from './core/schemaManager/schemaParser';\nimport Analytics from './core/systemManager/analytics';\nimport Config from './core/configManager/config';\nimport CLI from './cli';\n\nimport 'source-map-support/register';\n\nAnalytics.initialize();\n\nexport const initializeBuilder = async (cmd, subCmd, process, program) => {\n    FileUtils.configureFilesystem(Resolver.getConfigProp, Resolver.doResolve, CoreUtils.isSystemWin);\n    const c = ConfigParser.createRnvConfig(program, process, cmd, subCmd);\n\n    Logger.configureLogger(c, Analytics);\n    Logger.logInitialize();\n\n    return c;\n};\n\nconst run = (cmd, subCmd, program, process) => {\n    initializeBuilder(cmd, subCmd, process, program)\n        .then(c => Config.initializeConfig(c))\n        .then(c => CLI(c))\n        .then(() => Logger.logComplete(!Config.getConfig().runtime.keepSessionActive))\n        .catch(e => Logger.logError(e, true));\n};\n\n\nexport {\n    Constants,\n    Common,\n    Exec,\n    FileUtils,\n    Doctor,\n    Config,\n    PluginTools,\n    SetupTools,\n    Prompt,\n    Logger,\n    Resolver,\n    EngineManager,\n    SchemaParser,\n    run,\n    CLI\n};\n\nexport const { doResolve } = Resolver;\nexport const { doResolvePath } = Resolver;\n\nexport default { run, Config };\n"],"file":"index.js"}