{"version":3,"sources":["../../src/sdk-webos/index.js"],"names":["launchWebOSimulator","c","ePath","path","join","buildConfig","sdks","WEBOS_SDK","isSystemWin","Promise","reject","detached","stdio","openCommand","parseDevices","devicesResponse","linesArray","split","slice","map","line","trim","filter","all","word","name","device","connection","profile","deviceInfo","CLI_WEBOS_ARES_DEVICE_INFO","silent","timeout","isDevice","active","includes","installAndLaunchApp","target","appPath","tId","CLI_WEBOS_ARES_INSTALL","toReturn","CLI_WEBOS_ARES_LAUNCH","buildDeviceChoices","devices","key","value","listWebOSTargets","deviceArray","i","bold","waitForEmulatorToBeReady","emulator","d","Error","res","_runWebosSimOrDevice","program","tDir","tOut","tSim","configFilePath","cnfg","JSON","parse","id","version","CLI_WEBOS_ARES_PACKAGE","activeDevices","actualDevices","length","inquirer","prompt","type","message","default","response","setupDevice","CLI_WEBOS_ARES_SETUP_DEVICE","interactive","newDeviceResponse","dev","actualDev","newDevice","CLI_WEBOS_ARES_NOVACOM","tv","choices","chosenDevice","runWebOS","hosted","runtime","platform","isHosted","port","isPortActive","resetCompleted","skipActiveServerCheck","bundleAssets","isWeinreEnabled","REMOTE_DEBUGGER_ENABLED_PLATFORMS","white","then","catch","logError","buildWebOSProject","cyan","configureWebOSProject","platformBuildsProjectPath","RNV_PROJECT_DIR_NAME","RNV_SERVER_DIR_NAME","configureProject","configFile","injects","pattern","override","toLowerCase","semver","coerce"],"mappings":"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","sourcesContent":["import path from 'path';\nimport semver from 'semver';\nimport inquirer from 'inquirer';\nimport { fsExistsSync, getRealPath, writeCleanFile, fsReadFileSync } from '../core/systemManager/fileutils';\nimport { executeAsync, execCLI, openCommand } from '../core/systemManager/exec';\nimport {\n    // getAppFolder,\n    // getAppSubFolder,\n    getPlatformProjectDir,\n    // getPlatformBuildDir,\n    getTemplateProjectDir,\n    getPlatformBuildDir,\n    // getTemplateDir,\n    getAppVersion,\n    // getAppTemplateFolder,\n    getAppTitle,\n    getAppId,\n    // getAppTemplateFolder,\n    getConfigProp,\n    checkPortInUse,\n    confirmActiveBundler,\n    addSystemInjects\n} from '../core/common';\nimport { buildWeb, runWebpackServer, configureCoreWebProject, waitForWebpack } from '../sdk-webpack';\n\nimport { waitForEmulator } from '../core/targetManager';\nimport { isPlatformActive } from '../core/platformManager';\nimport {\n    chalk,\n    logToSummary,\n    logTask,\n    logInfo,\n    logSuccess,\n    logError\n} from '../core/systemManager/logger';\nimport {\n    copyBuildsFolder,\n    copyAssetsFolder\n} from '../core/projectManager/projectParser';\nimport {\n    CLI_WEBOS_ARES_PACKAGE,\n    CLI_WEBOS_ARES_INSTALL,\n    CLI_WEBOS_ARES_DEVICE_INFO,\n    CLI_WEBOS_ARES_LAUNCH,\n    CLI_WEBOS_ARES_NOVACOM,\n    CLI_WEBOS_ARES_SETUP_DEVICE,\n    REMOTE_DEBUGGER_ENABLED_PLATFORMS,\n    RNV_PROJECT_DIR_NAME,\n    RNV_SERVER_DIR_NAME\n} from '../core/constants';\nimport { isSystemWin, isUrlLocalhost } from '../core/utils';\n\nconst launchWebOSimulator = (c) => {\n    logTask('launchWebOSimulator');\n\n    const ePath = path.join(\n        getRealPath(c, c.buildConfig?.sdks?.WEBOS_SDK),\n        `Emulator/v4.0.0/LG_webOS_TV_Emulator${\n            isSystemWin ? '.exe' : '_RCU.app'\n        }`\n    );\n\n    if (!fsExistsSync(ePath)) {\n        return Promise.reject(`Can't find emulator at path: ${ePath}`);\n    }\n    if (isSystemWin) { return executeAsync(c, ePath, { detached: true, stdio: 'ignore' }); }\n    return executeAsync(c, `${openCommand} ${ePath}`, { detached: true });\n};\n\n// const startHostedServerIfRequired = (c) => {\n//     if (Config.isWebHostEnabled) {\n//         return rnvStart(c);\n//     }\n// };\n\nconst parseDevices = (c, devicesResponse) => {\n    const linesArray = devicesResponse\n        .split('\\n')\n        .slice(2)\n        .map(line => line.trim())\n        .filter(line => line !== '');\n    return Promise.all(\n        linesArray.map(async (line) => {\n            const [name, device, connection, profile] = line\n                .split(' ')\n                .map(word => word.trim())\n                .filter(word => word !== '');\n            let deviceInfo = '';\n            try {\n                deviceInfo = await execCLI(\n                    c,\n                    CLI_WEBOS_ARES_DEVICE_INFO,\n                    `-d ${name}`,\n                    { silent: true, timeout: 10000 }\n                );\n            } catch (e) {\n                deviceInfo = e;\n            }\n\n            return {\n                name,\n                device,\n                connection,\n                profile,\n                isDevice: !isUrlLocalhost(device),\n                active: !deviceInfo.includes('ERR!')\n            };\n        })\n    );\n};\n\nconst installAndLaunchApp = async (c, target, appPath, tId) => {\n    try {\n        await execCLI(\n            c,\n            CLI_WEBOS_ARES_INSTALL,\n            `--device ${target} ${appPath}`\n        );\n    } catch (e) {\n        // installing it again if it fails. For some reason webosCLI says that it can't connect to\n        // the device from time to time. Running it again works.\n        await execCLI(\n            c,\n            CLI_WEBOS_ARES_INSTALL,\n            `--device ${target} ${appPath}`\n        );\n    }\n    // const { hosted } = c.program;\n    // const { platform } = c;\n    // const isHosted = hosted || !getConfigProp(c, platform, 'bundleAssets');\n    const toReturn = true;\n    // if (isHosted) {\n    //     toReturn = startHostedServerIfRequired(c);\n    //     await waitForWebpack(c);\n    // }\n    await execCLI(c, CLI_WEBOS_ARES_LAUNCH, `--device ${target} ${tId}`);\n    return toReturn;\n};\n\nconst buildDeviceChoices = devices => devices.map(device => ({\n    key: device.name,\n    name: `${device.name} - ${device.device}`,\n    value: device.name\n}));\n\nconst listWebOSTargets = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n\n    const deviceArray = devices.map(\n        (device, i) => ` [${i + 1}]> ${chalk().bold(device.name)} | ${device.device}`\n    );\n\n    logToSummary(`WebOS Targets:\\n${deviceArray.join('\\n')}`);\n\n    return true;\n};\n\nconst waitForEmulatorToBeReady = async (c) => {\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const emulator = devices.filter(d => !d.isDevice)[0];\n    if (!emulator) throw new Error('No WebOS emulator configured');\n\n    return waitForEmulator(\n        c,\n        CLI_WEBOS_ARES_DEVICE_INFO,\n        `-d ${emulator.name}`,\n        res => res.includes('modelName')\n    );\n};\n\nconst _runWebosSimOrDevice = async (c) => {\n    const { device } = c.program;\n\n    const tDir = getPlatformProjectDir(c);\n    const tOut = path.join(getPlatformBuildDir(c), 'output');\n    const tSim = c.program.target || 'emulator';\n    const configFilePath = path.join(tDir, 'appinfo.json');\n\n    // logTask(`runWebOS:${target}:${isHosted}`, chalk().grey);\n    const cnfg = JSON.parse(fsReadFileSync(configFilePath, 'utf-8'));\n    const tId = cnfg.id;\n    const appPath = path.join(tOut, `${tId}_${cnfg.version}_all.ipk`);\n\n\n    // Start the fun\n    // await buildWeb(c);\n    await execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`);\n\n    // List all devices\n    const devicesResponse = await execCLI(c, CLI_WEBOS_ARES_DEVICE_INFO, '-D');\n    const devices = await parseDevices(c, devicesResponse);\n    const activeDevices = devices.filter(d => d.active);\n\n    if (device) {\n        // Running on a device\n        const actualDevices = devices.filter(d => d.isDevice);\n\n        if (!actualDevices.length) {\n            // No device configured. Asking to configure\n            const response = await inquirer.prompt([\n                {\n                    type: 'confirm',\n                    name: 'setupDevice',\n                    message:\n                      'You want to deploy on a device but have none configured. Do you want to configure one?',\n                    default: false\n                }\n            ]);\n\n            if (response.setupDevice) {\n                // Yes, I would like that\n                logInfo(\n                    'Please follow the instructions from http://webostv.developer.lge.com/develop/app-test/#installDevModeApp on how to setup the TV and the connection with the PC. Then follow the onscreen prompts\\n'\n                );\n                await execCLI(c, CLI_WEBOS_ARES_SETUP_DEVICE, '', {\n                    interactive: true\n                });\n\n                const newDeviceResponse = await execCLI(\n                    c,\n                    CLI_WEBOS_ARES_DEVICE_INFO,\n                    '-D'\n                );\n                const dev = await parseDevices(c, newDeviceResponse);\n                const actualDev = dev.filter(d => d.isDevice);\n\n                if (actualDev.length > 0) {\n                    const newDevice = actualDev[0];\n                    // Oh boy, oh boy, I did it! I have a TV connected!\n                    logInfo(\n                        \"Please enter the `Passphrase` from the TV's Developer Mode app\"\n                    );\n                    await execCLI(\n                        c,\n                        CLI_WEBOS_ARES_NOVACOM,\n                        `--device ${newDevice.name} --getkey`,\n                        { stdio: 'inherit' }\n                    );\n                    return installAndLaunchApp(c, newDevice.name, appPath, tId);\n                }\n                // Yes, I said I would but I didn't\n                // @todo handle user not setting up the device\n            }\n        } else if (actualDevices.length === 1) {\n            const tv = actualDevices[0];\n            return installAndLaunchApp(c, tv.name, appPath, tId);\n        }\n    } else if (!c.program.target) {\n        // No target specified\n        if (activeDevices.length === 1) {\n            // One device present\n            return installAndLaunchApp(c, devices[0].name, appPath, tId);\n        }\n        if (activeDevices.length > 1) {\n            // More than one, choosing\n            const choices = buildDeviceChoices(devices);\n            const response = await inquirer.prompt([\n                {\n                    name: 'chosenDevice',\n                    type: 'list',\n                    message: 'What device would you like to start the app?',\n                    choices\n                }\n            ]);\n            if (response.chosenDevice) {\n                return installAndLaunchApp(\n                    c,\n                    response.chosenDevice,\n                    appPath,\n                    tId\n                );\n            }\n        } else {\n            await launchWebOSimulator(c);\n            await waitForEmulatorToBeReady(c);\n            return installAndLaunchApp(c, tSim, appPath, tId);\n        }\n    } else {\n        // Target specified, using that\n        return installAndLaunchApp(c, c.program.target, appPath, tId);\n    }\n};\n\nconst runWebOS = async (c) => {\n    const { hosted } = c.program;\n    const { target } = c.runtime;\n    const { platform } = c;\n\n\n    const isHosted = hosted && !getConfigProp(c, platform, 'bundleAssets');\n\n    if (isHosted) {\n        const isPortActive = await checkPortInUse(c, platform, c.runtime.port);\n        if (isPortActive) {\n            const resetCompleted = await confirmActiveBundler(c);\n            c.runtime.skipActiveServerCheck = !resetCompleted;\n        }\n    }\n\n    logTask('runWebOS', `target:${target} hosted:${!!isHosted}`);\n    if (isHosted) return;\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n    if (bundleAssets) {\n        await buildWeb(c);\n        await _runWebosSimOrDevice(c);\n    } else {\n        const isPortActive = await checkPortInUse(c, platform, c.runtime.port);\n        const isWeinreEnabled = REMOTE_DEBUGGER_ENABLED_PLATFORMS.includes(platform) && !bundleAssets && !hosted;\n\n        if (!isPortActive) {\n            logInfo(\n                `Your ${chalk().white(\n                    platform\n                )} devServer at port ${chalk().white(\n                    c.runtime.port\n                )} is not running. Starting it up for you...`\n            );\n            waitForWebpack(c)\n                .then(() => _runWebosSimOrDevice(c))\n                .catch(logError);\n            await runWebpackServer(c, isWeinreEnabled);\n        } else {\n            const resetCompleted = await confirmActiveBundler(c);\n            if (resetCompleted) {\n                waitForWebpack(c)\n                    .then(() => _runWebosSimOrDevice(c))\n                    .catch(logError);\n                await runWebpackServer(c, isWeinreEnabled);\n            } else {\n                await _runWebosSimOrDevice(c);\n            }\n        }\n    }\n};\n\nconst buildWebOSProject = async (c) => {\n    logTask('buildWebOSProject');\n\n    await buildWeb(c);\n\n    if (!c.program.hosted) {\n        const tDir = getPlatformProjectDir(c);\n        const tOut = path.join(getPlatformBuildDir(c), 'output');\n        await execCLI(c, CLI_WEBOS_ARES_PACKAGE, `-o ${tOut} ${tDir} -n`);\n\n        logSuccess(\n            `Your IPK package is located in ${chalk().cyan(tOut)} .`\n        );\n    }\n};\n\nconst configureWebOSProject = async (c) => {\n    logTask('configureWebOSProject');\n\n    const { platform } = c;\n\n    c.runtime.platformBuildsProjectPath = getPlatformProjectDir(c);\n\n    if (!isPlatformActive(c, platform)) return;\n\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n    await copyAssetsFolder(c, platform);\n    await configureCoreWebProject(c, bundleAssets ? RNV_PROJECT_DIR_NAME : RNV_SERVER_DIR_NAME);\n    await configureProject(c);\n    return copyBuildsFolder(c, platform);\n};\n\nconst configureProject = async (c) => {\n    logTask('configureProject');\n    const { platform } = c;\n\n    const configFile = 'appinfo.json';\n\n    const injects = [\n        {\n            pattern: '{{APPLICATION_ID}}',\n            override: getAppId(c, platform).toLowerCase()\n        },\n        {\n            pattern: '{{APP_TITLE}}',\n            override: getAppTitle(c, platform)\n        },\n        {\n            pattern: '{{APP_VERSION}}',\n            override: semver.coerce(getAppVersion(c, platform))\n        }\n    ];\n\n    addSystemInjects(c, injects);\n\n    writeCleanFile(\n        path.join(getTemplateProjectDir(c), configFile),\n        path.join(getPlatformProjectDir(c), configFile),\n        injects, null, c\n    );\n\n    return true;\n};\n\nexport {\n    launchWebOSimulator,\n    configureWebOSProject,\n    runWebOS,\n    buildWebOSProject,\n    listWebOSTargets\n};\n"],"file":"index.js"}