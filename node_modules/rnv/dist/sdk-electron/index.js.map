{"version":3,"sources":["../../src/sdk-electron/index.js"],"names":["configureElectronProject","c","platform","runtime","platformBuildsProjectPath","bundleAssets","MACOS","_generateICNS","RNV_PROJECT_DIR_NAME","RNV_SERVER_DIR_NAME","configureProject","merge","require","Promise","resolve","reject","platformProjectDir","platformBuildDir","templateFolder","electronConfigPath","path","join","packagePath","appId","white","then","catch","e","pkgJson","packageJson","name","productName","version","description","author","license","main","browserWindow","width","height","webPreferences","nodeIntegration","browserWindowExt","browserWindowStr","JSON","stringify","injects","pattern","override","localhost","port","macConfig","mac","entitlements","entitlementsInherit","hardenedRuntime","mas","provisioningProfile","electronConfig","directories","app","buildResources","output","files","electronConfigExt","buildElectron","exportElectron","buildPath","cyan","runElectron","_runElectronSimulator","isPortActive","logError","resetCompleted","elc","child","detached","env","process","stdio","on","code","exit","spawnError","unref","source","paths","appConfig","dirs","forEach","v","pf","dir","dest","p"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { spawn } from 'child_process';\nimport { createPlatformBuild, isPlatformActive } from '../core/platformManager';\nimport { executeAsync } from '../core/systemManager/exec';\nimport {\n    fsExistsSync,\n    mkdirSync,\n    writeFileSync,\n    readObjectSync,\n    removeDirs,\n    writeCleanFile\n} from '../core/systemManager/fileutils';\nimport {\n    // getAppFolder,\n    // getAppSubFolder,\n    getPlatformProjectDir,\n    // getPlatformBuildDir,\n    getTemplateProjectDir,\n    getPlatformBuildDir,\n    // getTemplateDir,\n    // getAppFolder,\n    getAppVersion,\n    getAppTitle,\n    getAppId,\n    // getAppTemplateFolder,\n    getAppDescription,\n    getAppAuthor,\n    getAppLicense,\n    getConfigProp,\n    checkPortInUse,\n    confirmActiveBundler,\n    addSystemInjects,\n} from '../core/common';\nimport { doResolve } from '../core/resolve';\nimport {\n    chalk,\n    logTask,\n    logError,\n    logWarning,\n    logSuccess,\n    logInfo,\n} from '../core/systemManager/logger';\nimport {\n    copyBuildsFolder,\n    copyAssetsFolder\n} from '../core/projectManager/projectParser';\nimport { MACOS,\n    RNV_PROJECT_DIR_NAME,\n    RNV_SERVER_DIR_NAME } from '../core/constants';\nimport { buildWeb, runWebpackServer, configureCoreWebProject, waitForWebpack } from '../sdk-webpack';\n\n\nexport const configureElectronProject = async (c) => {\n    logTask('configureElectronProject');\n\n    const { platform } = c;\n\n    c.runtime.platformBuildsProjectPath = `${getPlatformProjectDir(c)}`;\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n\n    await copyAssetsFolder(\n        c,\n        platform,\n        platform === MACOS ? _generateICNS : null\n    );\n\n    await configureCoreWebProject(c, bundleAssets ? RNV_PROJECT_DIR_NAME : RNV_SERVER_DIR_NAME);\n\n    await configureProject(c);\n    return copyBuildsFolder(c, platform);\n};\nconst merge = require('deepmerge');\n\nconst configureProject = c => new Promise((resolve, reject) => {\n    logTask('configureProject');\n    const { platform } = c;\n\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const platformProjectDir = getPlatformProjectDir(c);\n    const platformBuildDir = getPlatformBuildDir(c);\n    const templateFolder = getTemplateProjectDir(c);\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n    const electronConfigPath = path.join(platformBuildDir, 'electronConfig.json');\n    const packagePath = path.join(platformProjectDir, 'package.json');\n    const appId = getAppId(c, platform);\n\n    if (!fsExistsSync(packagePath)) {\n        logWarning(\n            `Your ${chalk().white(\n                platform\n            )} platformBuild is misconfigured!. let's repair it.`\n        );\n        createPlatformBuild(c, platform)\n            .then(() => configureElectronProject(c, platform))\n            .then(() => resolve(c))\n            .catch(e => reject(e));\n        return;\n    }\n\n    const pkgJson = path.join(templateFolder, 'package.json');\n    const packageJson = readObjectSync(pkgJson);\n\n    packageJson.name = `${c.runtime.appId}-${platform}`;\n    packageJson.productName = `${getAppTitle(c, platform)}`;\n    packageJson.version = `${getAppVersion(c, platform)}`;\n    packageJson.description = `${getAppDescription(c, platform)}`;\n    packageJson.author = getAppAuthor(c, platform);\n    packageJson.license = `${getAppLicense(c, platform)}`;\n    packageJson.main = './main.js';\n\n    writeFileSync(packagePath, packageJson);\n\n    let browserWindow = {\n        width: 1200,\n        height: 800,\n        webPreferences: { nodeIntegration: true }\n    };\n    const browserWindowExt = getConfigProp(c, platform, 'BrowserWindow');\n    if (browserWindowExt) {\n        browserWindow = merge(browserWindow, browserWindowExt);\n    }\n    const browserWindowStr = JSON.stringify(browserWindow, null, 2);\n\n\n    if (bundleAssets) {\n        const injects = [\n            {\n                pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}',\n                override: browserWindowStr\n            }\n        ];\n\n        addSystemInjects(c, injects);\n\n        writeCleanFile(\n            path.join(platformBuildDir, 'main.prod.js'),\n            path.join(platformProjectDir, 'main.js'),\n            injects, null, c\n        );\n    } else {\n        const injects = [\n            {\n                pattern: '{{DEV_SERVER}}',\n                override: `http://${c.runtime.localhost}:${c.runtime.port}`\n            },\n            {\n                pattern: '{{PLUGIN_INJECT_BROWSER_WINDOW}}',\n                override: browserWindowStr\n            }\n        ];\n\n        addSystemInjects(c, injects);\n\n        writeCleanFile(\n            path.join(platformBuildDir, 'main.dev.js'),\n            path.join(platformProjectDir, 'main.js'),\n            injects, null, c\n        );\n    }\n\n    const macConfig = {};\n    if (platform === MACOS) {\n        macConfig.mac = {\n            entitlements: path.join(platformProjectDir, 'entitlements.mac.plist'),\n            entitlementsInherit: path.join(\n                platformProjectDir,\n                'entitlements.mac.plist'\n            ),\n            hardenedRuntime: true\n        };\n        macConfig.mas = {\n            entitlements: path.join(platformProjectDir, 'entitlements.mas.plist'),\n            entitlementsInherit: path.join(\n                platformProjectDir,\n                'entitlements.mas.inherit.plist'\n            ),\n            provisioningProfile: path.join(\n                platformProjectDir,\n                'embedded.provisionprofile'\n            ),\n            hardenedRuntime: false\n        };\n    }\n\n    let electronConfig = merge(\n        {\n            appId,\n            directories: {\n                app: platformProjectDir,\n                buildResources: path.join(platformProjectDir, 'resources'),\n                output: path.join(platformBuildDir, 'build/release')\n            },\n            files: ['!build/release']\n        },\n        macConfig\n    );\n\n    const electronConfigExt = getConfigProp(c, platform, 'electronConfig');\n\n    if (electronConfigExt) {\n        electronConfig = merge(electronConfig, electronConfigExt);\n    }\n    writeFileSync(electronConfigPath, electronConfig);\n\n    resolve();\n});\n\nconst buildElectron = async (c) => {\n    logTask('buildElectron');\n\n    await buildWeb(c);\n    return true;\n};\n\nconst exportElectron = async (c) => {\n    logTask('exportElectron');\n\n    const platformBuildDir = platformBuildDir(c);\n    const buildPath = path.join(platformBuildDir, 'build');\n\n    if (fsExistsSync(buildPath)) {\n        logInfo(`exportElectron: removing old build ${buildPath}`);\n        await removeDirs([buildPath]);\n    }\n\n    await executeAsync(\n        c,\n        `npx electron-builder --config ${path.join(\n            platformBuildDir,\n            'electronConfig.json'\n        )}`\n    );\n\n    logSuccess(\n        `Your Exported App is located in ${chalk().cyan(\n            path.join(platformBuildDir, 'build/release')\n        )} .`\n    );\n};\n\nexport const runElectron = async (c) => {\n    logTask('runElectron');\n\n    const { platform } = c;\n    const { port } = c.runtime;\n\n    // const bundleIsDev = getConfigProp(c, platform, 'bundleIsDev') === true;\n    const bundleAssets = getConfigProp(c, platform, 'bundleAssets') === true;\n\n    if (bundleAssets) {\n        await buildElectron(c);\n        await _runElectronSimulator(c);\n    } else {\n        const isPortActive = await checkPortInUse(c, platform, port);\n        if (!isPortActive) {\n            logInfo(\n                `Your ${chalk().white(\n                    platform\n                )} devServer at port ${chalk().white(\n                    port\n                )} is not running. Starting it up for you...`\n            );\n            waitForWebpack(c)\n                .then(() => _runElectronSimulator(c))\n                .catch(logError);\n            // await _runElectronSimulator(c);\n            await runWebpackServer(c);\n        } else {\n            const resetCompleted = await confirmActiveBundler(c);\n            if (resetCompleted) {\n                waitForWebpack(c)\n                    .then(() => _runElectronSimulator(c))\n                    .catch(logError);\n                // await _runElectronSimulator(c);\n                await runWebpackServer(c);\n            } else {\n                await _runElectronSimulator(c);\n            }\n        }\n    }\n};\n\nconst _runElectronSimulator = async (c) => {\n    logTask(`_runElectronSimulator:${c.platform}`);\n    // const appFolder = getAppFolder(c, c.platform);\n    const elc = `${doResolve('electron')}/cli.js`;\n\n    const child = spawn('node', [elc, path.join(getPlatformProjectDir(c), '/main.js')], {\n        detached: true,\n        env: process.env,\n        stdio: 'inherit'\n    })\n        .on('close', code => process.exit(code))\n        .on('error', spawnError => logError(spawnError));\n\n    child.unref();\n};\n\nconst _generateICNS = c => new Promise((resolve, reject) => {\n    logTask('_generateICNS');\n    const { platform } = c;\n\n    let source;\n\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const pf = path.join(v, `assets/${platform}/AppIcon.iconset`);\n            if (fsExistsSync(pf)) {\n                source = pf;\n            }\n        });\n    } else if (c.paths.appConfig.dir) {\n        source = path.join(\n            c.paths.appConfig.dir,\n            `assets/${platform}/AppIcon.iconset`\n        );\n    }\n\n    const dest = path.join(\n        getPlatformProjectDir(c),\n        'resources/icon.icns'\n    );\n\n    if (!source) {\n        logWarning(\n            `You are missing AppIcon.iconset in ${chalk().white(\n                c.paths.appConfig.dir\n            )}. icon.icns will not be generated!`\n        );\n        resolve();\n        return;\n    }\n\n    if (!fsExistsSync(source)) {\n        logWarning(\n            `Your app config is missing ${chalk().white(\n                source\n            )}. icon.icns will not be generated!`\n        );\n        resolve();\n        return;\n    }\n\n    mkdirSync(path.join(getPlatformProjectDir(c), 'resources'));\n\n    const p = ['--convert', 'icns', source, '--output', dest];\n    try {\n        executeAsync(c, `iconutil ${p.join(' ')}`);\n        resolve();\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport {\n    buildElectron,\n    exportElectron\n};\n"],"file":"index.js"}