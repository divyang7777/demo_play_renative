{"version":3,"sources":["../../../src/core/platformManager/index.js"],"names":["logErrorPlatform","c","white","platform","command","updateProjectPlatforms","platforms","config","paths","project","currentConfig","files","defaults","supportedPlatforms","generatePlatformChoices","options","runtime","map","v","name","isConnected","green","yellow","value","cleanPlatformBuild","Promise","resolve","cleanTasks","Object","keys","buildConfig","forEach","k","isPlatformSupportedSync","pPath","path","join","builds","dir","appId","push","all","then","createPlatformBuild","reject","ptPath","platformTemplatesDirs","isPlatformSupported","platformsAsObj","SUPPORTED_PLATFORMS","opts","includes","type","message","choices","keysAsArray","logMessage","configuredPlatforms","Array","isArray","confirm","newPlatforms","Error","red","bold","isPlatformActive","appConfig","copySharedPlatforms"],"mappings":";;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;;;AAGO,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAO;AACnC;AACiB,oBAAQC,KAAR;AACTD,CAAC,CAACE,QADO,CADjB;AAGkC,oBAAQD,KAAR,CAAcD,CAAC,CAACG,OAAhB,CAHlC;AAII,IAJJ;;AAMA,MAAO,MAAP;AACH,CARM,C;;AAUA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACJ,CAAD,CAAIK,SAAJ,CAAkB;;AAErCC,MAFqC;AAGhDN,CAAC,CAACO,KAH8C,CAEhDC,OAFgD,CAErCF,MAFqC;AAIpD,GAAMG,CAAAA,aAAa,CAAGT,CAAC,CAACU,KAAF,CAAQF,OAAR,CAAgBF,MAAtC;AACAG,aAAa,CAACE,QAAd,CAAyBF,aAAa,CAACE,QAAd,EAA0B,EAAnD;AACAF,aAAa,CAACE,QAAd,CAAuBC,kBAAvB,CAA4CP,SAA5C;AACA,6BAAcC,MAAd,CAAsBG,aAAtB;AACH,CARM,C;;;AAWA,GAAMI,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACb,CAAD,CAAO;AAC1C,GAAMc,CAAAA,OAAO,CAAGd,CAAC,CAACe,OAAF,CAAUH,kBAAV,CAA6BI,GAA7B,CAAiC,SAAAC,CAAC,QAAK;AACnDC,IAAI,CAAKD,CAAC,CAACf,QAAP,QAAqBe,CAAC,CAACE,WAAF,CAAgB,oBAAQC,KAAR,CAAc,aAAd,CAAhB,CAA+C,oBAAQC,MAAR,CAAe,WAAf,CAApE,CAD+C;AAEnDC,KAAK,CAAEL,CAAC,CAACf,QAF0C;AAGnDiB,WAAW,CAAEF,CAAC,CAACE,WAHoC,CAAL,EAAlC,CAAhB;;AAKA,MAAOL,CAAAA,OAAP;AACH,CAPM,C;;AASA,GAAMS,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACvB,CAAD,CAAIE,QAAJ,QAAiB,IAAIsB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa;AACxE,oBAAQ,oBAAR;;AAEA,GAAMC,CAAAA,UAAU,CAAG,EAAnB;;AAEA,GAAIxB,QAAQ,GAAK,KAAjB,CAAwB;AACpByB,MAAM,CAACC,IAAP,CAAY5B,CAAC,CAAC6B,WAAF,CAAcxB,SAA1B,EAAqCyB,OAArC,CAA6C,SAACC,CAAD,CAAO;AAChD,GAAIC,uBAAuB,CAACD,CAAD,CAA3B,CAAgC;AAC5B,GAAME,CAAAA,KAAK,CAAGC,cAAKC,IAAL;AACVnC,CAAC,CAACO,KAAF,CAAQC,OAAR,CAAgB4B,MAAhB,CAAuBC,GADb;AAEPrC,CAAC,CAACe,OAAF,CAAUuB,KAFH,KAEYP,CAFZ,CAAd;;AAIAL,UAAU,CAACa,IAAX,CAAgB,2BAAYN,KAAZ,CAAhB;AACH;AACJ,CARD;AASH,CAVD,IAUO,IAAID,uBAAuB,CAAC9B,QAAD,CAA3B,CAAuC;AAC1C,GAAM+B,CAAAA,KAAK,CAAGC,cAAKC,IAAL;AACVnC,CAAC,CAACO,KAAF,CAAQC,OAAR,CAAgB4B,MAAhB,CAAuBC,GADb;AAEPrC,CAAC,CAACe,OAAF,CAAUuB,KAFH,KAEYpC,QAFZ,CAAd;;AAIAwB,UAAU,CAACa,IAAX,CAAgB,2BAAYN,KAAZ,CAAhB;AACH;;AAEDT,OAAO,CAACgB,GAAR,CAAYd,UAAZ,EAAwBe,IAAxB,CAA6B,UAAM;AAC/BhB,OAAO;AACV,CAFD;AAGH,CA1BkD,CAAjB,EAA3B,C;;AA4BA,GAAMiB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAC1C,CAAD,CAAIE,QAAJ,QAAiB,IAAIsB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUkB,MAAV,CAAqB;AACjF,oBAAQ,qBAAR;;AAEA,GAAI,CAACX,uBAAuB,CAAC9B,QAAD,CAAW,IAAX,CAAiByC,MAAjB,CAA5B,CAAsD;;AAEtD,GAAMV,CAAAA,KAAK,CAAGC,cAAKC,IAAL;AACVnC,CAAC,CAACO,KAAF,CAAQC,OAAR,CAAgB4B,MAAhB,CAAuBC,GADb;AAEPrC,CAAC,CAACe,OAAF,CAAUuB,KAFH,KAEYpC,QAFZ,CAAd;;AAIA,GAAM0C,CAAAA,MAAM,CAAGV,cAAKC,IAAL;AACXnC,CAAC,CAACO,KAAF,CAAQC,OAAR,CAAgBqC,qBAAhB,CAAsC3C,QAAtC,CADW;AAERA,QAFQ,CAAf;;;AAKA,+CAAgC0C,MAAhC,CAAwCX,KAAxC,CAA+C,KAA/C,CAAsD;AAClDC,cAAKC,IAAL,CAAUS,MAAV,CAAkB,gBAAlB,CADkD,CAAtD;AAEG,KAFH,CAEU,EAFV,CAEc,oCAAwB5C,CAAxB,CAA2BE,QAA3B,CAFd,CAEoDF,CAFpD;;AAIAyB,OAAO;AACV,CAnBmD,CAAjB,EAA5B,C;;AAqBA,GAAMqB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAO9C,CAAP;AAC/B,oBAAQ,qBAAR;AACI+C,cAF2B,CAEV/C,CAAC,CAAC6B,WAAF;AACf7B,CAAC,CAAC6B,WAAF,CAAcxB,SADC;AAEfL,CAAC,CAACY,kBAJuB;AAK/B,GAAI,CAACmC,cAAL,CAAqBA,cAAc,CAAGC,8BAAjB;AACfC,IANyB,CAMlB,4BAAgBF,cAAhB,CANkB;;;AAS3B,CAAC/C,CAAC,CAACE,QAAH;AACGF,CAAC,CAACE,QAAF,GAAe,IADlB;AAEG,CAAC8C,+BAAoBE,QAApB,CAA6BlD,CAAC,CAACE,QAA/B,CAXuB;;AAaA,2BAAe;AACtCgB,IAAI,CAAE,UADgC;AAEtCiC,IAAI,CAAE,MAFgC;AAGtCC,OAAO,CAAE,iCAH6B;AAItCC,OAAO,CAAEJ,IAAI,CAACK,WAJwB;AAKtCC,UAAU,CAAE,8BAL0B,CAAf,CAbA,6CAanBrD,QAbmB,uBAanBA,QAbmB;;;AAqB3BF,CAAC,CAACE,QAAF,CAAaA,QAAb,CArB2B;;;AAwBzBsD,mBAxByB,wBAwBHxD,CAAC,CAACU,KAAF,CAAQF,OAAR,CAAgBF,MAxBb,uCAwBH,sBAAwBK,QAxBrB,eAwBH,uBAAkCC,kBAxB/B;;AA0B3B6C,KAAK,CAACC,OAAN,CAAcF,mBAAd;AACG,CAACA,mBAAmB,CAACN,QAApB,CAA6BlD,CAAC,CAACE,QAA/B,CA3BuB;;AA6BD,2BAAe;AACrCiD,IAAI,CAAE,SAD+B;AAErCC,OAAO;AACHpD,CAAC,CAACE,QADC,kEAF8B,CAAf,CA7BC,+CA6BnByD,OA7BmB,wBA6BnBA,OA7BmB;;;;AAoCvBA,OApCuB;AAqCjBC,YArCiB,2CAqCEJ,mBArCF,GAqCuBxD,CAAC,CAACE,QArCzB;AAsCvBE,sBAAsB,CAACJ,CAAD,CAAI4D,YAAJ,CAAtB;AACA5D,CAAC,CAAC6B,WAAF,CAAclB,QAAd,CAAuBC,kBAAvB,CAA4CgD,YAA5C,CAvCuB;;;AA0CjB,GAAIC,CAAAA,KAAJ,CAAU,eAAV,CA1CiB;;;;;AA+CzB,sCAAsB7D,CAAtB,CA/CyB;AAgDxBA,CAAC,CAACE,QAhDsB,wEAA5B,C;;;AAmDA,GAAM8B,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAC9B,QAAD,CAAWuB,OAAX,CAAoBkB,MAApB,CAA+B;AAClE,GAAI,CAACzC,QAAL,CAAe;AACX,GAAIyC,MAAJ,CAAY;AACRA,MAAM;AACF,oBAAQmB,GAAR;AACuD,oBAAQ7D,KAAR,CAAc8D,IAAd;AAC/C,eAD+C,CADvD,8BADE,CAAN;;;;AAOH;AACD,MAAO,MAAP;AACH;AACD,GAAI,CAACf,+BAAoBE,QAApB,CAA6BhD,QAA7B,CAAL,CAA6C;AACzC,GAAIyC,MAAJ,CAAY;AACRA,MAAM;AACF,oBAAQmB,GAAR;AACgB5D,QADhB,iDACwE,oBAAQD,KAAR;AAChE+C,+BAAoBb,IAApB,CAAyB,IAAzB,CADgE,CADxE,MADE,CAAN;;;;AAOH;AACD,MAAO,MAAP;AACH;AACD,GAAIV,OAAJ,CAAaA,OAAO;AACpB,MAAO,KAAP;AACH,CA3BM,C;;AA6BA,GAAMuC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAChE,CAAD,CAAIE,QAAJ,CAAcuB,OAAd,CAA0B;AACtD,GAAI,CAACzB,CAAC,CAAC6B,WAAH,EAAkB,CAAC7B,CAAC,CAAC6B,WAAF,CAAcxB,SAArC,CAAgD;AAC5C;AAC4D,oBAAQJ,KAAR;AACpDD,CAAC,CAACO,KAAF,CAAQ0D,SAAR,CAAkB3D,MADkC,CAD5D;;;AAKA,GAAImB,OAAJ,CAAaA,OAAO;AACpB,MAAO,MAAP;AACH;AACD,GAAI,CAACzB,CAAC,CAAC6B,WAAF,CAAcxB,SAAd,CAAwBH,QAAxB,CAAL,CAAwC;AACpC;AACgBA,QADhB,wBAC+CF,CAAC,CAACe,OAAF,CAAUuB,KADzD;;AAGA,GAAIb,OAAJ,CAAaA,OAAO;AACpB,MAAO,MAAP;AACH;AACD,MAAO,KAAP;AACH,CAlBM,C;AAmBA,GAAMyC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAlE,CAAC,QAAI,IAAIwB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa;AAC7D,oBAAQ,qBAAR;;AAEA,GAAIzB,CAAC,CAACE,QAAN,CAAgB;AACZ;AACIgC,cAAKT,OAAL;AACIzB,CAAC,CAACO,KAAF,CAAQC,OAAR,CAAgBqC,qBAAhB,CAAsC7C,CAAC,CAACE,QAAxC,CADJ;AAEI,SAFJ,CADJ;;AAKI,gCAAoBF,CAApB,CALJ;;AAOH;;AAEDyB,OAAO;AACV,CAduC,CAAJ,EAA7B,C","sourcesContent":["/* eslint-disable import/no-cycle */\n// @todo fix cycle dep\nimport path from 'path';\nimport { chalk, logTask, logError, logWarning } from '../systemManager/logger';\nimport { generateOptions, inquirerPrompt } from '../../cli/prompt';\nimport {\n    cleanFolder,\n    copyFolderContentsRecursiveSync,\n    writeFileSync\n} from '../systemManager/fileutils';\nimport { SUPPORTED_PLATFORMS } from '../constants';\nimport { checkAndConfigureSdks } from '../sdkManager';\n// import { configureEntryPoints } from '../templateManager';\nimport { getTimestampPathsConfig, getPlatformBuildDir } from '../common';\n\n\nexport const logErrorPlatform = (c) => {\n    logError(\n        `Platform: ${chalk().white(\n            c.platform\n        )} doesn't support command: ${chalk().white(c.command)}`,\n        true // kill it if we're not supporting this\n    );\n    return false;\n};\n\nexport const updateProjectPlatforms = (c, platforms) => {\n    const {\n        project: { config }\n    } = c.paths;\n    const currentConfig = c.files.project.config;\n    currentConfig.defaults = currentConfig.defaults || {};\n    currentConfig.defaults.supportedPlatforms = platforms;\n    writeFileSync(config, currentConfig);\n};\n\n\nexport const generatePlatformChoices = (c) => {\n    const options = c.runtime.supportedPlatforms.map(v => ({\n        name: `${v.platform} - ${v.isConnected ? chalk().green('(connected)') : chalk().yellow('(ejected)')}`,\n        value: v.platform,\n        isConnected: v.isConnected\n    }));\n    return options;\n};\n\nexport const cleanPlatformBuild = (c, platform) => new Promise((resolve) => {\n    logTask('cleanPlatformBuild');\n\n    const cleanTasks = [];\n\n    if (platform === 'all') {\n        Object.keys(c.buildConfig.platforms).forEach((k) => {\n            if (isPlatformSupportedSync(k)) {\n                const pPath = path.join(\n                    c.paths.project.builds.dir,\n                    `${c.runtime.appId}_${k}`\n                );\n                cleanTasks.push(cleanFolder(pPath));\n            }\n        });\n    } else if (isPlatformSupportedSync(platform)) {\n        const pPath = path.join(\n            c.paths.project.builds.dir,\n            `${c.runtime.appId}_${platform}`\n        );\n        cleanTasks.push(cleanFolder(pPath));\n    }\n\n    Promise.all(cleanTasks).then(() => {\n        resolve();\n    });\n});\n\nexport const createPlatformBuild = (c, platform) => new Promise((resolve, reject) => {\n    logTask('createPlatformBuild');\n\n    if (!isPlatformSupportedSync(platform, null, reject)) return;\n\n    const pPath = path.join(\n        c.paths.project.builds.dir,\n        `${c.runtime.appId}_${platform}`\n    );\n    const ptPath = path.join(\n        c.paths.project.platformTemplatesDirs[platform],\n        `${platform}`\n    );\n\n    copyFolderContentsRecursiveSync(ptPath, pPath, false, [\n        path.join(ptPath, '_privateConfig')\n    ], false, {}, getTimestampPathsConfig(c, platform), c);\n\n    resolve();\n});\n\nexport const isPlatformSupported = async (c) => {\n    logTask('isPlatformSupported');\n    let platformsAsObj = c.buildConfig\n        ? c.buildConfig.platforms\n        : c.supportedPlatforms;\n    if (!platformsAsObj) platformsAsObj = SUPPORTED_PLATFORMS;\n    const opts = generateOptions(platformsAsObj);\n\n    if (\n        !c.platform\n        || c.platform === true\n        || !SUPPORTED_PLATFORMS.includes(c.platform)\n    ) {\n        const { platform } = await inquirerPrompt({\n            name: 'platform',\n            type: 'list',\n            message: 'Pick one of available platforms',\n            choices: opts.keysAsArray,\n            logMessage: 'You need to specify platform'\n        });\n\n        c.platform = platform;\n    }\n\n    const configuredPlatforms = c.files.project.config?.defaults?.supportedPlatforms;\n    if (\n        Array.isArray(configuredPlatforms)\n        && !configuredPlatforms.includes(c.platform)\n    ) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `Platform ${\n                c.platform\n            } is not supported by your project. Would you like to enable it?`\n        });\n\n        if (confirm) {\n            const newPlatforms = [...configuredPlatforms, c.platform];\n            updateProjectPlatforms(c, newPlatforms);\n            c.buildConfig.defaults.supportedPlatforms = newPlatforms;\n            // await configureEntryPoints(c);\n        } else {\n            throw new Error('User canceled');\n        }\n    }\n\n    // Check global SDKs\n    await checkAndConfigureSdks(c);\n    return c.platform;\n};\n\nexport const isPlatformSupportedSync = (platform, resolve, reject) => {\n    if (!platform) {\n        if (reject) {\n            reject(\n                chalk().red(\n                    `You didn't specify platform. make sure you add \"${chalk().white.bold(\n                        '-p <PLATFORM>'\n                    )}\" option to your command!`\n                )\n            );\n        }\n        return false;\n    }\n    if (!SUPPORTED_PLATFORMS.includes(platform)) {\n        if (reject) {\n            reject(\n                chalk().red(\n                    `Platform ${platform} is not supported. Use one of the following: ${chalk().white(\n                        SUPPORTED_PLATFORMS.join(', ')\n                    )} .`\n                )\n            );\n        }\n        return false;\n    }\n    if (resolve) resolve();\n    return true;\n};\n\nexport const isPlatformActive = (c, platform, resolve) => {\n    if (!c.buildConfig || !c.buildConfig.platforms) {\n        logError(\n            `Your appConfigFile is not configured properly! check ${chalk().white(\n                c.paths.appConfig.config\n            )} location.`\n        );\n        if (resolve) resolve();\n        return false;\n    }\n    if (!c.buildConfig.platforms[platform]) {\n        logWarning(\n            `Platform ${platform} not configured for ${c.runtime.appId}. skipping.`\n        );\n        if (resolve) resolve();\n        return false;\n    }\n    return true;\n};\nexport const copySharedPlatforms = c => new Promise((resolve) => {\n    logTask('copySharedPlatforms');\n\n    if (c.platform) {\n        copyFolderContentsRecursiveSync(\n            path.resolve(\n                c.paths.project.platformTemplatesDirs[c.platform],\n                '_shared'\n            ),\n            getPlatformBuildDir(c)\n        );\n    }\n\n    resolve();\n});\n"],"file":"index.js"}