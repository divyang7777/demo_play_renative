{"version":3,"sources":["../../../src/core/setupManager/index.js"],"names":["_c","c","Config","getConfig","platform","process","LinuxPlatformSetup","WindowsPlatformSetup","DarwinPlatformSetup","Error"],"mappings":"mKAAA;AACA;AACA;AACA,uE;;AAEe,kBAACA,EAAD,CAAQ;AACnB,GAAIC,CAAAA,CAAC,CAAGD,EAAR;AACA,GAAI,CAACC,CAAL,CAAQA,CAAC,CAAGC,gBAAOC,SAAP,EAAJ,CAFW;;;AAKfF,CALe,CAIJG,QAJI,KAIfC,OAJe,CAIJD,QAJI;AAMnB,GAAIA,QAAQ,GAAK,OAAjB,CAA0B,MAAO,IAAIE,eAAJ,CAAuBL,CAAvB,CAAP;AAC1B,GAAIG,QAAQ,GAAK,OAAjB,CAA0B,MAAO,IAAIG,iBAAJ,CAAyBN,CAAzB,CAAP;AAC1B,GAAIG,QAAQ,GAAK,QAAjB,CAA2B,MAAO,IAAII,gBAAJ,EAAP;;;AAG3B,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CAAN;AACH,C","sourcesContent":["import LinuxPlatformSetup from './linux';\nimport WindowsPlatformSetup from './windows';\nimport DarwinPlatformSetup from './darwin';\nimport Config from '../configManager/config';\n\nexport default (_c) => {\n    let c = _c;\n    if (!c) c = Config.getConfig();\n    const {\n        process: { platform }\n    } = c;\n    if (platform === 'linux') return new LinuxPlatformSetup(c);\n    if (platform === 'win32') return new WindowsPlatformSetup(c);\n    if (platform === 'darwin') return new DarwinPlatformSetup();\n    // @todo add support for more\n\n    throw new Error('Platform unsupported for automated SDK setup');\n};\n"],"file":"index.js"}