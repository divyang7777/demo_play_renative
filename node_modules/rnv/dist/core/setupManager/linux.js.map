{"version":3,"sources":["../../../src/core/setupManager/linux.js"],"names":["LinuxPlatformSetup","c","software","shell","exec","availableDownloader","installSoftware","sdk","location","setupConfig","android","globalConfigPath","JSON","stringify","androidSdk","files","workspace","config","sdks","ANDROID_SDK","cli","CLI_ANDROID_EMULATOR","path","join","CLI_ANDROID_ADB","CLI_ANDROID_AVDMANAGER","CLI_ANDROID_SDKMANAGER","BasePlatformSetup"],"mappings":"4sBAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;AAOMA,kB;AACF,4BAAYC,CAAZ,CAAe;AACL,OADK,CACIA,CADJ;AAEd,C;;AAEqBC,Q;AACd,4BAAkB,SAAlB,C;AACMC,iBAAMC,IAAN;AACuCF,QADvC,mB;;;;AAKH,I;;;;AAIF,KAAKG,mB;AACN;AACI,mEADJ,E;;AAGM,KAAKC,eAAL,CAAqB,MAArB,C;AACN,KAAKD,mBAAL,CAA2B,MAA3B,C;;;AAGC,4BAAkB,OAAlB,C;AACD;AACI,0DADJ,E;;AAGM,KAAKC,eAAL,CAAqB,OAArB,C;;;AAGL,4BAAkB,OAAlB,C;AACD;AACI,yDADJ,E;;AAGM,KAAKA,eAAL,CAAqB,eAArB,C;;;AAGH,I;;;AAGOC,G;AACVA,GAAG,GAAK,S;AACAC,Q,CAAaC,gBAAYC,O,CAAzBF,Q;AACR;AACgB,KAAKG,gBADrB,UAC8CC,IAAI,CAACC,SAAL,CAAe;AACrDC,UAAU,CAAEN,QADyC,CAAf,CAD9C,E;;;AAKM;AACF,CAAEM,UAAU,CAAEN,QAAd,CADE;AAEF,KAAKG,gBAFH,C;;;AAKN,KAAKV,CAAL,CAAOc,KAAP,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BC,IAA9B,CAAmCC,WAAnC,CAAiDX,QAAjD;;AAEYW,W;AACR,KAAKlB,CAAL,CAAOc,KAAP,CAAaC,SAAb,CAAuBC,M,CADvBC,I,CAAQC,W;AAEZ,KAAKlB,CAAL,CAAOmB,GAAP,CAAWC,+BAAX,EAAmC;AAC/B,KAAKpB,CAD0B;AAE/BqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,mBAAvB,CAF+B,CAAnC;;AAIA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWI,0BAAX,EAA8B;AAC1B,KAAKvB,CADqB;AAE1BqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,oBAAvB,CAF0B,CAA9B;;AAIA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWK,iCAAX,EAAqC;AACjC,KAAKxB,CAD4B;AAEjCqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,sBAAvB,CAFiC,CAArC;;AAIA,KAAKlB,CAAL,CAAOmB,GAAP,CAAWM,iCAAX,EAAqC;AACjC,KAAKzB,CAD4B;AAEjCqB,cAAKC,IAAL,CAAUJ,WAAV,CAAuB,sBAAvB,CAFiC,CAArC,C,uGAtEqBQ,a;;;;;;AA8ElB3B,kB","sourcesContent":["import shell from 'shelljs';\nimport path from 'path';\n\nimport { commandExistsSync } from '../systemManager/exec';\nimport { logInfo, logDebug } from '../systemManager/logger';\nimport BasePlatformSetup from './base';\nimport { updateConfigFile, getRealPath } from '../systemManager/fileutils';\nimport setupConfig from './config';\nimport {\n    CLI_ANDROID_ADB,\n    CLI_ANDROID_AVDMANAGER,\n    CLI_ANDROID_EMULATOR,\n    CLI_ANDROID_SDKMANAGER\n} from '../constants';\n\nclass LinuxPlatformSetup extends BasePlatformSetup {\n    constructor(c) {\n        super('linux', c);\n    }\n\n    async installSoftware(software) {\n        if (commandExistsSync('apt-get')) {\n            await shell.exec(\n                `apt-get -qq update && apt-get install ${software} -y > /dev/null`\n            );\n        }\n        // @todo also treat other linux flavours\n        return true;\n    }\n\n    async installPrereqs() {\n        if (!this.availableDownloader) {\n            logInfo(\n                \"You don't have wget or curl installed. We'll install wget for you\"\n            );\n            await this.installSoftware('wget');\n            this.availableDownloader = 'wget';\n        }\n\n        if (!commandExistsSync('unzip')) {\n            logInfo(\n                \"You don't have unzip installed. We'll install it for you\"\n            );\n            await this.installSoftware('unzip');\n        }\n\n        if (!commandExistsSync('javac')) {\n            logInfo(\n                \"You don't have java installed. We'll install it for you\"\n            );\n            await this.installSoftware('openjdk-8-jdk');\n        }\n\n        return true;\n    }\n\n    async postInstall(sdk) {\n        if (sdk === 'android') {\n            const { location } = setupConfig.android;\n            logDebug(\n                `Updating ${this.globalConfigPath} with ${JSON.stringify({\n                    androidSdk: location\n                })}`\n            );\n            await updateConfigFile(\n                { androidSdk: location },\n                this.globalConfigPath\n            );\n            // @todo find a more elegant way to update this\n            this.c.files.workspace.config.sdks.ANDROID_SDK = location;\n            const {\n                sdks: { ANDROID_SDK }\n            } = this.c.files.workspace.config;\n            this.c.cli[CLI_ANDROID_EMULATOR] = getRealPath(\n                this.c,\n                path.join(ANDROID_SDK, 'emulator/emulator')\n            );\n            this.c.cli[CLI_ANDROID_ADB] = getRealPath(\n                this.c,\n                path.join(ANDROID_SDK, 'platform-tools/adb')\n            );\n            this.c.cli[CLI_ANDROID_AVDMANAGER] = getRealPath(\n                this.c,\n                path.join(ANDROID_SDK, 'tools/bin/avdmanager')\n            );\n            this.c.cli[CLI_ANDROID_SDKMANAGER] = getRealPath(\n                this.c,\n                path.join(ANDROID_SDK, 'tools/bin/sdkmanager')\n            );\n        }\n    }\n}\n\nexport default LinuxPlatformSetup;\n"],"file":"linux.js"}