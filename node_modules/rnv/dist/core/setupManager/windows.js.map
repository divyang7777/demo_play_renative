{"version":3,"sources":["../../../src/core/setupManager/windows.js"],"names":["LinuxPlatformSetup","c","scoopInstalled","os","availableDownloader","software","shell","exec","reloadPathEnv","bucket","installSoftware","addScoopBucket","androidSdkLocation","sdksToInstall","downloadDir","setupConfig","tizen","downloadLocation","split","pop","join","inquirer","prompt","type","name","message","default","validate","value","res","path","sdkPath","tizenSdkPath","downloadLink","webos","openCommand","webosSdkPath","BasePlatformSetup"],"mappings":"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","sourcesContent":["import shell from 'shelljs';\nimport { getInstalledPathSync } from 'get-installed-path';\nimport path from 'path';\nimport { exec } from 'child_process';\nimport inquirer from 'inquirer';\n\nimport {\n    commandExistsSync,\n    executeAsync,\n    openCommand\n} from '../systemManager/exec';\nimport { logInfo, logDebug } from '../systemManager/logger';\nimport { replaceHomeFolder, fsExistsSync } from '../systemManager/fileutils';\nimport BasePlatformSetup from './base';\nimport setupConfig from './config';\n\nclass LinuxPlatformSetup extends BasePlatformSetup {\n    constructor(c) {\n        super('win32', c);\n        this.scoopInstalled = false;\n    }\n\n    checkPrereqs() {\n        logInfo(`Platform ${this.os}`);\n        logInfo('Checking wget is installed');\n        if (commandExistsSync('wget')) {\n            this.availableDownloader = 'wget';\n        }\n\n        // check if scoop is installed\n        if (commandExistsSync('scoop')) {\n            this.scoopInstalled = true;\n        }\n    }\n\n    async installSoftware(software) {\n        await shell.exec(\n            replaceHomeFolder(`~/scoop/shims/scoop install ${software}`)\n        );\n        await this.reloadPathEnv();\n        return true;\n    }\n\n    addScoopBucket(bucket) {\n        return shell.exec(\n            replaceHomeFolder(`~/scoop/shims/scoop bucket add ${bucket}`)\n        );\n    }\n\n    async reloadPathEnv() {\n        await shell.exec(\n            `${getInstalledPathSync('rnv')}/scripts/resetPath.vbs`\n        );\n        await shell.exec('%TEMP%/resetvars.bat');\n        return true;\n    }\n\n    async installPrereqs() {\n        if (!this.scoopInstalled) {\n            logInfo('Installing Scoop...');\n            await shell.exec(\n                `powershell -executionpolicy remotesigned \"& \"\"${getInstalledPathSync(\n                    'rnv'\n                )}/scripts/installPackageManager.ps1\"\"\"`\n            );\n            await this.reloadPathEnv();\n        }\n        if (!this.availableDownloader) {\n            logInfo(\n                \"You don't have wget or curl installed. We'll install wget for you\"\n            );\n            await this.installSoftware('wget');\n            this.availableDownloader = 'wget';\n        }\n\n        if (!commandExistsSync('unzip')) {\n            logInfo(\n                \"You don't have unzip installed. We'll install it for you\"\n            );\n            await this.installSoftware('unzip');\n        }\n\n        if (!commandExistsSync('javac')) {\n            logInfo(\n                \"You don't have java installed. We'll install it for you\"\n            );\n            await this.installSoftware('shellcheck');\n            await this.addScoopBucket('java');\n            await this.installSoftware('ojdkbuild8');\n        }\n\n        return true;\n    }\n\n    async installSdksAndEmulator() {\n        logDebug('Accepting licenses');\n        await executeAsync(\n            {},\n            `${this.androidSdkLocation}/tools/bin/sdkmanager.bat --licenses`\n        );\n        logDebug('Installing SDKs', this.sdksToInstall);\n        await executeAsync(\n            {},\n            `${this.androidSdkLocation}/tools/bin/sdkmanager.bat ${this.sdksToInstall}`\n        );\n    }\n\n    async installTizenSdk() {\n        let downloadDir = setupConfig.tizen.downloadLocation.split('/');\n        downloadDir.pop();\n        downloadDir = downloadDir.join('/');\n        logInfo(\n            `Opening ${downloadDir}. Please install the SDK then continue after it finished installing.`\n        );\n        exec(`start \"\" \"${downloadDir}\"`);\n\n        const res = await inquirer.prompt({\n            type: 'input',\n            name: 'sdkPath',\n            message:\n                \"Where did you install the SDK? (if you haven't changed the default just press enter)\",\n            default: 'C:\\\\tizen-studio',\n            validate(value) {\n                if (fsExistsSync(value)) return true;\n                return 'Path does not exist';\n            }\n        });\n\n        await inquirer.prompt({\n            type: 'confirm',\n            name: 'toolsInstalled',\n            message:\n                'Please open Package Manager and install: Tizen SDK Tools (Main SDK), TV Extensions-* (Extension SDK). Continue after you finished installing them.',\n            validate() {\n                return (\n                    fsExistsSync(\n                        path.join(res.sdkPath, 'tools/ide/bin/tizen.bat')\n                    ) || 'This does not look like a Tizen SDK path'\n                );\n            }\n        });\n\n        this.tizenSdkPath = res.sdkPath;\n    }\n\n    async installWebosSdk() {\n        const { downloadLink } = setupConfig.webos;\n        logInfo(\n            `Opening ${\n                downloadLink\n            }. Please download and install the SDK then continue after it finished installing.\nMake sure you also install the CLI and Emulator components`\n        );\n        exec(`${openCommand} ${downloadLink}`);\n        const res = await inquirer.prompt({\n            type: 'input',\n            name: 'sdkPath',\n            message:\n                \"Where did you install the SDK? (if you haven't changed the default just press enter)\",\n            default: 'C:\\\\webOS_TV_SDK',\n            validate(value) {\n                if (fsExistsSync(value)) return true;\n                return 'Path does not exist';\n            }\n        });\n\n        await inquirer.prompt({\n            type: 'confirm',\n            name: 'toolsInstalled',\n            message: 'Are the CLI and Emulator components installed?',\n            validate() {\n                return (\n                    fsExistsSync(\n                        path.join(res.sdkPath, 'tools/ide/bin/tizen.bat')\n                    ) || 'This does not look like a Tizen SDK path'\n                );\n            }\n        });\n\n        this.webosSdkPath = res.sdkPath;\n    }\n}\n\nexport default LinuxPlatformSetup;\n"],"file":"windows.js"}