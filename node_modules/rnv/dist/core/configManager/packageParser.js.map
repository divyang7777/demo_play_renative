{"version":3,"sources":["../../../src/core/configManager/packageParser.js"],"names":["injectProjectDependency","c","dependency","version","type","skipInstall","currentPackage","files","project","package","existingPath","paths","checkRequiredPackage","pkg","skipAsking","skipVersionCheck","projectConfig","confirm","message","resp","latestVersion","currentVersion","updateAvailable","semver","lt","e","injectPlatformDependencies","platform","selectedEngine","npmDepsBase","npm","npmDepsExt","platforms","npmDeps","promises","Object","keys","reduce","acc","forEach","dep","push","Promise","all","installed","some","i","white","id"],"mappings":"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","sourcesContent":["import semver from 'semver';\nimport merge from 'deepmerge';\n\nimport { executeAsync } from '../systemManager/exec';\nimport { installPackageDependencies } from '../systemManager/npmUtils';\nimport { chalk, logInfo, logDebug, logTask } from '../systemManager/logger';\nimport { inquirerPrompt } from '../../cli/prompt';\nimport { getEngineByPlatform } from '../engineManager';\nimport { writeRenativeConfigFile } from './configParser';\nimport { overrideTemplatePlugins } from '../pluginManager';\n\n\nconst injectProjectDependency = async (c,\n    dependency,\n    version,\n    type,\n    skipInstall = false\n) => {\n    logTask('injectProjectDependency');\n\n    const currentPackage = c.files.project.package;\n    const existingPath = c.paths.project.package;\n    if (!currentPackage[type]) currentPackage[type] = {};\n    currentPackage[type][dependency] = version;\n    writeRenativeConfigFile(c, existingPath, currentPackage);\n    if (!skipInstall) {\n        await installPackageDependencies(c);\n        await overrideTemplatePlugins(c);\n    }\n    return true;\n};\n\nexport const checkRequiredPackage = async (c, pkg, version = false, type, skipAsking = false,\n    skipInstall = false, skipVersionCheck = false) => {\n    logDebug('checkRequiredPackage');\n    if (!pkg) return false;\n    const projectConfig = c.files.project;\n\n    if (!projectConfig.package[type]?.[pkg]) {\n        // package does not exist, adding it\n        let confirm = skipAsking;\n        if (!confirm) {\n            const resp = await inquirerPrompt({\n                type: 'confirm',\n                message: `You do not have ${pkg} installed. Do you want to add it now?`\n            });\n            // eslint-disable-next-line prefer-destructuring\n            confirm = resp.confirm;\n        }\n\n        if (confirm) {\n            let latestVersion = 'latest';\n            if (!version && !skipVersionCheck) {\n                try {\n                    latestVersion = await executeAsync(\n                        `npm show ${pkg} version`\n                    );\n                    // eslint-disable-next-line no-empty\n                } catch (e) {}\n            }\n            return injectProjectDependency(c,\n                pkg,\n                version || latestVersion,\n                type,\n                skipInstall);\n        }\n    } else if (!version) {\n        // package exists, checking version only if version is not\n        const currentVersion = projectConfig.package[type][pkg];\n        let latestVersion = false;\n        try {\n            latestVersion = await executeAsync(`npm show ${pkg} version`);\n            // eslint-disable-next-line no-empty\n        } catch (e) {}\n        if (latestVersion) {\n            let updateAvailable = false;\n\n            try {\n                // semver might fail if you have a path instead of a version (like when you are developing)\n                updateAvailable = semver.lt(currentVersion, latestVersion);\n                // eslint-disable-next-line no-empty\n            } catch (e) {}\n\n            if (updateAvailable) {\n                let confirm = skipAsking;\n                if (!confirm) {\n                    const resp = await inquirerPrompt({\n                        type: 'confirm',\n                        message: `Seems like ${pkg}@${\n                            currentVersion\n                        } is installed while there is a newer version, ${\n                            pkg\n                        }@${latestVersion}. Do you want to upgrade?`\n                    });\n                    // eslint-disable-next-line prefer-destructuring\n                    confirm = resp.confirm;\n                }\n\n                if (confirm) {\n                    return injectProjectDependency(c,\n                        pkg,\n                        latestVersion,\n                        type,\n                        skipInstall);\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\n\nexport const injectPlatformDependencies = async (c) => {\n    logTask('injectPlatformDependencies');\n    const { platform } = c;\n    const selectedEngine = getEngineByPlatform(c, platform);\n    const npmDepsBase = selectedEngine?.npm || {};\n    const npmDepsExt = selectedEngine?.platforms[platform]?.npm || {};\n\n    const npmDeps = merge(npmDepsBase, npmDepsExt);\n\n    if (npmDeps) {\n        const promises = Object.keys(npmDeps).reduce((acc, type) => {\n            // iterate over dependencies, devDepencencies or optionalDependencies\n            Object.keys(npmDeps[type]).forEach((dep) => {\n                // iterate over deps\n                acc.push(\n                    checkRequiredPackage(c,\n                        dep,\n                        npmDeps[type][dep],\n                        type,\n                        true,\n                        true)\n                );\n            });\n            return acc;\n        }, []);\n\n        const installed = await Promise.all(promises);\n\n        if (installed.some(i => i === true)) {\n            // do npm i only if something new is added\n            logInfo(`Found extra npm dependencies required by ${\n                chalk().white(selectedEngine.id)\n            } engine. ADDING...DONE`);\n            await installPackageDependencies(c);\n            await overrideTemplatePlugins(c);\n        }\n    }\n\n    // add other deps that are not npm\n};\n"],"file":"packageParser.js"}