var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.SCHEMAS=exports.schemaRoot=exports.schemaPlatforms=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}

var commonProps={
excludedPlugins:{
type:'array',
items:{type:'string'}},

includedPlugins:{
type:'array',
items:{type:'string'}},

includedPermissions:{
type:'array',
items:{type:'string'}},

id:{
type:'string'},

title:{
type:'string'},

description:{
type:'string'},

author:{
additionalProperties:true,
type:'object'},

includedFonts:{
type:'array',
items:{type:'string'}},

backgroundColor:{
type:'string'},

splashScreen:{
type:'boolean'},

ignoreWarnings:{
type:'boolean'},

ignoreLogs:{
type:'boolean'}};



var commonPlatformProps=_objectSpread(_objectSpread({},
commonProps),{},{
engine:{
type:'string'},

entryFile:{
type:'string'},

bundleAssets:{
type:'boolean'},

bundleIsDev:{
type:'boolean'}});



var androidPlatformProps={
enableAndroidX:{
type:'boolean'},

enableHermes:{
type:'boolean'},

signingConfig:{
type:'string'},

minSdkVersion:{
type:'integer'},

multipleAPKs:{
type:'boolean'},

targetSdkVersion:{
type:'integer'},

compileSdkVersion:{
type:'integer'},

'gradle.properties':{
additionalProperties:true,
type:'object'},

AndroidManifest:{
additionalProperties:true,
type:'object'},

applyPlugin:{
type:'array'},

excludedFeatures:{
type:'array'},

includedFeatures:{
type:'array'}};



var iosPlatformProps={
deploymentTarget:{
type:'string'},

teamID:{
type:'string'},

teamIdentifier:{
type:'string'},

scheme:{
type:'string'},

Podfile:{
additionalProperties:true,
type:'object'},

plist:{
additionalProperties:true,
type:'object'},

appleId:{
type:'string'},

orientationSupport:{
type:'object',
properties:{
phone:{
type:'array'},

tab:{
type:'array'}}},



provisioningStyle:{
type:'string'},

systemCapabilities:{
additionalProperties:true,
type:'object'},

entitlements:{
additionalProperties:true,
type:'object'},

runScheme:{
type:'string'},

testFlightId:{
type:'string'},

exportOptions:{
type:'object',
additionalProperties:false,
properties:{
method:{
type:'string'},

teamID:{
type:'string'},

uploadBitcode:{
type:'boolean'},

compileBitcode:{
type:'boolean'},

uploadSymbols:{
type:'boolean'},

signingStyle:{
type:'string'},

signingCertificate:{
type:'string'}}}};





var webPlatformProps={
pagesDir:{
type:'string'},

webpackConfig:{
additionalProperties:true,
type:'object'}};



var tizenPlatformProps={};



var webosPlatformProps={};



var firefoxPlatformProps={};



var macosPlatformProps={
appleId:{
type:'string'}};



var winPlatformProps={};



var buildSchemeProps={
buildSchemes:{
additionalProperties:{
type:'object',
additionalProperties:false,
properties:_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},
commonPlatformProps),
androidPlatformProps),
iosPlatformProps),
webosPlatformProps),
tizenPlatformProps),
firefoxPlatformProps)},


type:'object'}};



var schemaPlatforms={
$id:'http://renative.org/schemas/platforms.json',
required:[
'id'],

definitions:{
android:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread(_objectSpread({},
commonPlatformProps),
buildSchemeProps),
androidPlatformProps)},


ios:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread(_objectSpread({},
commonPlatformProps),
buildSchemeProps),
iosPlatformProps)},


tizen:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
tizenPlatformProps)},


webos:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
webosPlatformProps)},


web:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
webPlatformProps)},


firefox:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
firefoxPlatformProps)},


macos:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
macosPlatformProps)},


windows:{
additionalProperties:false,
type:'object',
properties:_objectSpread(_objectSpread({},
commonPlatformProps),
winPlatformProps)}}};exports.schemaPlatforms=schemaPlatforms;






var schemaRoot={
$id:'http://renative.org/schemas/renative.json',
type:'object',
additionalProperties:false,
properties:{
common:{
additionalProperties:false,
description:'Common config props used as default',
type:'object',
properties:_objectSpread(_objectSpread({},
commonProps),
buildSchemeProps)},


platforms:{
additionalProperties:false,
type:'object',
properties:{
ios:{
$ref:'platforms.json#/definitions/ios'},

android:{
$ref:'platforms.json#/definitions/android'},

web:{
$ref:'platforms.json#/definitions/web'},

tvos:{
$ref:'platforms.json#/definitions/ios'},

androidtv:{
$ref:'platforms.json#/definitions/android'},

webos:{
$ref:'platforms.json#/definitions/webos'},

macos:{
$ref:'platforms.json#/definitions/macos'},

tizen:{
$ref:'platforms.json#/definitions/tizen'},

windows:{
$ref:'platforms.json#/definitions/macos'},

firefoxtv:{
$ref:'platforms.json#/definitions/firefox'},

firefoxos:{
$ref:'platforms.json#/definitions/firefox'},

tizenmobile:{
$ref:'platforms.json#/definitions/tizen'},

tizenwatch:{
$ref:'platforms.json#/definitions/tizen'},

androidwear:{
$ref:'platforms.json#/definitions/android'},

kaios:{
$ref:'platforms.json#/definitions/firefox'}}},



sdks:{
additionalProperties:true,
type:'object'},

env:{
additionalProperties:true,
type:'object'},

defaultTargets:{
additionalProperties:true,
type:'object'},

plugins:{
additionalProperties:true,
type:'object'},

projectName:{
type:'string'},

name:{
type:'string'},

extend:{
type:'string'},

projectTemplates:{
additionalProperties:true,
type:'object'},

permissions:{
additionalProperties:true,
type:'object'},

workspaceID:{
type:'string'},

version:{
type:'string'},

description:{
type:'string'},

id:{
type:'string'},

isWrapper:{
type:'boolean'},

enableAnalytics:{
type:'boolean'},

paths:{
additionalProperties:false,
type:'object',
properties:{
appConfigsDir:{
type:'string'},

entryDir:{
type:'string'},

platformAssetsDir:{
type:'string'},

platformBuildsDir:{
type:'string'},

projectConfigDir:{
type:'string'},

pluginTemplates:{
additionalProperties:true,
type:'object'}}},



tasks:{
additionalProperties:true,
type:'object'},

pipes:{
type:'array'},

defaults:{
additionalProperties:true,
type:'object'},

pluginTemplates:{
additionalProperties:true,
type:'object'},

templates:{
additionalProperties:true,
type:'object'},

currentTemplate:{
type:'string'},

crypto:{
additionalProperties:true,
type:'object'},

integrations:{
additionalProperties:true,
type:'object'},

publish:{
additionalProperties:true,
type:'object'},

runtime:{
additionalProperties:true,
type:'object'},

hidden:{
type:'boolean'}}};exports.schemaRoot=schemaRoot;




var SCHEMAS=[schemaRoot,schemaPlatforms];exports.SCHEMAS=SCHEMAS;
//# sourceMappingURL=schema.js.map