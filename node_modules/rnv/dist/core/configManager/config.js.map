{"version":3,"sources":["../../../src/core/configManager/config.js"],"names":["Config","config","c","key","global","paths","project","cfg","require","GLOBAL_RNV_CONFIG","value","configSchema","undefined","buildConfig","default","localVal","getConfigValueSeparate","toString","globalVal","table","Key","keySchema","values","includes","join","program","isConfigValueValid","isValid","configPath","getMergedConfigValue","Conf"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require, valid-typeof */\nimport { writeFileSync, fsExistsSync } from '../systemManager/fileutils';\nimport { logWarning } from '../systemManager/logger';\nimport { configSchema } from '../constants';\n\nclass Config {\n    constructor() {\n        this.config = {};\n    }\n\n    initializeConfig(c) {\n        this.config = c;\n        return c;\n    }\n\n    getConfig() {\n        return this.config;\n    }\n\n    // RNV CONFIG\n    getConfigValueSeparate(key, global = false) {\n        const { paths } = this.config;\n\n        if (!global && !fsExistsSync(paths.project.config)) return 'N/A'; // string because there might be a setting where we will use null\n        const cfg = global\n            ? require(paths.GLOBAL_RNV_CONFIG)\n            : require(paths.project.config);\n\n        const value = cfg[configSchema[key].key];\n        if (value === undefined) return 'N/A';\n\n        return value;\n    }\n\n    getMergedConfigValue(key) {\n        let value = this.config.buildConfig?.[configSchema[key].key];\n        if (value === undefined && configSchema[key].default) { value = configSchema[key].default; }\n        return value;\n    }\n\n    listConfigValue(key) {\n        let localVal = this.getConfigValueSeparate(key).toString();\n        let globalVal = this.getConfigValueSeparate(key, true).toString();\n\n        if (globalVal === 'N/A' && configSchema[key].default) { globalVal = configSchema[key].default; }\n        if (localVal === 'N/A') localVal = globalVal;\n\n        const table = [\n            {\n                Key: key,\n                'Global Value': globalVal\n            }\n        ];\n\n        if (localVal !== 'N/A') {\n            table[0]['Project Value'] = localVal;\n        }\n\n        return table;\n    }\n\n    isConfigValueValid(key, value) {\n        const keySchema = configSchema[key];\n        if (!keySchema) {\n            logWarning(`Unknown config param ${key}`);\n            return false;\n        }\n\n        if (keySchema.values && !keySchema.values.includes(value)) {\n            logWarning(\n                `Unsupported value provided for ${key}. Correct values are ${keySchema.values.join(\n                    ', '\n                )}`\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    setConfigValue(key, value) {\n        const {\n            program: { global },\n            paths\n        } = this.config;\n\n        if (this.isConfigValueValid(key, value)) {\n            let isValid = value;\n            const configPath = global\n                ? paths.GLOBAL_RNV_CONFIG\n                : paths.project.config;\n            const config = require(configPath);\n\n            if (['true', 'false'].includes(isValid)) isValid = isValid === 'true'; // convert string to bool if it matches a bool value\n\n            config[configSchema[key].key] = isValid;\n            writeFileSync(configPath, config);\n            return true;\n        }\n        return false;\n    }\n\n    get isAnalyticsEnabled() {\n        return this.getMergedConfigValue('analytics');\n    }\n}\n\nconst Conf = new Config();\n\nexport default Conf;\n"],"file":"config.js"}