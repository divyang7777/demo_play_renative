{"version":3,"sources":["../../../src/core/configManager/schemeParser.js"],"names":["isBuildSchemeSupported","c","scheme","program","buildConfig","platforms","platform","baseBuildSchemes","common","buildSchemes","platformBuildSchemes","schemeDoesNotExist","schemeOptions","schemeVals","Object","keys","forEach","k","s","desc","description","grey","key","push","name","type","message","choices","logMessage","selectedScheme","runtime","bold","white"],"mappings":"iQAAA;AACA;AACA;;AAEO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAOC,CAAP;AAClC,oBAAQ,wBAAR;;AAEQC,MAH0B,CAGfD,CAAC,CAACE,OAHa,CAG1BD,MAH0B;;AAKlC,GAAI,CAACD,CAAC,CAACG,WAAF,CAAcC,SAAd,CAAwBJ,CAAC,CAACK,QAA1B,CAAL,CAA0C;AACtCL,CAAC,CAACG,WAAF,CAAcC,SAAd,CAAwBJ,CAAC,CAACK,QAA1B,EAAsC,EAAtC;AACH;;AAEKC,gBAT4B,CAST,wBAAAN,CAAC,CAACG,WAAF,CAAcI,MAAd,qCAAsBC,YAAtB,GAAsC,EAT7B;AAU5BC,oBAV4B,CAUL,wBAAAT,CAAC,CAACG,WAAF,CAAcC,SAAd,6DAA0BJ,CAAC,CAACK,QAA5B,uCAAuCG,YAAvC,GAAuD,EAVlD;;AAY5BA,YAZ4B,CAYb,uBAAMF,gBAAN,CAAwBG,oBAAxB,CAZa;;AAc7BD,YAd6B;AAe9B;;AAEQR,CAAC,CAACK,QAFV,sDAf8B;;;AAoBvB,KApBuB;;;AAuB5BK,kBAvB4B,CAuBPT,MAAM,EAAI,CAACO,YAAY,CAACP,MAAD,CAvBhB;AAwB9BA,MAAM,GAAK,IAAX,EAAmBS,kBAxBW;AAyB9B,GAAIA,kBAAkB,EAAIT,MAAtB,EAAgCA,MAAM,GAAK,IAA/C,CAAqD;AACjD,qBAAS,0CAAT;AACH;;AAEKU,aA7BwB,CA6BR,EA7BQ;AA8BxBC,UA9BwB,CA8BX,EA9BW;AA+B9BC,MAAM,CAACC,IAAP,CAAYN,YAAZ,EAA0BO,OAA1B,CAAkC,SAACC,CAAD,CAAO;AACrC,GAAMC,CAAAA,CAAC,CAAGT,YAAY,CAACQ,CAAD,CAAtB;AACA,GAAME,CAAAA,IAAI,CAAGD,CAAC,CAACE,WAAF,CAAgB,oBAAQC,IAAR,MAAkBH,CAAC,CAACE,WAApB,KAAhB,CAAsD,EAAnE;AACA,GAAME,CAAAA,GAAG,IAAML,CAAN,CAAUE,IAAnB;AACAP,aAAa,CAACW,IAAd,CAAmBD,GAAnB;AACAT,UAAU,CAACS,GAAD,CAAV,CAAkBL,CAAlB;AACH,CAND,EA/B8B;;AAuCG,2BAAe;AAC5CO,IAAI,CAAE,gBADsC;AAE5CC,IAAI,CAAE,MAFsC;AAG5CC,OAAO,CAAE,oCAHmC;AAI5CC,OAAO,CAAEf,aAJmC;AAK5CgB,UAAU,CAAE,4BALgC,CAAf,CAvCH,8CAuCtBC,cAvCsB,uBAuCtBA,cAvCsB;;;AA+C9B5B,CAAC,CAACE,OAAF,CAAUD,MAAV,CAAmBW,UAAU,CAACgB,cAAD,CAA7B;AACA5B,CAAC,CAAC6B,OAAF,CAAU5B,MAAV,CAAmBD,CAAC,CAACE,OAAF,CAAUD,MAA7B,CAhD8B;;AAkDlC,6CAAiC,oBAAQ6B,IAAR,CAAaC,KAAb;AAC7B/B,CAAC,CAAC6B,OAAF,CAAU5B,MADmB,CAAjC,EAlDkC;;AAqD3B,IArD2B,wEAA/B,C","sourcesContent":["import merge from 'deepmerge';\nimport { logError, logTask, logWarning, chalk, logInfo } from '../systemManager/logger';\nimport { inquirerPrompt } from '../../cli/prompt';\n\nexport const isBuildSchemeSupported = async (c) => {\n    logTask('isBuildSchemeSupported');\n\n    const { scheme } = c.program;\n\n    if (!c.buildConfig.platforms[c.platform]) {\n        c.buildConfig.platforms[c.platform] = {};\n    }\n\n    const baseBuildSchemes = c.buildConfig.common?.buildSchemes || {};\n    const platformBuildSchemes = c.buildConfig.platforms?.[c.platform]?.buildSchemes || {};\n\n    const buildSchemes = merge(baseBuildSchemes, platformBuildSchemes);\n\n    if (!buildSchemes) {\n        logWarning(\n            `Your appConfig for platform ${\n                c.platform\n            } has no buildSchemes. Will continue with defaults`\n        );\n        return false;\n    }\n\n    const schemeDoesNotExist = scheme && !buildSchemes[scheme];\n    if (scheme === true || schemeDoesNotExist) {\n        if (schemeDoesNotExist && scheme && scheme !== true) {\n            logError('Build scheme you picked does not exists.');\n        }\n        // const opts = generateOptions(buildSchemes);\n        const schemeOptions = [];\n        const schemeVals = {};\n        Object.keys(buildSchemes).forEach((k) => {\n            const s = buildSchemes[k];\n            const desc = s.description ? chalk().grey(` (${s.description})`) : '';\n            const key = `${k}${desc}`;\n            schemeOptions.push(key);\n            schemeVals[key] = k;\n        });\n\n        const { selectedScheme } = await inquirerPrompt({\n            name: 'selectedScheme',\n            type: 'list',\n            message: 'Pick one of available buildSchemes',\n            choices: schemeOptions,\n            logMessage: 'You need to specify scheme'\n        });\n\n        c.program.scheme = schemeVals[selectedScheme];\n        c.runtime.scheme = c.program.scheme;\n    }\n    logInfo(`Current Build Scheme: ${chalk().bold.white(\n        c.runtime.scheme\n    )}`);\n    return true;\n};\n"],"file":"schemeParser.js"}