var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.isBuildSchemeSupported=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _deepmerge=_interopRequireDefault(require("deepmerge"));
var _logger=require("../systemManager/logger");
var _prompt=require("../../cli/prompt");

var isBuildSchemeSupported=function isBuildSchemeSupported(c){var _c$buildConfig$common,_c$buildConfig$platfo,_c$buildConfig$platfo2;var scheme,baseBuildSchemes,platformBuildSchemes,buildSchemes,schemeDoesNotExist,schemeOptions,schemeVals,_await$inquirerPrompt,selectedScheme;return _regenerator.default.async(function isBuildSchemeSupported$(_context){while(1){switch(_context.prev=_context.next){case 0:
(0,_logger.logTask)('isBuildSchemeSupported');

scheme=c.program.scheme;

if(!c.buildConfig.platforms[c.platform]){
c.buildConfig.platforms[c.platform]={};
}

baseBuildSchemes=((_c$buildConfig$common=c.buildConfig.common)==null?void 0:_c$buildConfig$common.buildSchemes)||{};
platformBuildSchemes=((_c$buildConfig$platfo=c.buildConfig.platforms)==null?void 0:(_c$buildConfig$platfo2=_c$buildConfig$platfo[c.platform])==null?void 0:_c$buildConfig$platfo2.buildSchemes)||{};

buildSchemes=(0,_deepmerge.default)(baseBuildSchemes,platformBuildSchemes);if(

buildSchemes){_context.next=9;break;}
(0,_logger.logWarning)("Your appConfig for platform "+

c.platform+" has no buildSchemes. Will continue with defaults");return _context.abrupt("return",


false);case 9:


schemeDoesNotExist=scheme&&!buildSchemes[scheme];if(!(
scheme===true||schemeDoesNotExist)){_context.next=21;break;}
if(schemeDoesNotExist&&scheme&&scheme!==true){
(0,_logger.logError)('Build scheme you picked does not exists.');
}

schemeOptions=[];
schemeVals={};
Object.keys(buildSchemes).forEach(function(k){
var s=buildSchemes[k];
var desc=s.description?(0,_logger.chalk)().grey(" ("+s.description+")"):'';
var key=""+k+desc;
schemeOptions.push(key);
schemeVals[key]=k;
});_context.next=17;return _regenerator.default.awrap(

(0,_prompt.inquirerPrompt)({
name:'selectedScheme',
type:'list',
message:'Pick one of available buildSchemes',
choices:schemeOptions,
logMessage:'You need to specify scheme'}));case 17:_await$inquirerPrompt=_context.sent;selectedScheme=_await$inquirerPrompt.selectedScheme;


c.program.scheme=schemeVals[selectedScheme];
c.runtime.scheme=c.program.scheme;case 21:

(0,_logger.logInfo)("Current Build Scheme: "+(0,_logger.chalk)().bold.white(
c.runtime.scheme));return _context.abrupt("return",

true);case 23:case"end":return _context.stop();}}},null,null,null,Promise);};exports.isBuildSchemeSupported=isBuildSchemeSupported;
//# sourceMappingURL=schemeParser.js.map