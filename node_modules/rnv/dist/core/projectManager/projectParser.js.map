{"version":3,"sources":["../../../src/core/projectManager/projectParser.js"],"names":["checkAndCreateProjectPackage","c","Promise","resolve","paths","project","package","packageName","files","config","projectName","dir","split","pop","version","defaults","templateName","template","rnvVersion","rnv","pkgJson","name","dependencies","renative","devDependencies","pkgJsonStringClean","JSON","stringify","checkAndCreateGitignore","ignrPath","path","join","copyRuntimeAssets","reject","destPath","assets","appConfig","dirs","forEach","v","sourcePath","buildConfig","common","white","fontsObj","duplicateFontCheck","parseFonts","font","includes","key","includedFonts","platform","push","fontSource","replace","runtimeDir","fontJsPath","existingFileContents","toString","supportFiles","callback","appConfigBase","fontsDir","fontsDirs","ASSET_PATH_ALIASES","android","androidtv","androidwear","ios","tvos","tizen","tizenmobile","tizenwatch","webos","kaios","firefoxtv","firefoxos","windows","macos","web","chromecast","copyAssetsFolder","customFn","hasAssetFolder","filter","length","generateDefaultAssets","tsPathsConfig","confirmAssets","program","ci","type","message","confirm","copyBuildsFolder","configPropsInjects","INJECTABLE_CONFIG_PROPS","pattern","override","allInjects","systemPropsInjects","runtimePropsInjects","sourcePath1","sourcePath1secLegacy","workspace","dir_LEGACY","sourcePath1sec","red","WEB_HOSTED_PLATFORMS","sourcePathShared","sourceV","sourcePath0sec","SYNCED_DEV_DEPS","SYNCED_TEMPLATES","upgradeProjectDependencies","dep","templ","templates","_requiresNpmInstall","cleanPlaformAssets"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport path from 'path';\nimport { WEB_HOSTED_PLATFORMS, INJECTABLE_CONFIG_PROPS } from '../constants';\nimport {\n    getAppFolder,\n    // getAppSubFolder,\n    getPlatformBuildDir,\n    getPlatformProjectDir,\n    getBuildsFolder,\n    getConfigProp,\n    getTimestampPathsConfig\n} from '../common';\nimport {\n    cleanFolder,\n    copyFolderContentsRecursiveSync,\n    copyFileSync,\n    mkdirSync,\n    writeFileSync,\n    fsWriteFileSync,\n    fsExistsSync,\n    fsReaddirSync,\n    fsReadFileSync\n} from '../systemManager/fileutils';\nimport { isPlatformActive } from '../platformManager';\nimport { chalk, logTask, logWarning, logDebug, logInfo } from '../systemManager/logger';\nimport { copyTemplatePluginsSync } from '../pluginManager';\nimport { loadFile } from '../configManager/configParser';\nimport { inquirerPrompt } from '../../cli/prompt';\n\n\nexport const checkAndCreateProjectPackage = c => new Promise((resolve) => {\n    logTask('checkAndCreateProjectPackage');\n\n    if (!fsExistsSync(c.paths.project.package)) {\n        logInfo(\n            `Your ${c.paths.project.package} is missing. CREATING...DONE`\n        );\n\n        const packageName = c.files.project.config.projectName\n                || c.paths.project.dir.split('/').pop();\n        const version = c.files.project.config.defaults?.package?.version || '0.1.0';\n        const templateName = c.files.project.config.defaults?.template\n                || 'renative-template-hello-world';\n        const rnvVersion = c.files.rnv.package.version;\n\n        const pkgJson = {};\n        pkgJson.name = packageName;\n        pkgJson.version = version;\n        pkgJson.dependencies = {\n            renative: rnvVersion\n        };\n        pkgJson.devDependencies = {\n            rnv: rnvVersion\n        };\n        pkgJson.devDependencies[templateName] = rnvVersion;\n        const pkgJsonStringClean = JSON.stringify(pkgJson, null, 2);\n        fsWriteFileSync(c.paths.project.package, pkgJsonStringClean);\n    }\n\n    loadFile(c.files.project, c.paths.project, 'package');\n\n    resolve();\n});\n\nexport const checkAndCreateGitignore = (c) => {\n    logTask('checkAndCreateGitignore');\n    const ignrPath = path.join(c.paths.project.dir, '.gitignore');\n    if (!fsExistsSync(ignrPath)) {\n        logInfo(\n            'Your .gitignore is missing. CREATING...DONE'\n        );\n\n        copyFileSync(\n            path.join(c.paths.rnv.dir, 'supportFiles/gitignore-template'),\n            ignrPath\n        );\n    }\n};\n\nexport const copyRuntimeAssets = c => new Promise((resolve, reject) => {\n    logTask('copyRuntimeAssets');\n\n    const destPath = path.join(c.paths.project.assets.dir, 'runtime');\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourcePath = path.join(v, 'assets/runtime');\n            copyFolderContentsRecursiveSync(sourcePath, destPath);\n        });\n    } else {\n        const sourcePath = path.join(\n            c.paths.appConfig.dir,\n            'assets/runtime'\n        );\n        copyFolderContentsRecursiveSync(sourcePath, destPath);\n    }\n\n    if (!c.buildConfig?.common) {\n        logDebug('BUILD_CONFIG', c.buildConfig);\n        reject(\n            `Your ${chalk().white(\n                c.paths.appConfig.config\n            )} is missconfigured. (Maybe you have older version?). Missing ${chalk().white(\n                '{ common: {} }'\n            )} object at root`\n        );\n\n        return;\n    }\n\n\n    // FONTS\n    let fontsObj = 'export default [';\n\n    const duplicateFontCheck = [];\n    parseFonts(c, (font, dir) => {\n        if (font.includes('.ttf') || font.includes('.otf') || font.includes('.woff')) {\n            const key = font.split('.')[0];\n            const includedFonts = getConfigProp(\n                c,\n                c.platform,\n                'includedFonts'\n            );\n            if (includedFonts) {\n                if (\n                    includedFonts.includes('*')\n                        || includedFonts.includes(key)\n                ) {\n                    if (font && !duplicateFontCheck.includes(font)) {\n                        duplicateFontCheck.push(font);\n                        const fontSource = path.join(dir, font).replace(/\\\\/g, '\\\\\\\\');\n                        if (fsExistsSync(fontSource)) {\n                            // const fontFolder = path.join(appFolder, 'app/src/main/assets/fonts');\n                            // mkdirSync(fontFolder);\n                            // const fontDest = path.join(fontFolder, font);\n                            // copyFileSync(fontSource, fontDest);\n                            fontsObj += `{\n                              fontFamily: '${key}',\n                              file: require('${fontSource}'),\n                          },`;\n                        } else {\n                            logWarning(\n                                `Font ${chalk().white(\n                                    fontSource\n                                )} doesn't exist! Skipping.`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    fontsObj += '];';\n    if (!fsExistsSync(c.paths.project.assets.runtimeDir)) {\n        mkdirSync(c.paths.project.assets.runtimeDir);\n    }\n    const fontJsPath = path.join(\n        c.paths.project.assets.dir,\n        'runtime',\n        'fonts.web.js'\n    );\n    if (fsExistsSync(fontJsPath)) {\n        const existingFileContents = fsReadFileSync(fontJsPath).toString();\n\n        if (existingFileContents !== fontsObj) {\n            logDebug('newFontsJsFile');\n            fsWriteFileSync(fontJsPath, fontsObj);\n        }\n    } else {\n        logDebug('newFontsJsFile');\n        fsWriteFileSync(fontJsPath, fontsObj);\n    }\n\n    const supportFiles = path.resolve(c.paths.rnv.dir, 'supportFiles');\n    copyFileSync(\n        path.resolve(supportFiles, 'fontManager.js'),\n        path.resolve(\n            c.paths.project.assets.dir,\n            'runtime',\n            'fontManager.js'\n        )\n    );\n    copyFileSync(\n        path.resolve(supportFiles, 'fontManager.js'),\n        path.resolve(\n            c.paths.project.assets.dir,\n            'runtime',\n            'fontManager.server.web.js'\n        )\n    );\n    copyFileSync(\n        path.resolve(supportFiles, 'fontManager.web.js'),\n        path.resolve(\n            c.paths.project.assets.dir,\n            'runtime',\n            'fontManager.web.js'\n        )\n    );\n\n    resolve();\n});\n\nexport const parseFonts = (c, callback) => {\n    logTask('parseFonts');\n\n    if (c.buildConfig) {\n        // FONTS - PROJECT CONFIG\n        if (fsExistsSync(c.paths.project.appConfigBase.fontsDir)) {\n            fsReaddirSync(c.paths.project.appConfigBase.fontsDir).forEach(\n                (font) => {\n                    if (callback) { callback(font, c.paths.project.appConfigBase.fontsDir); }\n                }\n            );\n        }\n        // FONTS - APP CONFIG\n        if (c.paths.appConfig.fontsDirs) {\n            c.paths.appConfig.fontsDirs.forEach((v) => {\n                if (fsExistsSync(v)) {\n                    fsReaddirSync(v).forEach((font) => {\n                        if (callback) callback(font, v);\n                    });\n                }\n            });\n        } else if (fsExistsSync(c.paths.appConfig.fontsDir)) {\n            fsReaddirSync(c.paths.appConfig.fontsDir).forEach((font) => {\n                if (callback) callback(font, c.paths.appConfig.fontsDir);\n            });\n        }\n    }\n};\n\nconst ASSET_PATH_ALIASES = {\n    android: 'app/src/main',\n    androidtv: 'app/src/main',\n    androidwear: 'app/src/main',\n    ios: 'RNVApp',\n    tvos: 'RNVAppTVOS',\n    tizen: '',\n    tizenmobile: '',\n    tizenwatch: '',\n    webos: '',\n    kaios: '',\n    firefoxtv: '',\n    firefoxos: '',\n    windows: '',\n    macos: '',\n    web: '',\n    chromecast: ''\n};\n\nexport const copyAssetsFolder = async (c, platform, customFn) => {\n    logTask('copyAssetsFolder');\n\n    if (!isPlatformActive(c, platform)) return;\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        const hasAssetFolder = c.paths.appConfig.dirs\n            .filter(v => fsExistsSync(path.join(v, `assets/${platform}`))).length;\n        if (!hasAssetFolder) {\n            await generateDefaultAssets(\n                c,\n                platform,\n                path.join(c.paths.appConfig.dirs[0], `assets/${platform}`)\n            );\n        }\n    } else {\n        const sourcePath = path.join(\n            c.paths.appConfig.dir,\n            `assets/${platform}`\n        );\n        if (!fsExistsSync(sourcePath)) {\n            await generateDefaultAssets(c, platform, sourcePath);\n        }\n    }\n\n    if (customFn) {\n        return customFn(c, platform);\n    }\n\n    const destPath = path.join(\n        getPlatformProjectDir(c, platform),\n        ASSET_PATH_ALIASES[platform]\n    );\n\n    const tsPathsConfig = getTimestampPathsConfig(c, platform);\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourcePath = path.join(v, `assets/${platform}`);\n            copyFolderContentsRecursiveSync(sourcePath, destPath, true, false, false, null, tsPathsConfig);\n        });\n    } else {\n        const sourcePath = path.join(\n            c.paths.appConfig.dir,\n            `assets/${platform}`\n        );\n        copyFolderContentsRecursiveSync(sourcePath, destPath, true, false, false, null, tsPathsConfig);\n    }\n};\n\nconst generateDefaultAssets = async (c, platform, sourcePath) => {\n    logTask('generateDefaultAssets');\n    let confirmAssets = true;\n    if (c.program.ci !== true) {\n        const { confirm } = await inquirerPrompt({\n            type: 'confirm',\n            message: `It seems you don't have assets configured in ${chalk().white(\n                sourcePath\n            )} do you want generate default ones?`\n        });\n        confirmAssets = confirm;\n    }\n\n    if (confirmAssets) {\n        copyFolderContentsRecursiveSync(\n            path.join(c.paths.rnv.dir, `projectTemplate/assets/${platform}`),\n            sourcePath\n        );\n    }\n};\n\nexport const copyBuildsFolder = (c, platform) => new Promise((resolve) => {\n    logTask('copyBuildsFolder');\n    if (!isPlatformActive(c, platform, resolve)) return;\n\n    const destPath = path.join(getAppFolder(c));\n    const tsPathsConfig = getTimestampPathsConfig(c, platform);\n\n    const configPropsInjects = [];\n    INJECTABLE_CONFIG_PROPS.forEach((v) => {\n        configPropsInjects.push({\n            pattern: `{{configProps.${v}}}`,\n            override: getConfigProp(c, c.platform, v)\n        });\n    });\n    c.configPropsInjects = configPropsInjects;\n    const allInjects = [...c.configPropsInjects, ...c.systemPropsInjects, ...c.runtimePropsInjects];\n\n    // FOLDER MERGERS PROJECT CONFIG\n    const sourcePath1 = getBuildsFolder(\n        c,\n        platform,\n        c.paths.project.appConfigBase.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath1, destPath, true, false, false, allInjects, tsPathsConfig);\n\n    // FOLDER MERGERS PROJECT CONFIG (PRIVATE)\n    const sourcePath1secLegacy = getBuildsFolder(\n        c,\n        platform,\n        c.paths.workspace.project.appConfigBase.dir_LEGACY\n    );\n    copyFolderContentsRecursiveSync(sourcePath1secLegacy, destPath, true,\n        false, false, allInjects, tsPathsConfig);\n\n    // FOLDER MERGERS PROJECT CONFIG (PRIVATE)\n    const sourcePath1sec = getBuildsFolder(\n        c,\n        platform,\n        c.paths.workspace.project.appConfigBase.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath1sec, destPath, true, false, false, allInjects, tsPathsConfig);\n\n    if (fsExistsSync(sourcePath1secLegacy)) {\n        logWarning(`Path: ${chalk().red(sourcePath1secLegacy)} is DEPRECATED.\nMove your files to: ${chalk().white(sourcePath1sec)} instead`);\n    }\n\n    // DEPRECATED SHARED\n    if (WEB_HOSTED_PLATFORMS.includes(platform)) {\n        const sourcePathShared = path.join(\n            c.paths.project.appConfigBase.dir,\n            'builds/_shared'\n        );\n        if (fsExistsSync(sourcePathShared)) {\n            logWarning('Folder builds/_shared is DEPRECATED. use builds/<PLATFORM> instead ');\n        }\n        copyFolderContentsRecursiveSync(\n            sourcePathShared,\n            getPlatformBuildDir(c),\n            true, false, false, allInjects\n        );\n    }\n\n    // FOLDER MERGERS FROM APP CONFIG + EXTEND\n    if (c.paths.appConfig.dirs) {\n        c.paths.appConfig.dirs.forEach((v) => {\n            const sourceV = getBuildsFolder(c, platform, v);\n            copyFolderContentsRecursiveSync(\n                sourceV,\n                destPath,\n                true, false, false, allInjects, tsPathsConfig\n            );\n        });\n    } else {\n        copyFolderContentsRecursiveSync(\n            getBuildsFolder(c, platform, c.paths.appConfig.dir),\n            destPath,\n            true, false, false, allInjects, tsPathsConfig\n        );\n    }\n\n    // FOLDER MERGERS FROM APP CONFIG (PRIVATE)\n    const sourcePath0sec = getBuildsFolder(\n        c,\n        platform,\n        c.paths.workspace.appConfig.dir\n    );\n    copyFolderContentsRecursiveSync(sourcePath0sec, destPath, true, false, false, allInjects, tsPathsConfig);\n\n    copyTemplatePluginsSync(c);\n\n    resolve();\n});\n\nconst SYNCED_DEV_DEPS = [\n    'rnv',\n    '@rnv/engine-rn',\n    '@rnv/engine-rn-next',\n    '@rnv/engine-rn-web',\n    '@rnv/engine-rn-electron'\n];\n\nconst SYNCED_TEMPLATES = [\n    'renative-template-hello-world',\n    'renative-template-blank'\n];\n\nexport const upgradeProjectDependencies = (c, version) => {\n    logTask('upgradeProjectDependencies');\n\n    // const templates = c.files.project.config?.templates;\n    // TODO: Make this dynamically injected\n    // SYNC DEPS\n\n    const devDependencies = c.files.project.package?.devDependencies;\n\n    SYNCED_DEV_DEPS.forEach((dep) => {\n        if (devDependencies?.[dep]) {\n            devDependencies[dep] = version;\n        }\n    });\n    SYNCED_TEMPLATES.forEach((templ) => {\n        if (devDependencies?.[templ]) {\n            devDependencies[templ] = version;\n        }\n        if (c.files.project.config?.templates?.[templ]?.version) {\n            c.files.project.config.templates[templ].version = version;\n        }\n    });\n\n\n    const dependencies = c.files.project.package?.dependencies;\n    if (dependencies?.renative) {\n        dependencies.renative = version;\n    }\n\n    writeFileSync(c.paths.project.package, c.files.project.package);\n\n    c._requiresNpmInstall = true;\n\n    writeFileSync(c.paths.project.config, c.files.project.config);\n};\n\nexport const cleanPlaformAssets = async (c) => {\n    logTask('cleanPlaformAssets');\n\n    await cleanFolder(c.paths.project.assets.dir);\n    mkdirSync(c.paths.project.assets.runtimeDir);\n    return true;\n};\n"],"file":"projectParser.js"}