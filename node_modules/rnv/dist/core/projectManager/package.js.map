{"version":3,"sources":["../../../src/core/projectManager/package.js"],"names":["bumpVersions","version","Config","getConfig","paths","dir","project","pluginTemplates","rnv","packagesDir","path","join","packages","forEach","name","pkgPath","pkgJsonPath","isDirectory","existingPkgJson","require","renativePkgPath","config","renative","publishAll","Promise","all","map","cwd","taskRnvPkg","args","program","rawArgs","slice","firstArg","secondArg","semver","valid"],"mappings":"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","sourcesContent":["/* eslint-disable global-require, import/no-dynamic-require */\nimport path from 'path';\nimport semver from 'semver';\n\nimport Config from '../configManager/config';\nimport { executeAsync } from '../systemManager/exec';\nimport {\n    writeObjectSync,\n    copyFileSync,\n    updateObjectSync,\n    fsExistsSync,\n    fsReaddirSync,\n    fsLstatSync\n} from '../systemManager/fileutils';\nimport { logError } from '../systemManager/logger';\n\nconst bumpVersions = (version) => {\n    const {\n        project: { dir },\n        rnv: { pluginTemplates }\n    } = Config.getConfig().paths;\n    // check for packages to bump\n    const packagesDir = path.join(dir, 'packages');\n    if (fsExistsSync(packagesDir)) {\n        const packages = fsReaddirSync(packagesDir);\n        packages.forEach((name) => {\n            const pkgPath = path.join(packagesDir, name);\n            const pkgJsonPath = path.join(pkgPath, 'package.json');\n            if (\n                fsLstatSync(pkgPath).isDirectory()\n                && fsExistsSync(pkgJsonPath)\n            ) {\n                // we found a packaaaage, fist-bumpin' it\n                const existingPkgJson = require(pkgJsonPath);\n                existingPkgJson.version = version;\n                writeObjectSync(pkgJsonPath, existingPkgJson);\n            }\n        });\n        // check if it's our turf and do some extra magic\n        const renativePkgPath = path.join(packagesDir, 'renative');\n        if (fsExistsSync(renativePkgPath)) {\n            copyFileSync(\n                path.join(dir, 'README.md'),\n                path.join(renativePkgPath, 'README.md')\n            );\n            updateObjectSync(pluginTemplates.config, {\n                pluginTemplates: {\n                    renative: {\n                        version\n                    }\n                }\n            });\n        }\n    }\n};\n\nconst publishAll = () => {\n    const {\n        project: { dir }\n    } = Config.getConfig().paths;\n    const packagesDir = path.join(dir, 'packages');\n    if (fsExistsSync(packagesDir)) {\n        const packages = fsReaddirSync(packagesDir);\n        return Promise.all(\n            packages.map((name) => {\n                const pkgPath = path.join(packagesDir, name);\n                return executeAsync('npm i', { cwd: pkgPath });\n            })\n        );\n    }\n    return true;\n};\n\nconst taskRnvPkg = async () => {\n    let args = [...Config.getConfig().program.rawArgs];\n    args = args.slice(3);\n\n    const firstArg = args[0];\n    const secondArg = args[1];\n\n    switch (firstArg) {\n        case 'version':\n            // sets the given version to all of the packages, if there are any\n            if (!secondArg) { return logError('No version specified', false, true); }\n            if (!semver.valid(secondArg)) {\n                return logError(\n                    `Invalid version specified ${secondArg}`,\n                    false,\n                    true\n                );\n            }\n            return bumpVersions(secondArg);\n        case 'publish':\n            return publishAll();\n        default:\n            logError(`Unknown argument ${firstArg}`, false, true);\n            break;\n    }\n};\n\nexport default taskRnvPkg;\n"],"file":"package.js"}