{"version":3,"sources":["../../../src/core/projectManager/workspace.js"],"names":["createWorkspace","c","workspaceID","workspacePath","files","rnv","configWorkspaces","workspaces","path","workspaceConfig","sdks","defaultWorkspace","config","defaultTargets","join","paths","getWorkspaceDirPath","wss","ws","runtime","selectedWorkspace","buildConfig","dirPath","wsDir","home","dir","isWSConfirmed","program","ci","confirm","name","type","message","white","warningMessage","conf","globalConfigDir","project","GLOBAL_RNV_DIR","getWorkspaceConnectionString","obj","remoteUrl","remote","url","connectMsg","green","getWorkspaceOptions","i","mapping","defaultVal","grey","bold"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { generateOptions, inquirerPrompt } from '../../cli/prompt';\nimport {\n    chalk,\n    logTask,\n    logWarning,\n    logDebug,\n    logInfo,\n} from '../systemManager/logger';\nimport { writeFileSync, mkdirSync, fsExistsSync } from '../systemManager/fileutils';\n\n\nexport const createWorkspace = async (c, workspaceID, workspacePath) => {\n    c.files.rnv.configWorkspaces.workspaces[workspaceID] = {\n        path: workspacePath\n    };\n\n    const workspaceConfig = {\n        sdks: c.files.defaultWorkspace?.config?.sdks,\n        defaultTargets: c.files.defaultWorkspace?.config?.defaultTargets\n    };\n\n    mkdirSync(workspacePath);\n    writeFileSync(path.join(workspacePath, 'renative.json'), workspaceConfig);\n\n    writeFileSync(c.paths.rnv.configWorkspaces, c.files.rnv.configWorkspaces);\n    return true;\n};\n\nexport const getWorkspaceDirPath = async (c) => {\n    logTask('getWorkspaceDirPath');\n    const wss = c.files.rnv.configWorkspaces;\n    const ws = c.runtime.selectedWorkspace || c.buildConfig?.workspaceID;\n    let dirPath;\n    if (wss?.workspaces && ws) {\n        dirPath = wss.workspaces[ws]?.path;\n        if (!dirPath) {\n            const wsDir = path.join(c.paths.home.dir, `.${ws}`);\n            if (fsExistsSync(wsDir)) {\n                wss.workspaces[ws] = {\n                    path: wsDir\n                };\n                writeFileSync(c.paths.rnv.configWorkspaces, wss);\n                logInfo(\n                    `Found workspace id ${ws} and compatible directory ${wsDir}. Your ${\n                        c.paths.rnv.configWorkspaces} has been updated.`\n                );\n            } else if (!c.runtime.isWSConfirmed || c.program.ci === true) {\n                let confirm = true;\n                if (c.program.ci !== true) {\n                    const { conf } = await inquirerPrompt({\n                        name: 'conf',\n                        type: 'confirm',\n                        message: `Your project belongs to workspace ${chalk().white(\n                            ws\n                        )}. do you want to add new workspace ${chalk().white(\n                            ws\n                        )} to your local system at ${chalk().white(wsDir)}?`,\n                        warningMessage: 'No app configs found for this project'\n                    });\n                    confirm = conf;\n                    c.runtime.isWSConfirmed = true;\n                }\n                if (confirm) {\n                    await createWorkspace(c, ws, wsDir);\n                }\n            }\n        }\n    }\n    if (c.buildConfig?.paths?.globalConfigDir) {\n        logWarning(\n            `paths.globalConfigDir in ${\n                c.paths.project.config\n            } is DEPRECATED. use workspaceID instead. more info at https://renative.org/docs/workspaces`\n        );\n    }\n    if (!dirPath) {\n        return c.buildConfig?.paths?.globalConfigDir || c.paths.GLOBAL_RNV_DIR;\n    }\n    return dirPath;\n};\n\nexport const getWorkspaceConnectionString = (obj) => {\n    const remoteUrl = obj.remote?.url;\n    const connectMsg = remoteUrl\n        ? chalk().green(`(${obj.remote.type}:${remoteUrl})`)\n        : '';\n    return connectMsg;\n};\n\nexport const getWorkspaceOptions = c => generateOptions(\n        c.files.rnv.configWorkspaces?.workspaces,\n        false,\n        null,\n        (i, obj, mapping, defaultVal) => {\n            logDebug('getWorkspaceOptions');\n\n            return ` [${chalk().grey(i + 1)}]> ${chalk().bold(\n                defaultVal\n            )} ${getWorkspaceConnectionString(obj)}\\n`;\n        }\n);\n"],"file":"workspace.js"}