{"version":3,"sources":["../../../src/core/projectManager/buildHooks.js"],"names":["executePipe","c","key","pipesConfig","buildConfig","pipes","includes","buildHooks","pipe","buildPipes","Array","isArray","reduce","accumulatorPromise","next","name","then","Promise","resolve","paths","index","isBuildHooksReady","cmd","dir","dist","cwd","project","silent","h","require","hooks","reject"],"mappings":"yQAAA;AACA;AACA;;AAEO,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAOC,CAAP,CAAUC,GAAV;AACvB,oBAAQ,aAAR,MAA4BA,GAA5B;;AAEMC,WAHiB,iBAGHF,CAAC,CAACG,WAHC,eAGH,eAAeC,KAHZ;AAInB,CAACF,WAAD,EAAiBA,WAAW,EAAIA,WAAW,CAACG,QAAZ,CAAqBJ,GAArB,CAJb;AAKbK,UAAU,CAACN,CAAD,CALG;;;AAQjBO,IARiB,CAQVP,CAAC,CAACQ,UAAF,CAAeR,CAAC,CAACQ,UAAF,CAAaP,GAAb,CAAf,CAAmC,IARzB;;AAUnBQ,KAAK,CAACC,OAAN,CAAcH,IAAd,CAVmB;AAWbA,IAAI,CAACI,MAAL;AACF,SAACC,kBAAD,CAAqBC,IAArB,CAA8B;;AAE1B,kCAAqBA,IAArB,cAAqBA,IAAI,CAAEC,IAA3B,EAAmC,aAAnC;AACA,MAAOF,CAAAA,kBAAkB,CAACG,IAAnB,CAAwB,iBAAMF,CAAAA,IAAI,CAACb,CAAD,CAAV,EAAxB,CAAP;AACH,CALC;AAMFgB,OAAO,CAACC,OAAR,EANE,CAXa;;AAmBZV,IAnBY;AAoBnB,kCAAqBA,IAArB,cAAqBA,IAAI,CAAEO,IAA3B,EAAmC,aAAnC,EApBmB;AAqBbP,IAAI,CAACP,CAAD,CArBS,wEAApB,C;;;;;AA0BA,GAAMM,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAON,CAAP;AACtB,qBAAS,YAAT,EADsB;;AAGlB,4BAAaA,CAAC,CAACkB,KAAF,CAAQZ,UAAR,CAAmBa,KAAhC,CAHkB;AAIdnB,CAAC,CAACoB,iBAJY;AAKP,IALO;;;AAQZC,GARY,CAQN,OARM;;;AAWd,oBAAQ,YAAR,CAAsB,uCAAtB,EAXc;AAYR;AACFrB,CADE;AAECqB,GAFD,KAEQrB,CAAC,CAACkB,KAAF,CAAQZ,UAAR,CAAmBgB,GAF3B,QAEqCtB,CAAC,CAACkB,KAAF,CAAQZ,UAAR,CAAmBiB,IAAnB,CAAwBD,GAF7D;AAGF,CAAEE,GAAG,CAAExB,CAAC,CAACkB,KAAF,CAAQO,OAAR,CAAgBH,GAAvB,CAA4BI,MAAM,CAAE,IAApC,CAHE,CAZQ;;;AAkBRC,CAlBQ,CAkBJC,OAAO,CAAC5B,CAAC,CAACkB,KAAF,CAAQZ,UAAR,CAAmBiB,IAAnB,CAAwBJ,KAAzB,CAlBH;AAmBdnB,CAAC,CAACM,UAAF,CAAeqB,CAAC,CAACE,KAAjB;AACA7B,CAAC,CAACQ,UAAF,CAAemB,CAAC,CAACvB,KAAjB;AACAJ,CAAC,CAACoB,iBAAF,CAAsB,IAAtB,CArBc;AAsBP,IAtBO;;;;;AA2BPJ,OAAO,CAACc,MAAR,+CA3BO;;;AA8Bf,IA9Be,6EAAnB,C","sourcesContent":["import { logDebug, logHook } from '../systemManager/logger';\nimport { executeAsync } from '../systemManager/exec';\nimport { fsExistsSync } from '../systemManager/fileutils';\n\nexport const executePipe = async (c, key) => {\n    logHook('executePipe', `('${key}')`);\n\n    const pipesConfig = c.buildConfig?.pipes;\n    if (!pipesConfig || (pipesConfig && pipesConfig.includes(key))) {\n        await buildHooks(c);\n    }\n\n    const pipe = c.buildPipes ? c.buildPipes[key] : null;\n\n    if (Array.isArray(pipe)) {\n        await pipe.reduce(\n            (accumulatorPromise, next) => {\n                // console.log('DDJHDGD', next?.name);\n                logHook(`buildHook.${next?.name}`, '(EXECUTING)');\n                return accumulatorPromise.then(() => next(c));\n            },\n            Promise.resolve()\n        );\n    } else if (pipe) {\n        logHook(`buildHook.${pipe?.name}`, '(EXECUTING)');\n        await pipe(c);\n    }\n};\n\n/* eslint-disable import/no-dynamic-require, global-require */\nexport const buildHooks = async (c) => {\n    logDebug('buildHooks');\n\n    if (fsExistsSync(c.paths.buildHooks.index)) {\n        if (c.isBuildHooksReady) {\n            return true;\n        }\n\n        const cmd = 'babel';\n\n        try {\n            logHook('buildHooks', 'Build hooks not complied. BUILDING...');\n            await executeAsync(\n                c,\n                `${cmd} ${c.paths.buildHooks.dir} -d ${c.paths.buildHooks.dist.dir}`,\n                { cwd: c.paths.project.dir, silent: true }\n            );\n\n            const h = require(c.paths.buildHooks.dist.index);\n            c.buildHooks = h.hooks;\n            c.buildPipes = h.pipes;\n            c.isBuildHooksReady = true;\n            return true;\n        } catch (e) {\n            // logWarning(`BUILD_HOOK Failed with error: ${e}`);\n            // resolve();\n            // Fail Builds instead of warn when hook fails\n            return Promise.reject(`BUILD_HOOK Failed with error: ${e}`);\n        }\n    }\n    return true;\n};\n"],"file":"buildHooks.js"}