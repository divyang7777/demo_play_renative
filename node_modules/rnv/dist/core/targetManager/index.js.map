{"version":3,"sources":["../../../src/core/targetManager/index.js"],"names":["waitForEmulator","c","cli","command","callback","attempts","maxAttempts","CHECK_INTEVAL","maxErrorLength","program","spinner","start","Promise","resolve","reject","interval","setInterval","silent","timeout","then","resp","clearInterval","succeed","fail","catch"],"mappings":"0PAAA;AACA;;AAEO,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAOC,CAAP,CAAUC,GAAV,CAAeC,OAAf,CAAwBC,QAAxB;AACvBC,QADuB,CACZ,CADY;AAErBC,WAFqB,CAEP,EAFO;AAGrBC,aAHqB,CAGL,IAHK;AAInBC,cAJmB,CAIAP,CAAC,CAACQ,OAJF,CAInBD,cAJmB;AAKrBE,OALqB,CAKX,iBAAI,iCAAJ,EAAuCC,KAAvC,EALW;;AAOpB,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB;AACpC,GAAMC,CAAAA,QAAQ,CAAGC,WAAW,CAAC,UAAM;AAC/B,kBAAQf,CAAR,CAAWC,GAAX,CAAgBC,OAAhB,CAAyB;AACrBc,MAAM,CAAE,IADa;AAErBC,OAAO,CAAE,KAFY;AAGrBV,cAAc,CAAdA,cAHqB,CAAzB;;AAKKW,IALL,CAKU,SAACC,IAAD,CAAU;AACZ,GAAIhB,QAAQ,CAACgB,IAAD,CAAZ,CAAoB;AAChBC,aAAa,CAACN,QAAD,CAAb;AACAL,OAAO,CAACY,OAAR;AACA,MAAOT,CAAAA,OAAO,CAAC,IAAD,CAAd;AACH;AACDR,QAAQ;AACR,GAAIA,QAAQ,GAAKC,WAAjB,CAA8B;AAC1Be,aAAa,CAACN,QAAD,CAAb;AACAL,OAAO,CAACa,IAAR;AACI,2DADJ;;AAGA,MAAOT,CAAAA,MAAM;AACT,2DADS,CAAb;;AAGH;AACJ,CArBL;AAsBKU,KAtBL,CAsBW,UAAM;AACTnB,QAAQ;AACR,GAAIA,QAAQ,CAAGC,WAAf,CAA4B;AACxBe,aAAa,CAACN,QAAD,CAAb;AACAL,OAAO,CAACa,IAAR;AACI,2DADJ;;AAGA,MAAOT,CAAAA,MAAM;AACT,2DADS,CAAb;;AAGH;AACJ,CAjCL;AAkCH,CAnC2B,CAmCzBP,aAnCyB,CAA5B;AAoCH,CArCM,CAPoB,uEAAxB,C","sourcesContent":["import ora from 'ora';\nimport { execCLI } from '../systemManager/exec';\n\nexport const waitForEmulator = async (c, cli, command, callback) => {\n    let attempts = 0;\n    const maxAttempts = 30;\n    const CHECK_INTEVAL = 2000;\n    const { maxErrorLength } = c.program;\n    const spinner = ora('Waiting for emulator to boot...').start();\n\n    return new Promise((resolve, reject) => {\n        const interval = setInterval(() => {\n            execCLI(c, cli, command, {\n                silent: true,\n                timeout: 10000,\n                maxErrorLength\n            })\n                .then((resp) => {\n                    if (callback(resp)) {\n                        clearInterval(interval);\n                        spinner.succeed();\n                        return resolve(true);\n                    }\n                    attempts++;\n                    if (attempts === maxAttempts) {\n                        clearInterval(interval);\n                        spinner.fail(\n                            \"Can't connect to the running emulator. Try restarting it.\"\n                        );\n                        return reject(\n                            \"Can't connect to the running emulator. Try restarting it.\"\n                        );\n                    }\n                })\n                .catch(() => {\n                    attempts++;\n                    if (attempts > maxAttempts) {\n                        clearInterval(interval);\n                        spinner.fail(\n                            \"Can't connect to the running emulator. Try restarting it.\"\n                        );\n                        return reject(\n                            \"Can't connect to the running emulator. Try restarting it.\"\n                        );\n                    }\n                });\n        }, CHECK_INTEVAL);\n    });\n};\n"],"file":"index.js"}