{"version":3,"sources":["../../../src/core/engineManager/index.js"],"names":["REGISTERED_ENGINES","ENGINES","ENGINE_CORE","registerEngine","engine","getId","push","generateEnvVars","c","moduleConfig","nextConfig","RNV_EXTENSIONS","getPlatformExtensions","RNV_MODULE_PATHS","modulePaths","RNV_MODULE_ALIASES","moduleAliasesArray","RNV_NEXT_TRANSPILE_MODULES","RNV_PROJECT_ROOT","paths","project","dir","RNV_MONO_ROOT","runtime","isWrapper","path","join","getEngineByPlatform","platform","ignoreMissingError","selectedEngineKey","buildConfig","program","selectedEngine","files","rnv","engines","config","Error","excludeServer","id","output","concat","EXTENSIONS","filter","ext","includes","executeEngineTask","task","parentTask","originTask","tasks","isFirstTask","needsHelp","Object","prototype","hasOwnProperty","call","t","getEngineTask","green","description","params","map","v","option","shortcut","key","fnHelp","isGlobalScope","package","inOnlyMode","only","doPipe","_executePipe","fn","tsk","taskCleaned","split","hasEngineTask","isProjectScope","getEngineSubTasks","exactMatch","values","startsWith","getEngineRunnerByPlatform","getEngineRunner","configExists","hasTask","white","engineConfig","keys","executedTasks","initializeTask","Analytics","captureEvent","type","executeTask","phase","TASK_LIMIT","pt","_currentTask","bold","rgb","Promise","reject","prt","executeOrSkipTask","TASK_CONFIGURE_SOFT","_getTaskOption","taskInstance","hasMultipleSubTasks","grey","findSuitableTask","command","suitableTaskInstances","forEach","getTasks","taskInstances","defaultCmd","addendum","filteredTasks","sort","tasksCommands","find","default","name","message","choices","pageSize","logMessage","indexOf","subCommand","suitableEngines","autocompleteEngines","getSubTasks","length","isAutoComplete","supportedSubtasksArr","isNotViable","taskKey","desc","toLowerCase","supportedSubtasks","supportedSubtasksFilter","mergedTask","subTasks","supportedPlatforms","getTask","platforms","plat","getRegisteredEngines"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { logDebug, logTask, logInitTask, logExitTask, chalk, logInfo, logError, logRaw } from '../systemManager/logger';\nimport { getConfigProp } from '../common';\nimport Analytics from '../systemManager/analytics';\nimport { executePipe } from '../projectManager/buildHooks';\nimport { inquirerPrompt, pressAnyKeyToContinue } from '../../cli/prompt';\nimport { checkIfProjectAndNodeModulesExists } from '../systemManager/npmUtils';\nimport { TASK_CONFIGURE_SOFT, EXTENSIONS } from '../constants';\n\n\nconst REGISTERED_ENGINES = [];\nconst ENGINES = {};\nconst ENGINE_CORE = 'engine-core';\n\nexport const registerEngine = (engine) => {\n    ENGINES[engine.getId()] = engine;\n    REGISTERED_ENGINES.push(engine);\n};\n\nexport const generateEnvVars = (c, moduleConfig, nextConfig) => ({\n    RNV_EXTENSIONS: getPlatformExtensions(c),\n    RNV_MODULE_PATHS: moduleConfig?.modulePaths || [],\n    RNV_MODULE_ALIASES: moduleConfig?.moduleAliasesArray || [],\n    RNV_NEXT_TRANSPILE_MODULES: nextConfig,\n    RNV_PROJECT_ROOT: c.paths.project.dir,\n    RNV_MONO_ROOT: c.runtime.isWrapper ? path.join(c.paths.project.dir, '../..') : c.paths.project.dir\n});\nexport const getEngineByPlatform = (c, platform, ignoreMissingError) => {\n    let selectedEngineKey;\n    if (c.buildConfig && !!platform) {\n        selectedEngineKey = c.program.engine || getConfigProp(c, platform, 'engine');\n        const selectedEngine = c.files.rnv.engines.config?.engines?.[selectedEngineKey];\n        if (!selectedEngine && !ignoreMissingError) {\n            logDebug(`ERROR: Engine: ${selectedEngineKey} does not exists or is not registered ${new Error()}`);\n            // logRaw(new Error());\n        }\n        return selectedEngine;\n    }\n    return null;\n};\n\nexport const getPlatformExtensions = (c, excludeServer) => {\n    const id = c.runtime.engine.getId();\n    const output = [`${id}.jsx`, `${id}.js`, `${id}.tsx`, `${id}.ts`].concat(EXTENSIONS[c.platform]).filter(ext => !excludeServer || !ext.includes('server.'));\n    return output;\n};\n\nexport const executeEngineTask = async (c, task, parentTask, originTask, tasks, isFirstTask) => {\n    const needsHelp = Object.prototype.hasOwnProperty.call(c.program, 'help');\n\n    const t = getEngineTask(task, tasks);\n\n    if (needsHelp && !parentTask) {\n        logRaw(`\n=======================================================\nINTERACTIVE HELP FOR TASK: ${chalk().green(t.task)}\n\nDescription: ${t.description}\n\nOptions:\n\n${t.params.map((v) => {\n        const option = v.shortcut ? `\\`-${v.shortcut}\\`, ` : '';\n        return `${option}\\`--${v.key}\\` - ${v.description}`;\n    }).join('\\n')}\n\n  `);\n        if (t.fnHelp) {\n            await t.fnHelp(c, parentTask, originTask);\n        }\n\n        await pressAnyKeyToContinue();\n        logRaw(`\n=======================================================`);\n    }\n\n    if (!t.isGlobalScope && isFirstTask) {\n        if (c.files.project.package) {\n            // This has to happen in order for hooks to be able to run\n            await checkIfProjectAndNodeModulesExists(c);\n        }\n    }\n    const inOnlyMode = c.program.only;\n    const doPipe = !t.isGlobalScope && (!inOnlyMode || (inOnlyMode && isFirstTask));\n    if (doPipe) await _executePipe(c, task, 'before');\n    await t.fn(c, parentTask, originTask);\n    if (doPipe) await _executePipe(c, task, 'after');\n};\n\nexport const getEngineTask = (task, tasks) => {\n    let tsk;\n    const taskCleaned = task.split(' ')[0];\n    tsk = tasks[task];\n    if (!tsk) {\n        tsk = tasks[taskCleaned];\n    }\n    return tsk;\n};\n\nexport const hasEngineTask = (task, tasks, isProjectScope) => (\n    isProjectScope ? !!getEngineTask(task, tasks) : getEngineTask(task, tasks)?.isGlobalScope);\n\nexport const getEngineSubTasks = (task, tasks, exactMatch) => Object.values(tasks).filter(v => (exactMatch ? v.task.split(' ')[0] === task : v.task.startsWith(task)));\n\nexport const getEngineRunnerByPlatform = (c, platform) => {\n    const selectedEngine = getEngineByPlatform(c, platform);\n    return ENGINES[selectedEngine?.id];\n};\n\nexport const getEngineRunner = (c, task) => {\n    const selectedEngine = getEngineByPlatform(c, c.platform);\n    const { configExists } = c.paths.project;\n    if (!selectedEngine) {\n        if (ENGINES[ENGINE_CORE].hasTask(task, configExists)) return ENGINES[ENGINE_CORE];\n        // return EngineNoOp;\n        throw new Error(`Cound not find suitable executor for task ${chalk().white(task)}`);\n    }\n    c.runtime.engineConfig = selectedEngine;\n    const engine = ENGINES[selectedEngine?.id];\n    if (!engine) {\n        if (ENGINES[ENGINE_CORE].hasTask(task, configExists)) return ENGINES[ENGINE_CORE];\n        throw new Error(`Cound not find active engine with id ${selectedEngine?.id}. Available engines:\n        ${Object.keys(ENGINES).join(', ')}`);\n    }\n    if (engine.hasTask(task, configExists)) return engine;\n    if (ENGINES[ENGINE_CORE].hasTask(task, configExists)) return ENGINES[ENGINE_CORE];\n\n    throw new Error(`Cound not find suitable executor for task ${chalk().white(task)}`);\n};\n\nlet executedTasks = {};\n\nexport const initializeTask = async (c, task) => {\n    logTask('initializeTask', task);\n    c.runtime.task = task;\n    executedTasks = {};\n\n    Analytics.captureEvent({\n        type: `${task}Project`,\n        platform: c.platform\n    });\n\n    await executeTask(c, task, null, task, true);\n    return true;\n};\n\nconst _executePipe = async (c, task, phase) => executePipe(c, `${task.split(' ').join(':')}:${phase}`);\n\nconst TASK_LIMIT = 20;\n\nexport const executeTask = async (c, task, parentTask, originTask, isFirstTask) => {\n    const pt = parentTask ? `=> [${parentTask}] ` : '';\n    c._currentTask = task;\n    logInitTask(`${pt}=> [${chalk().bold.rgb(170, 106, 170)(task)}]`);\n\n    if (!executedTasks[task]) executedTasks[task] = 0;\n    if (executedTasks[task] > TASK_LIMIT) {\n        return Promise.reject(`You reached maximum amount of executions per one task (${TASK_LIMIT}) task: ${task}.\nThis is to warn you ended up in task loop.\n(${task} calls same or another task which calls ${task} again)\nbut issue migh not be necessarily with this task\n\nTo avoid that test your task code against parentTask and avoid executing same task X from within task X`);\n    }\n    await getEngineRunner(c, task).executeTask(c, task, parentTask, originTask, isFirstTask);\n    executedTasks[task]++;\n\n    c._currentTask = parentTask;\n    const prt = parentTask ? `<= [${chalk().rgb(170, 106, 170)(parentTask)}] ` : '';\n    logExitTask(`${prt}<= ${task}`);\n};\n\nexport const executeOrSkipTask = async (c, task, parentTask, originTask) => {\n    if (!c.program.only) {\n        return executeTask(c, task, parentTask, originTask);\n    }\n\n    return executeTask(c, TASK_CONFIGURE_SOFT, parentTask, originTask);\n};\n\nconst _getTaskOption = ({ taskInstance, hasMultipleSubTasks }) => {\n    if (hasMultipleSubTasks) {\n        return `${taskInstance.task.split(' ')[0]}...`;\n    }\n    if (taskInstance.description && taskInstance.description !== '') {\n        return `${taskInstance.task.split(' ')[0]} ${chalk().grey(`(${taskInstance.description})`)}`;\n    }\n    return `${taskInstance.task.split(' ')[0]}`;\n};\n\nexport const findSuitableTask = async (c) => {\n    if (!c.command) {\n        const suitableTaskInstances = {};\n        REGISTERED_ENGINES.forEach((engine) => {\n            engine.getTasks().forEach((taskInstance) => {\n                const key = taskInstance.task.split(' ')[0];\n                let hasMultipleSubTasks = false;\n                if (taskInstance.task.includes(' ')) hasMultipleSubTasks = true;\n                suitableTaskInstances[key] = {\n                    taskInstance,\n                    hasMultipleSubTasks\n                };\n            });\n        });\n\n        const taskInstances = Object.values(suitableTaskInstances);\n        let tasks;\n        let defaultCmd = 'new';\n        let tasksCommands;\n        let filteredTasks;\n        let addendum = '';\n        if (!c.paths.project.configExists) {\n            filteredTasks = taskInstances.filter(v => v.taskInstance.isGlobalScope);\n            tasks = filteredTasks.map(v => _getTaskOption(v)).sort();\n            tasksCommands = filteredTasks.map(v => v.taskInstance.task.split(' ')[0]).sort();\n            addendum = ' (Not a ReNative project. options will be limited)';\n        } else {\n            tasks = taskInstances.map(v => _getTaskOption(v)).sort();\n            tasksCommands = taskInstances.map(v => v.taskInstance.task.split(' ')[0]).sort();\n            defaultCmd = tasks.find(v => v.startsWith('run'));\n        }\n\n        const { command } = await inquirerPrompt({\n            type: 'list',\n            default: defaultCmd,\n            name: 'command',\n            message: `Pick a command${addendum}`,\n            choices: tasks,\n            pageSize: 15,\n            logMessage: 'Welcome to the brave new world...'\n        });\n        c.command = tasksCommands[tasks.indexOf(command)];\n    }\n    let task = c.command;\n    if (c.subCommand) task += ` ${c.subCommand}`;\n\n    let suitableEngines = REGISTERED_ENGINES.filter(engine => engine.hasTask(task, c.paths.project.configExists));\n    const autocompleteEngines = REGISTERED_ENGINES.filter(engine => engine.getSubTasks(task, true).length);\n\n    const isAutoComplete = !suitableEngines.length && !!c.command && !autocompleteEngines.length;\n    const message = isAutoComplete ? `Autocomplete action for \"${c.command}\"` : `Pick a subCommand for ${c.command}`;\n\n    if (!suitableEngines.length) {\n        // Get all supported tasks\n        const supportedSubtasksArr = [];\n        REGISTERED_ENGINES.forEach((engine) => {\n            engine.getSubTasks(task).forEach((taskInstance) => {\n                const isNotViable = !c.paths.project.configExists && !taskInstance.isGlobalScope;\n                if (!isNotViable) {\n                    const taskKey = isAutoComplete ? taskInstance.task : taskInstance.task.split(' ')[1];\n\n                    supportedSubtasksArr.push({\n                        desc: taskInstance.description?.toLowerCase?.(),\n                        taskKey\n                    });\n                }\n            });\n        });\n        const supportedSubtasks = {};\n        // Normalize task options\n        const supportedSubtasksFilter = {};\n        supportedSubtasksArr.forEach((tsk) => {\n            const mergedTask = supportedSubtasksFilter[tsk.taskKey];\n            if (!mergedTask) {\n                supportedSubtasksFilter[tsk.taskKey] = tsk;\n            } else if (!mergedTask.desc.includes(tsk.desc)) {\n                mergedTask.desc += `, ${tsk.desc}`;\n            }\n        });\n        // Generate final list object\n        Object.values(supportedSubtasksFilter).forEach((v) => {\n            const desc = v.desc ? `(${v.desc})` : '';\n            const key = `${v.taskKey} ${chalk().grey(desc)}`;\n            supportedSubtasks[key] = {\n                taskKey: v.taskKey\n            };\n        });\n\n        const subTasks = Object.keys(supportedSubtasks);\n        if (subTasks.length) {\n            const { subCommand } = await inquirerPrompt({\n                type: 'list',\n                name: 'subCommand',\n                message,\n                choices: subTasks,\n            });\n            if (isAutoComplete) {\n                task = supportedSubtasks[subCommand].taskKey;\n                c.command = task.split(' ')[0];\n                c.subCommand = task.split(' ')[1];\n                if (c.subCommand) {\n                    task = `${c.command} ${c.subCommand}`;\n                } else {\n                    task = `${c.command}`;\n                }\n            } else {\n                c.subCommand = supportedSubtasks[subCommand].taskKey;\n                task = `${c.command} ${c.subCommand}`;\n            }\n\n\n            suitableEngines = REGISTERED_ENGINES.filter(engine => engine.hasTask(task, c.paths.project.configExists));\n        }\n    }\n\n    if (!suitableEngines.length) {\n        logError(`could not find suitable task for ${chalk().white(c.command)}`);\n        c.command = null;\n        c.subCommand = null;\n        return findSuitableTask(c);\n    }\n\n    if (!c.platform || c.platform === true) {\n        const supportedPlatforms = {};\n        suitableEngines.forEach((engine) => {\n            engine.getTask(task).platforms.forEach((plat) => {\n                supportedPlatforms[plat] = true;\n            });\n        });\n        const platforms = Object.keys(supportedPlatforms);\n\n        if (platforms.length) {\n            const { platform } = await inquirerPrompt({\n                type: 'list',\n                name: 'platform',\n                message: `Pick a platform for ${task}`,\n                choices: platforms,\n            });\n            c.platform = platform;\n        }\n    }\n    c.runtime.engine = getEngineRunner(c, task);\n    logInfo(`Current Engine: ${chalk().bold.white(\n        c.runtime.engine.getId()\n    )}`);\n    return c.runtime.engine.getTask(task);\n};\n\nexport const getRegisteredEngines = () => REGISTERED_ENGINES;\n\nexport default {\n    getRegisteredEngines\n};\n"],"file":"index.js"}