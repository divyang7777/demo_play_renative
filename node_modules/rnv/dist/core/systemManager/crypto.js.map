{"version":3,"sources":["../../../src/core/systemManager/crypto.js"],"names":["getEnvExportCmd","envVar","key","isSystemWin","white","getEnvVar","c","p1","paths","workspace","dir","split","pop","replace","p2","files","project","package","name","toUpperCase","checkCrypto","parentTask","originTask","program","ci","config","crypto","optional","sourceRaw","decrypt","source","destRaw","encrypt","dest","tsProjectPath","wsPath","path","join","tsWorkspacePath","tsWorkspace","tsProject","parseInt","toString","grey","Date","TASK_CRYPTO_DECRYPT"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {\n    chalk,\n    logWarning,\n    logTask,\n    logDebug,\n} from './logger';\nimport { isSystemWin } from '../utils';\nimport {\n    getRealPath,\n    fsExistsSync,\n    fsReadFileSync\n} from './fileutils';\nimport { TASK_CRYPTO_DECRYPT } from '../constants';\nimport { executeTask } from '../engineManager';\n\nexport const getEnvExportCmd = (envVar, key) => {\n    if (isSystemWin) {\n        return `${chalk().white(`setx ${envVar} \"${key}\"`)}`;\n    }\n    return `${chalk().white(`export ${envVar}=\"${key}\"`)}`;\n};\n\nexport const getEnvVar = (c) => {\n    const p1 = c.paths.workspace.dir\n        .split('/')\n        .pop()\n        .replace('.', '');\n    const p2 = c.files.project.package.name\n        .replace('@', '')\n        .replace('/', '_')\n        .replace(/-/g, '_');\n    const envVar = `CRYPTO_${p1}_${p2}`.toUpperCase();\n    logDebug('encrypt looking for env var:', envVar);\n    return envVar;\n};\n\n\nexport const checkCrypto = async (c, parentTask, originTask) => {\n    logTask('checkCrypto');\n\n    if (c.program.ci || c.files.project.config?.crypto?.optional) return;\n\n    const sourceRaw = c.files.project.config?.crypto?.decrypt?.source;\n    const destRaw = c.files.project.config?.crypto?.encrypt?.dest;\n\n    if (destRaw) {\n        if (sourceRaw && destRaw) {\n            const source = `${getRealPath(c, sourceRaw, 'decrypt.source')}`;\n            const tsProjectPath = `${source}.timestamp`;\n            const wsPath = path.join(\n                c.paths.workspace.dir,\n                c.files.project.package.name\n            );\n            const tsWorkspacePath = path.join(wsPath, 'timestamp');\n            if (!fsExistsSync(source)) {\n                logWarning(\n                    \"This project uses encrypted files but you don't have them installed\"\n                );\n            } else {\n                let tsWorkspace = 0;\n                let tsProject = 0;\n                if (fsExistsSync(tsWorkspacePath)) {\n                    tsWorkspace = parseInt(\n                        fsReadFileSync(tsWorkspacePath).toString(),\n                        10\n                    );\n                }\n\n                if (fsExistsSync(tsProjectPath)) {\n                    tsProject = parseInt(\n                        fsReadFileSync(tsProjectPath).toString(),\n                        10\n                    );\n                }\n\n                if (tsProject > tsWorkspace) {\n                    logWarning(`Your ${tsWorkspacePath} is out of date.\nproject timestamp: ${chalk().grey(`${tsProject} - ${new Date(tsProject)}`)}\nworkspace timestamp: ${chalk().grey(`${tsWorkspace} - ${new Date(tsWorkspace)}`)}\nyou should run decrypt`);\n                    await executeTask(c, TASK_CRYPTO_DECRYPT, parentTask, originTask);\n                    return;\n                }\n\n                if (tsProject < tsWorkspace) {\n                    logWarning(\n                        `Your ${tsWorkspacePath} is newer than your project one.`\n                    );\n                }\n            }\n        }\n    }\n};\n"],"file":"crypto.js"}