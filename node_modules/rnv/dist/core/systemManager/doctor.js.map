{"version":3,"sources":["../../../src/core/systemManager/doctor.js"],"names":["getSortedObject","obj","Array","isArray","keys","Object","sort","newObj","addedKeys","forEach","v","checkForDuplicates","arr","dupCheck","k","white","fixPackageJson","c","pkgPath","Promise","resolve","pth","paths","project","package","pp","output","fixPackageObject","usedKeys","PACKAGE_JSON_FILEDS","dependencies","devDependencies"],"mappings":"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","sourcesContent":["import { writeFileSync, readObjectSync } from './fileutils';\nimport { PACKAGE_JSON_FILEDS } from '../constants';\nimport { chalk, logWarning } from './logger';\n\nconst getSortedObject = (obj) => {\n    if (obj !== null && typeof obj === 'object' && !Array.isArray(obj)) {\n        const keys = Object.keys(obj).sort();\n        const newObj = {};\n        const addedKeys = {};\n        keys.forEach((v) => {\n            if (!addedKeys[v]) {\n                newObj[v] = obj[v];\n                addedKeys[v] = true;\n            }\n        });\n        return newObj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.sort();\n    }\n    return obj;\n};\n\nconst checkForDuplicates = (arr) => {\n    const dupCheck = {};\n    arr.forEach((v) => {\n        if (v) {\n            Object.keys(v).forEach((k) => {\n                if (dupCheck[k]) {\n                    logWarning(\n                        `Key ${chalk().white(\n                            k\n                        )} is duplicated in your package.json`\n                    );\n                }\n                dupCheck[k] = true;\n            });\n        }\n    });\n};\n\nconst fixPackageJson = (c, pkgPath) => new Promise((resolve) => {\n    const pth = pkgPath || c.paths.project.package;\n    const pp = readObjectSync(pth);\n    const output = fixPackageObject(pp);\n    writeFileSync(pth, output, 4);\n    resolve();\n});\n\nconst fixPackageObject = (pp) => {\n    const output = {};\n    const usedKeys = {};\n\n    PACKAGE_JSON_FILEDS.forEach((v) => {\n        if (pp[v] !== null) {\n            output[v] = getSortedObject(pp[v]);\n            usedKeys[v] = true;\n        }\n    });\n    Object.keys(pp).forEach((k) => {\n        if (!usedKeys[k]) {\n            output[k] = pp[k];\n        }\n    });\n\n    checkForDuplicates([pp.dependencies, pp.devDependencies]);\n\n    return output;\n};\n\nexport { fixPackageJson, fixPackageObject };\nexport default {\n    fixPackageJson,\n    fixPackageObject\n};\n"],"file":"doctor.js"}