{"version":3,"sources":["../../../src/core/deployManager/webTools.js"],"names":["DEPLOY_TARGET_DOCKER","DEPLOY_TARGET_AWS","DEPLOY_TARGET_FTP","DEPLOY_TARGET_NOW","DEPLOY_TARGET_NONE","_runDeployment","c","platform","deployType","Promise","resolve","deployToDocker","setRNVPath","process","mainModule","filename","split","doDeploy","deployerPackage","reject","Error","_runExport","exportType","rnvPath","doExport","selectToolAndExecute","choices","configFunction","executeFunction","isDeploy","defaultChoice","argv","slice","type","t","deployConfig","name","default","message","white","selectedTarget","paths","appConfig","config","selectWebToolAndDeploy","configureDeploymentIfRequired","selectWebToolAndExport","configureExportIfRequired"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\nimport minimist from 'minimist';\n\nimport { taskRnvDeployNow } from '../../integration-now';\nimport { deployToFtp } from '../../integration-ftp';\nimport { importPackageFromProject, getConfigProp } from '../common';\nimport { chalk, logInfo } from '../systemManager/logger';\nimport {\n    configureDeploymentIfRequired,\n    configureExportIfRequired\n} from './configure';\nimport { inquirerPrompt } from '../../cli/prompt';\n\nconst DEPLOY_TARGET_DOCKER = 'docker';\nconst DEPLOY_TARGET_AWS = 'aws';\nconst DEPLOY_TARGET_FTP = 'ftp';\nconst DEPLOY_TARGET_NOW = 'now';\nconst DEPLOY_TARGET_NONE = 'none';\n\nconst _runDeployment = async (c, platform, deployType) => {\n    switch (deployType) {\n        case DEPLOY_TARGET_FTP:\n            return deployToFtp(c);\n        case DEPLOY_TARGET_NOW:\n            return taskRnvDeployNow(c);\n        case DEPLOY_TARGET_NONE:\n            return Promise.resolve();\n        case DEPLOY_TARGET_DOCKER: {\n            const deployToDocker = importPackageFromProject(\n                '@rnv/deploy-docker'\n            );\n            deployToDocker.setRNVPath(\n                process.mainModule.filename.split(\n                    '/bin/index.js'\n                )[0]\n            );\n            return deployToDocker.doDeploy();\n        }\n        case DEPLOY_TARGET_AWS: {\n            const deployerPackage = importPackageFromProject('@rnv/deploy-aws');\n            deployerPackage.setRNVPath(process.mainModule.filename.split('/bin/index.js')[0]);\n            return deployerPackage.doDeploy();\n        }\n        default:\n            return Promise.reject(\n                new Error(`Deploy Type not supported ${deployType}`)\n            );\n    }\n};\n\nconst _runExport = (c, platform, exportType) => {\n    switch (exportType) {\n        case DEPLOY_TARGET_DOCKER: {\n            const rnvPath = process.mainModule.filename.split(\n                '/bin/index.js'\n            )[0];\n            const deployToDocker = importPackageFromProject(\n                '@rnv/deploy-docker'\n            );\n            deployToDocker.setRNVPath(rnvPath);\n            return deployToDocker.doExport();\n        }\n        case DEPLOY_TARGET_NONE:\n            return Promise.resolve();\n        default:\n            return Promise.reject(\n                new Error(`Export Type not supported ${exportType}`)\n            );\n    }\n};\n\nconst selectToolAndExecute = async ({\n    c,\n    platform,\n    choices,\n    configFunction,\n    executeFunction,\n    isDeploy = true,\n    defaultChoice\n}) => {\n    const argv = minimist(c.process.argv.slice(2));\n    const type = argv.t;\n    const deployConfig = getConfigProp(c, c.platform, 'deploy');\n\n    if (type || (deployConfig?.type)\n    ) {\n        await configFunction(type || deployConfig.type);\n        return executeFunction(c, platform, type || deployConfig.type);\n    }\n    const { selectedTarget } = await inquirerPrompt({\n        name: 'selectedTarget',\n        type: 'list',\n        choices,\n        default: defaultChoice,\n        message: `Which type of ${\n            isDeploy ? 'deploy' : 'export'\n        } option would you like to use for ${chalk().white(c.platform)}?`\n    });\n\n    await configFunction(c, selectedTarget);\n\n    logInfo(\n        `Setting your appconfig for ${chalk().white(platform)} to include ${\n            isDeploy ? 'deploy' : 'export'\n        } type: ${chalk().white(selectedTarget)} at ${chalk().white(\n            c.paths.appConfig.config\n        )}`\n    );\n    return executeFunction(c, platform, selectedTarget);\n};\n\nconst selectWebToolAndDeploy = (c, platform) => selectToolAndExecute({\n    c,\n    platform,\n    choices: [DEPLOY_TARGET_DOCKER, DEPLOY_TARGET_AWS, DEPLOY_TARGET_FTP, DEPLOY_TARGET_NOW, DEPLOY_TARGET_NONE],\n    configFunction: configureDeploymentIfRequired,\n    executeFunction: _runDeployment\n});\n\nconst selectWebToolAndExport = (c, platform) => selectToolAndExecute({\n    c,\n    platform,\n    choices: [DEPLOY_TARGET_DOCKER, DEPLOY_TARGET_NONE],\n    configFunction: configureExportIfRequired,\n    executeFunction: _runExport,\n    isDeploy: false,\n    defaultChoice: DEPLOY_TARGET_NONE,\n});\n\nexport {\n    selectWebToolAndDeploy,\n    selectWebToolAndExport,\n    DEPLOY_TARGET_FTP,\n    DEPLOY_TARGET_NOW,\n    DEPLOY_TARGET_AWS,\n    DEPLOY_TARGET_NONE\n};\n"],"file":"webTools.js"}